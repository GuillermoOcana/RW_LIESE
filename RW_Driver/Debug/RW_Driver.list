
RW_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004684  08004684  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800468c  0800468c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000388  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbc8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdb  00000000  00000000  0002cc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa8  00000000  00000000  0002f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204bb  00000000  00000000  0002fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c525  00000000  00000000  000502c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c720d  00000000  00000000  0005c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001239f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003010  00000000  00000000  00123a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800465c 	.word	0x0800465c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800465c 	.word	0x0800465c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <RW_Driver_Init>:
  * @param FlyWheel1 Contains information about the Wheel 1
  * @param FlyWheel2 Contains information about the Wheel 2
  * @param FlyWheel3 Contains information about the Wheel 3
  * @retval None
  */
void RW_Driver_Init(RW_Driver_Type* RW_Driver, FlyWheel_Type* FlyWheel0, FlyWheel_Type* FlyWheel1, FlyWheel_Type* FlyWheel2, FlyWheel_Type * FlyWheel3){
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
 80004cc:	603b      	str	r3, [r7, #0]
	RW_Driver->FlyWheel0=FlyWheel0;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	601a      	str	r2, [r3, #0]
	RW_Driver->FlyWheel1=FlyWheel1;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	605a      	str	r2, [r3, #4]
	RW_Driver->FlyWheel2=FlyWheel2;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	609a      	str	r2, [r3, #8]
	RW_Driver->FlyWheel3=FlyWheel3;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	69ba      	ldr	r2, [r7, #24]
 80004e4:	60da      	str	r2, [r3, #12]

	RW_Driver->DriverStatus=0;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2200      	movs	r2, #0
 80004ea:	741a      	strb	r2, [r3, #16]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <RW_Driver_ReadSolicitude>:
 * @brief CAN request to Get information
 * @param RW_Driver Structure that contains the information of the wheels
 * @param RxData CAN Frame that details the requested info
 * @retval CAN Frame with the requested info
 */
uint8_t RW_Driver_ReadSolicitude(RW_Driver_Type* RW_Driver, uint8_t RxData[]){
 80004f8:	b480      	push	{r7}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]

	uint8_t ID= (RxData[0]>>6) & 0x3;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	099b      	lsrs	r3, r3, #6
 8000508:	73fb      	strb	r3, [r7, #15]
	uint8_t Instruction=(RxData[0]>>1) & 0x1F;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	085b      	lsrs	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f003 031f 	and.w	r3, r3, #31
 8000516:	73bb      	strb	r3, [r7, #14]
	uint8_t Data=0;
 8000518:	2300      	movs	r3, #0
 800051a:	75fb      	strb	r3, [r7, #23]
	FlyWheel_Type* FlyWheel;

	switch(ID){
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d81a      	bhi.n	8000558 <RW_Driver_ReadSolicitude+0x60>
 8000522:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <RW_Driver_ReadSolicitude+0x30>)
 8000524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000528:	08000539 	.word	0x08000539
 800052c:	08000541 	.word	0x08000541
 8000530:	08000549 	.word	0x08000549
 8000534:	08000551 	.word	0x08000551
		case 0:
			FlyWheel= RW_Driver->FlyWheel0;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	613b      	str	r3, [r7, #16]
			break;
 800053e:	e00d      	b.n	800055c <RW_Driver_ReadSolicitude+0x64>
		case 1:
			FlyWheel= RW_Driver->FlyWheel1;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	613b      	str	r3, [r7, #16]
			break;
 8000546:	e009      	b.n	800055c <RW_Driver_ReadSolicitude+0x64>
		case 2:
			FlyWheel= RW_Driver->FlyWheel2;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	613b      	str	r3, [r7, #16]
			break;
 800054e:	e005      	b.n	800055c <RW_Driver_ReadSolicitude+0x64>
		case 3:
			FlyWheel= RW_Driver->FlyWheel3;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	613b      	str	r3, [r7, #16]
			break;
 8000556:	e001      	b.n	800055c <RW_Driver_ReadSolicitude+0x64>
		default:
			return Data;
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	e013      	b.n	8000584 <RW_Driver_ReadSolicitude+0x8c>
	}

	if(Instruction==0){ //Se pidió PowerMode
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d104      	bne.n	800056c <RW_Driver_ReadSolicitude+0x74>
		Data= FlyWheel->PowerMode;
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000568:	75fb      	strb	r3, [r7, #23]
 800056a:	e00a      	b.n	8000582 <RW_Driver_ReadSolicitude+0x8a>
	}
	else if(Instruction==1){
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d104      	bne.n	800057c <RW_Driver_ReadSolicitude+0x84>
		Data= FlyWheel->DutyCicle;
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000578:	75fb      	strb	r3, [r7, #23]
 800057a:	e002      	b.n	8000582 <RW_Driver_ReadSolicitude+0x8a>
	}
	else{
		Data= RW_Driver->DriverStatus;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7c1b      	ldrb	r3, [r3, #16]
 8000580:	75fb      	strb	r3, [r7, #23]
	}

	return Data;
 8000582:	7dfb      	ldrb	r3, [r7, #23]

}
 8000584:	4618      	mov	r0, r3
 8000586:	371c      	adds	r7, #28
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <RW_Driver_WriteSolicitude>:
 * @brief CAN request to Set information
 * @param RW_Driver Structure that contains the information of the wheels
 * @param RxData CAN Frame that details the information to modify
 * @retval None
 */
void RW_Driver_WriteSolicitude(RW_Driver_Type* RW_Driver, uint8_t RxData[]){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]

	uint8_t ID= (RxData[0]>>6) & 0x3;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	099b      	lsrs	r3, r3, #6
 80005a0:	72fb      	strb	r3, [r7, #11]
	uint8_t Instruction=(RxData[0]>>1) & 0x1F;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f003 031f 	and.w	r3, r3, #31
 80005ae:	72bb      	strb	r3, [r7, #10]
	uint8_t Data=RxData[1];
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	727b      	strb	r3, [r7, #9]
	FlyWheel_Type* FlyWheel;

	switch(ID){
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d81b      	bhi.n	80005f4 <RW_Driver_WriteSolicitude+0x64>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <RW_Driver_WriteSolicitude+0x34>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005d5 	.word	0x080005d5
 80005c8:	080005dd 	.word	0x080005dd
 80005cc:	080005e5 	.word	0x080005e5
 80005d0:	080005ed 	.word	0x080005ed
		case 0:
			FlyWheel= RW_Driver->FlyWheel0;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60fb      	str	r3, [r7, #12]
			break;
 80005da:	e00d      	b.n	80005f8 <RW_Driver_WriteSolicitude+0x68>
		case 1:
			FlyWheel= RW_Driver->FlyWheel1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	60fb      	str	r3, [r7, #12]
			break;
 80005e2:	e009      	b.n	80005f8 <RW_Driver_WriteSolicitude+0x68>
		case 2:
			FlyWheel= RW_Driver->FlyWheel2;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	60fb      	str	r3, [r7, #12]
			break;
 80005ea:	e005      	b.n	80005f8 <RW_Driver_WriteSolicitude+0x68>
		case 3:
			FlyWheel= RW_Driver->FlyWheel3;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60fb      	str	r3, [r7, #12]
			break;
 80005f2:	e001      	b.n	80005f8 <RW_Driver_WriteSolicitude+0x68>
		default:
			FlyWheel= NULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
	}

	if (FlyWheel != NULL){
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d024      	beq.n	8000648 <RW_Driver_WriteSolicitude+0xb8>
		if(Instruction==0){ //Se pidió modificar PowerMode
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d106      	bne.n	8000612 <RW_Driver_WriteSolicitude+0x82>
			//FlyWheel->PowerMode= Data;
			RW_Driver_SetPowerMode(RW_Driver, FlyWheel, Data);
 8000604:	7a7b      	ldrb	r3, [r7, #9]
 8000606:	461a      	mov	r2, r3
 8000608:	68f9      	ldr	r1, [r7, #12]
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f8aa 	bl	8000764 <RW_Driver_SetPowerMode>
				RW_Diver_Stop(RW_Driver);
			}
		}
	}

}
 8000610:	e01a      	b.n	8000648 <RW_Driver_WriteSolicitude+0xb8>
		else if (Instruction==1){
 8000612:	7abb      	ldrb	r3, [r7, #10]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10d      	bne.n	8000634 <RW_Driver_WriteSolicitude+0xa4>
			if (Data>=0 && Data<=100)
 8000618:	7a7b      	ldrb	r3, [r7, #9]
 800061a:	2b64      	cmp	r3, #100	; 0x64
 800061c:	d805      	bhi.n	800062a <RW_Driver_WriteSolicitude+0x9a>
				FlyWheel->DutyCicle= Data;
 800061e:	7a7b      	ldrb	r3, [r7, #9]
 8000620:	b29a      	uxth	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8000628:	e00e      	b.n	8000648 <RW_Driver_WriteSolicitude+0xb8>
				FlyWheel->DutyCicle= 50;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2232      	movs	r2, #50	; 0x32
 800062e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8000632:	e009      	b.n	8000648 <RW_Driver_WriteSolicitude+0xb8>
			if(Data){
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <RW_Driver_WriteSolicitude+0xb2>
				RW_Diver_Start(RW_Driver);
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f808 	bl	8000650 <RW_Diver_Start>
}
 8000640:	e002      	b.n	8000648 <RW_Driver_WriteSolicitude+0xb8>
				RW_Diver_Stop(RW_Driver);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f86a 	bl	800071c <RW_Diver_Stop>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <RW_Diver_Start>:
/**
 * @brief RW_Driver starts working
 * @param RW_Driver Structure that contains the information of the wheels
 * @retval None
 */
void RW_Diver_Start(RW_Driver_Type* RW_Driver){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (!(RW_Driver->DriverStatus)){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7c1b      	ldrb	r3, [r3, #16]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d151      	bne.n	8000704 <RW_Diver_Start+0xb4>
		FlyWheel_StartPWM(RW_Driver->FlyWheel0);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f923 	bl	80008b0 <FlyWheel_StartPWM>
		FlyWheel_StartPWM(RW_Driver->FlyWheel1);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f91e 	bl	80008b0 <FlyWheel_StartPWM>
		FlyWheel_StartPWM(RW_Driver->FlyWheel2);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f919 	bl	80008b0 <FlyWheel_StartPWM>
		FlyWheel_StartPWM(RW_Driver->FlyWheel3);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f914 	bl	80008b0 <FlyWheel_StartPWM>

		RW_Driver->DriverStatus=1;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	741a      	strb	r2, [r3, #16]

		uint8_t phase;

		phase= (GPIOD->IDR) & 0x7;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <RW_Diver_Start+0xbc>)
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	73fb      	strb	r3, [r7, #15]
		FlyWheel_MoveMotor(RW_Driver->FlyWheel0, phase);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	7bfa      	ldrb	r2, [r7, #15]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f93a 	bl	800091c <FlyWheel_MoveMotor>

		phase= ((GPIOE->IDR) & 0x70)>>4;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <RW_Diver_Start+0xc0>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	091b      	lsrs	r3, r3, #4
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	73fb      	strb	r3, [r7, #15]
		FlyWheel_MoveMotor(RW_Driver->FlyWheel1, phase);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	7bfa      	ldrb	r2, [r7, #15]
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f92c 	bl	800091c <FlyWheel_MoveMotor>

		phase= (((GPIOB->IDR) & 0x500)|((GPIOC->IDR) & 0x200))>>8;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <RW_Diver_Start+0xc4>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	f403 62a0 	and.w	r2, r3, #1280	; 0x500
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <RW_Diver_Start+0xc8>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006d4:	4313      	orrs	r3, r2
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	73fb      	strb	r3, [r7, #15]
		FlyWheel_MoveMotor(RW_Driver->FlyWheel2, phase);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	7bfa      	ldrb	r2, [r7, #15]
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f91a 	bl	800091c <FlyWheel_MoveMotor>

		phase= ((GPIOB->IDR) & 0xE000)>>13;;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <RW_Diver_Start+0xc4>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	0b5b      	lsrs	r3, r3, #13
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 0307 	and.w	r3, r3, #7
 80006f4:	73fb      	strb	r3, [r7, #15]
		FlyWheel_MoveMotor(RW_Driver->FlyWheel3, phase);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	7bfa      	ldrb	r2, [r7, #15]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f90c 	bl	800091c <FlyWheel_MoveMotor>
	}
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40021000 	.word	0x40021000
 8000714:	40020400 	.word	0x40020400
 8000718:	40020800 	.word	0x40020800

0800071c <RW_Diver_Stop>:
/**
 * @brief RW_Driver stops working
 * @param RW_Driver Structure that contains the information of the wheels
 * @retval None
 */
void RW_Diver_Stop(RW_Driver_Type* RW_Driver){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if (RW_Driver->DriverStatus){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7c1b      	ldrb	r3, [r3, #16]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d016      	beq.n	800075a <RW_Diver_Stop+0x3e>
		FlyWheel_StopPWM(RW_Driver->FlyWheel0);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f8d8 	bl	80008e6 <FlyWheel_StopPWM>
		FlyWheel_StopPWM(RW_Driver->FlyWheel1);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f8d3 	bl	80008e6 <FlyWheel_StopPWM>
		FlyWheel_StopPWM(RW_Driver->FlyWheel2);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f8ce 	bl	80008e6 <FlyWheel_StopPWM>
		FlyWheel_StopPWM(RW_Driver->FlyWheel3);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f8c9 	bl	80008e6 <FlyWheel_StopPWM>

		RW_Driver->DriverStatus=0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	741a      	strb	r2, [r3, #16]
	}
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <RW_Driver_SetPowerMode>:
 * @brief Turn a wheel On/Off
 * @param RW_Driver Structure that contains the information of the wheels
 * @param FlyWheel Structure that contains the information of one specific wheel
 * @param Data Set the status of the Wheel
 */
void RW_Driver_SetPowerMode(RW_Driver_Type* RW_Driver, FlyWheel_Type* FlyWheel, uint8_t Data){
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	4613      	mov	r3, r2
 8000770:	71fb      	strb	r3, [r7, #7]
	if(RW_Driver->DriverStatus){
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	7c1b      	ldrb	r3, [r3, #16]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d047      	beq.n	800080a <RW_Driver_SetPowerMode+0xa6>
		if(Data){
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d041      	beq.n	8000804 <RW_Driver_SetPowerMode+0xa0>
			FlyWheel_StartPWM(FlyWheel);
 8000780:	68b8      	ldr	r0, [r7, #8]
 8000782:	f000 f895 	bl	80008b0 <FlyWheel_StartPWM>

			uint8_t phase;
			if(FlyWheel->Wheel_Id==0)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <RW_Driver_SetPowerMode+0x3a>
				phase= (GPIOD->IDR) & 0x7;
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <RW_Driver_SetPowerMode+0xb0>)
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	75fb      	strb	r3, [r7, #23]
 800079c:	e02c      	b.n	80007f8 <RW_Driver_SetPowerMode+0x94>

			else if(FlyWheel->Wheel_Id==1)
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d107      	bne.n	80007b8 <RW_Driver_SetPowerMode+0x54>
				phase= ((GPIOE->IDR) & 0x70)>>4;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <RW_Driver_SetPowerMode+0xb4>)
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	091b      	lsrs	r3, r3, #4
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0307 	and.w	r3, r3, #7
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	e01f      	b.n	80007f8 <RW_Driver_SetPowerMode+0x94>

			else if (FlyWheel->Wheel_Id==2)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d10b      	bne.n	80007da <RW_Driver_SetPowerMode+0x76>
				phase= (((GPIOB->IDR) & 0x500)|((GPIOC->IDR) & 0x200))>>8;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <RW_Driver_SetPowerMode+0xb8>)
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	f403 62a0 	and.w	r2, r3, #1280	; 0x500
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <RW_Driver_SetPowerMode+0xbc>)
 80007cc:	691b      	ldr	r3, [r3, #16]
 80007ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007d2:	4313      	orrs	r3, r2
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	75fb      	strb	r3, [r7, #23]
 80007d8:	e00e      	b.n	80007f8 <RW_Driver_SetPowerMode+0x94>

			else if (FlyWheel->Wheel_Id==3)
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d107      	bne.n	80007f4 <RW_Driver_SetPowerMode+0x90>
				phase= ((GPIOB->IDR) & 0xE000)>>13;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <RW_Driver_SetPowerMode+0xb8>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	0b5b      	lsrs	r3, r3, #13
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	75fb      	strb	r3, [r7, #23]
 80007f2:	e001      	b.n	80007f8 <RW_Driver_SetPowerMode+0x94>

			else
				phase=0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	75fb      	strb	r3, [r7, #23]

			FlyWheel_MoveMotor(FlyWheel, phase);
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	4619      	mov	r1, r3
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f000 f88d 	bl	800091c <FlyWheel_MoveMotor>
		}
		else
			FlyWheel_StopPWM(FlyWheel);
	}
}
 8000802:	e002      	b.n	800080a <RW_Driver_SetPowerMode+0xa6>
			FlyWheel_StopPWM(FlyWheel);
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f000 f86e 	bl	80008e6 <FlyWheel_StopPWM>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40020c00 	.word	0x40020c00
 8000818:	40021000 	.word	0x40021000
 800081c:	40020400 	.word	0x40020400
 8000820:	40020800 	.word	0x40020800

08000824 <Configure_High_Output>:
  * @param Pin_B Indicates the PIN corresponding for the Port in the Output B
  * @param OutputC Indicates to Port for Output C
  * @param Pin_C Indicates the PIN corresponding for the Port in the Output C
  * @retval None
  */
void Configure_High_Output(High_Output_Drive_Type* Wheel_HD, GPIO_TypeDef* OutputA, uint16_t Pin_A, GPIO_TypeDef* OutputB, uint16_t Pin_B, GPIO_TypeDef* OutputC, uint16_t Pin_C){
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	4613      	mov	r3, r2
 8000832:	80fb      	strh	r3, [r7, #6]
	Wheel_HD->Port_Output_A= OutputA;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	601a      	str	r2, [r3, #0]
	Wheel_HD->Port_Output_B= OutputB;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	609a      	str	r2, [r3, #8]
	Wheel_HD->Port_Output_C= OutputC;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	611a      	str	r2, [r3, #16]

	Wheel_HD->PIN_Output_A= Pin_A;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	88fa      	ldrh	r2, [r7, #6]
 800084a:	809a      	strh	r2, [r3, #4]
	Wheel_HD->PIN_Output_B= Pin_B;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	8b3a      	ldrh	r2, [r7, #24]
 8000850:	819a      	strh	r2, [r3, #12]
	Wheel_HD->PIN_Output_C= Pin_C;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	8c3a      	ldrh	r2, [r7, #32]
 8000856:	829a      	strh	r2, [r3, #20]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <FlyWheel_Init>:
  * @param FlyWheel_DC Set the Duty Cycle for the PWM
  * @param FlyWheel_PWM Indicates the Timer that will generate PWM
  * @param FlyWheel_Id Set the ID
  * @retval None
  */
void FlyWheel_Init(FlyWheel_Type* FlyWheel, High_Output_Drive_Type* FlyWheel_HD, TIM_TypeDef* FlyWheel_LD, uint16_t FlyWheel_DC, TIM_HandleTypeDef FlyWheel_PWM, uint8_t FlyWheel_Id){
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	807b      	strh	r3, [r7, #2]
	FlyWheel->PWM_Generator= FlyWheel_PWM;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4618      	mov	r0, r3
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	2248      	movs	r2, #72	; 0x48
 800087c:	4619      	mov	r1, r3
 800087e:	f003 fed7 	bl	8004630 <memcpy>
	FlyWheel->DutyCicle= FlyWheel_DC;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	887a      	ldrh	r2, [r7, #2]
 8000886:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	FlyWheel->HIGH_DRIVE= FlyWheel_HD;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	64da      	str	r2, [r3, #76]	; 0x4c
	FlyWheel->LOW_DRIVE= FlyWheel_LD;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	651a      	str	r2, [r3, #80]	; 0x50
	FlyWheel->Wheel_Id= FlyWheel_Id;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800089c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	FlyWheel->PowerMode=0;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <FlyWheel_StartPWM>:
/**
 * @brief The indicated FlyWheel starts working
 * @param FlyWheel Structure that contains the information of the wheel
 * @retval None
 */
void FlyWheel_StartPWM(FlyWheel_Type* FlyWheel){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Start(&(FlyWheel->PWM_Generator), TIM_CHANNEL_1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fff3 	bl	80038a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&(FlyWheel->PWM_Generator), TIM_CHANNEL_2);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2104      	movs	r1, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 ffee 	bl	80038a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&(FlyWheel->PWM_Generator), TIM_CHANNEL_3);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2108      	movs	r1, #8
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 ffe9 	bl	80038a8 <HAL_TIM_PWM_Start>

	FlyWheel->PowerMode=1;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <FlyWheel_StopPWM>:
/**
 * @brief The indicated FlyWheel stops working
 * @param FlyWheel Structure that contains the information of the wheel
 * @retval None
 */
void FlyWheel_StopPWM(FlyWheel_Type* FlyWheel){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop(&(FlyWheel->PWM_Generator), TIM_CHANNEL_1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 f8a0 	bl	8003a38 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&(FlyWheel->PWM_Generator), TIM_CHANNEL_2);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2104      	movs	r1, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 f89b 	bl	8003a38 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&(FlyWheel->PWM_Generator), TIM_CHANNEL_3);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2108      	movs	r1, #8
 8000906:	4618      	mov	r0, r3
 8000908:	f003 f896 	bl	8003a38 <HAL_TIM_PWM_Stop>

	FlyWheel->PowerMode=0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <FlyWheel_MoveMotor>:
 * @brief Modifies driver outputs according to motor position
 * @param FlyWheel Structure that contains the information of the wheel
 * @param phase Motor position from Hall Sensors
 * @retval None
 */
void FlyWheel_MoveMotor(FlyWheel_Type* FlyWheel, int phase){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3b01      	subs	r3, #1
 800092a:	2b05      	cmp	r3, #5
 800092c:	f200 811e 	bhi.w	8000b6c <FlyWheel_MoveMotor+0x250>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <FlyWheel_MoveMotor+0x1c>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000951 	.word	0x08000951
 800093c:	080009ab 	.word	0x080009ab
 8000940:	08000a05 	.word	0x08000a05
 8000944:	08000a5f 	.word	0x08000a5f
 8000948:	08000ab9 	.word	0x08000ab9
 800094c:	08000b13 	.word	0x08000b13
	switch(phase){
		case 1:
			  HAL_GPIO_WritePin(FlyWheel->HIGH_DRIVE->Port_Output_C, FlyWheel->HIGH_DRIVE->PIN_Output_C, GPIO_PIN_RESET);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	6918      	ldr	r0, [r3, #16]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	8a9b      	ldrh	r3, [r3, #20]
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	f002 fab4 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_B, (FlyWheel->HIGH_DRIVE)->PIN_Output_B, GPIO_PIN_RESET);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	6898      	ldr	r0, [r3, #8]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	899b      	ldrh	r3, [r3, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	f002 faaa 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_A, (FlyWheel->HIGH_DRIVE)->PIN_Output_A, GPIO_PIN_SET);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	4619      	mov	r1, r3
 8000988:	f002 faa0 	bl	8002ecc <HAL_GPIO_WritePin>

			  (FlyWheel->LOW_DRIVE)->CCR1=100;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000990:	2264      	movs	r2, #100	; 0x64
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
			  (FlyWheel->LOW_DRIVE)->CCR2=0;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000998:	2200      	movs	r2, #0
 800099a:	639a      	str	r2, [r3, #56]	; 0x38
			  (FlyWheel->LOW_DRIVE)->CCR3=(FlyWheel->DutyCicle);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009a6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80009a8:	e10b      	b.n	8000bc2 <FlyWheel_MoveMotor+0x2a6>

		case 2:
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_C, (FlyWheel->HIGH_DRIVE)->PIN_Output_C, GPIO_PIN_RESET);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	6918      	ldr	r0, [r3, #16]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b4:	8a9b      	ldrh	r3, [r3, #20]
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f002 fa87 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_B, (FlyWheel->HIGH_DRIVE)->PIN_Output_B, GPIO_PIN_SET);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	6898      	ldr	r0, [r3, #8]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	899b      	ldrh	r3, [r3, #12]
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	f002 fa7d 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_A, (FlyWheel->HIGH_DRIVE)->PIN_Output_A, GPIO_PIN_RESET);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	f002 fa73 	bl	8002ecc <HAL_GPIO_WritePin>

			  (FlyWheel->LOW_DRIVE)->CCR1=0;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ea:	2200      	movs	r2, #0
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
			  (FlyWheel->LOW_DRIVE)->CCR2=(FlyWheel->DutyCicle);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
			  (FlyWheel->LOW_DRIVE)->CCR3=100;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009fe:	2264      	movs	r2, #100	; 0x64
 8000a00:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000a02:	e0de      	b.n	8000bc2 <FlyWheel_MoveMotor+0x2a6>

		case 3:
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_C, (FlyWheel->HIGH_DRIVE)->PIN_Output_C, GPIO_PIN_RESET);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	6918      	ldr	r0, [r3, #16]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	8a9b      	ldrh	r3, [r3, #20]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	f002 fa5a 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_B, (FlyWheel->HIGH_DRIVE)->PIN_Output_B, GPIO_PIN_SET);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	6898      	ldr	r0, [r3, #8]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	899b      	ldrh	r3, [r3, #12]
 8000a24:	2201      	movs	r2, #1
 8000a26:	4619      	mov	r1, r3
 8000a28:	f002 fa50 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_A, (FlyWheel->HIGH_DRIVE)->PIN_Output_A, GPIO_PIN_RESET);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f002 fa46 	bl	8002ecc <HAL_GPIO_WritePin>

			  (FlyWheel->LOW_DRIVE)->CCR1=100;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
			  (FlyWheel->LOW_DRIVE)->CCR2=(FlyWheel->DutyCicle);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38
			  (FlyWheel->LOW_DRIVE)->CCR3=0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a58:	2200      	movs	r2, #0
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000a5c:	e0b1      	b.n	8000bc2 <FlyWheel_MoveMotor+0x2a6>

		case 4:
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_C, (FlyWheel->HIGH_DRIVE)->PIN_Output_C, GPIO_PIN_SET);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	6918      	ldr	r0, [r3, #16]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	8a9b      	ldrh	r3, [r3, #20]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f002 fa2d 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_B, (FlyWheel->HIGH_DRIVE)->PIN_Output_B, GPIO_PIN_RESET);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	6898      	ldr	r0, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	899b      	ldrh	r3, [r3, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	f002 fa23 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_A, (FlyWheel->HIGH_DRIVE)->PIN_Output_A, GPIO_PIN_RESET);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	889b      	ldrh	r3, [r3, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	f002 fa19 	bl	8002ecc <HAL_GPIO_WritePin>

			  (FlyWheel->LOW_DRIVE)->CCR1=(FlyWheel->DutyCicle);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
			  (FlyWheel->LOW_DRIVE)->CCR2=100;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000aaa:	2264      	movs	r2, #100	; 0x64
 8000aac:	639a      	str	r2, [r3, #56]	; 0x38
			  (FlyWheel->LOW_DRIVE)->CCR3=0;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000ab6:	e084      	b.n	8000bc2 <FlyWheel_MoveMotor+0x2a6>

		case 5:
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_C, (FlyWheel->HIGH_DRIVE)->PIN_Output_C, GPIO_PIN_RESET);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	6918      	ldr	r0, [r3, #16]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	8a9b      	ldrh	r3, [r3, #20]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f002 fa00 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_B, (FlyWheel->HIGH_DRIVE)->PIN_Output_B, GPIO_PIN_RESET);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	6898      	ldr	r0, [r3, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	899b      	ldrh	r3, [r3, #12]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	f002 f9f6 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_A, (FlyWheel->HIGH_DRIVE)->PIN_Output_A, GPIO_PIN_SET);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	889b      	ldrh	r3, [r3, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	f002 f9ec 	bl	8002ecc <HAL_GPIO_WritePin>

			  (FlyWheel->LOW_DRIVE)->CCR1=0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000af8:	2200      	movs	r2, #0
 8000afa:	635a      	str	r2, [r3, #52]	; 0x34
			  (FlyWheel->LOW_DRIVE)->CCR2=100;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b00:	2264      	movs	r2, #100	; 0x64
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38
			  (FlyWheel->LOW_DRIVE)->CCR3=(FlyWheel->DutyCicle);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b0e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000b10:	e057      	b.n	8000bc2 <FlyWheel_MoveMotor+0x2a6>

		case 6:
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_C, (FlyWheel->HIGH_DRIVE)->PIN_Output_C, GPIO_PIN_SET);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	6918      	ldr	r0, [r3, #16]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	8a9b      	ldrh	r3, [r3, #20]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4619      	mov	r1, r3
 8000b22:	f002 f9d3 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_B, (FlyWheel->HIGH_DRIVE)->PIN_Output_B, GPIO_PIN_RESET);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	6898      	ldr	r0, [r3, #8]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	899b      	ldrh	r3, [r3, #12]
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	f002 f9c9 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_A, (FlyWheel->HIGH_DRIVE)->PIN_Output_A, GPIO_PIN_RESET);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f002 f9bf 	bl	8002ecc <HAL_GPIO_WritePin>

			  (FlyWheel->LOW_DRIVE)->CCR1=(FlyWheel->DutyCicle);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
			  (FlyWheel->LOW_DRIVE)->CCR2=0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
			  (FlyWheel->LOW_DRIVE)->CCR3=100;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b66:	2264      	movs	r2, #100	; 0x64
 8000b68:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000b6a:	e02a      	b.n	8000bc2 <FlyWheel_MoveMotor+0x2a6>

		default:
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_C, (FlyWheel->HIGH_DRIVE)->PIN_Output_C, GPIO_PIN_RESET);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	6918      	ldr	r0, [r3, #16]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	8a9b      	ldrh	r3, [r3, #20]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f002 f9a6 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_B, (FlyWheel->HIGH_DRIVE)->PIN_Output_B, GPIO_PIN_RESET);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	6898      	ldr	r0, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	899b      	ldrh	r3, [r3, #12]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f002 f99c 	bl	8002ecc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin((FlyWheel->HIGH_DRIVE)->Port_Output_A, (FlyWheel->HIGH_DRIVE)->PIN_Output_A, GPIO_PIN_RESET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	889b      	ldrh	r3, [r3, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f002 f992 	bl	8002ecc <HAL_GPIO_WritePin>

			  (FlyWheel->LOW_DRIVE)->CCR1=0;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bac:	2200      	movs	r2, #0
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
			  (FlyWheel->LOW_DRIVE)->CCR2=0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
			  (FlyWheel->LOW_DRIVE)->CCR3=0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	63da      	str	r2, [r3, #60]	; 0x3c
		}
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b094      	sub	sp, #80	; 0x50
 8000bd0:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fff9 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f8c7 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 fbff 	bl	80013dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bde:	f000 f975 	bl	8000ecc <MX_TIM1_Init>
  MX_TIM4_Init();
 8000be2:	f000 fab7 	bl	8001154 <MX_TIM4_Init>
  MX_CAN2_Init();
 8000be6:	f000 f91d 	bl	8000e24 <MX_CAN2_Init>
  MX_TIM8_Init();
 8000bea:	f000 fb3f 	bl	800126c <MX_TIM8_Init>
  MX_TIM3_Init();
 8000bee:	f000 fa25 	bl	800103c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // High_Output_Drive_Type* Wheel_HD, GPIO_TypeDef* OutputA, uint16_t Pin_A, GPIO_TypeDef* OutputB, uint16_t Pin_B, GPIO_TypeDef* OutputC, uint16_t Pin_C
  Configure_High_Output(&Wheel1_HD, GPIOE, GPIO_PIN_14, GPIOE, GPIO_PIN_12, GPIOE, GPIO_PIN_10);
 8000bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <main+0x148>)
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <main+0x148>)
 8000c04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c08:	4942      	ldr	r1, [pc, #264]	; (8000d14 <main+0x148>)
 8000c0a:	4843      	ldr	r0, [pc, #268]	; (8000d18 <main+0x14c>)
 8000c0c:	f7ff fe0a 	bl	8000824 <Configure_High_Output>
  Configure_High_Output(&Wheel2_HD, GPIOD, GPIO_PIN_11, GPIOD, GPIO_PIN_10, GPIOD, GPIO_PIN_9);
 8000c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <main+0x150>)
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <main+0x150>)
 8000c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c26:	493d      	ldr	r1, [pc, #244]	; (8000d1c <main+0x150>)
 8000c28:	483d      	ldr	r0, [pc, #244]	; (8000d20 <main+0x154>)
 8000c2a:	f7ff fdfb 	bl	8000824 <Configure_High_Output>
  Configure_High_Output(&Wheel3_HD, GPIOD, GPIO_PIN_5, GPIOD, GPIO_PIN_4, GPIOD, GPIO_PIN_3);
 8000c2e:	2308      	movs	r3, #8
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <main+0x150>)
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	2310      	movs	r3, #16
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <main+0x150>)
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <main+0x150>)
 8000c40:	4838      	ldr	r0, [pc, #224]	; (8000d24 <main+0x158>)
 8000c42:	f7ff fdef 	bl	8000824 <Configure_High_Output>
  Configure_High_Output(&Wheel4_HD, GPIOD, GPIO_PIN_8, GPIOD, GPIO_PIN_7, GPIOD, GPIO_PIN_6);
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	9302      	str	r3, [sp, #8]
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <main+0x150>)
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <main+0x150>)
 8000c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c58:	4930      	ldr	r1, [pc, #192]	; (8000d1c <main+0x150>)
 8000c5a:	4833      	ldr	r0, [pc, #204]	; (8000d28 <main+0x15c>)
 8000c5c:	f7ff fde2 	bl	8000824 <Configure_High_Output>

  //FlyWheel, High_Output_Drive_Type FlyWheel_HD, TIM_TypeDef FlyWheel_LD, uint16_t FlyWheel_DC, TIM_HandleTypeDef FlyWheel_PWM
  FlyWheel_Init(&FlyWheel_1, &Wheel1_HD, TIM1, 50, htim1, 0);
 8000c60:	2300      	movs	r3, #0
 8000c62:	9312      	str	r3, [sp, #72]	; 0x48
 8000c64:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <main+0x160>)
 8000c66:	466b      	mov	r3, sp
 8000c68:	4611      	mov	r1, r2
 8000c6a:	2248      	movs	r2, #72	; 0x48
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fcdf 	bl	8004630 <memcpy>
 8000c72:	2332      	movs	r3, #50	; 0x32
 8000c74:	4a2e      	ldr	r2, [pc, #184]	; (8000d30 <main+0x164>)
 8000c76:	4928      	ldr	r1, [pc, #160]	; (8000d18 <main+0x14c>)
 8000c78:	482e      	ldr	r0, [pc, #184]	; (8000d34 <main+0x168>)
 8000c7a:	f7ff fdf3 	bl	8000864 <FlyWheel_Init>
  FlyWheel_Init(&FlyWheel_2, &Wheel2_HD, TIM4, 50, htim4, 1);
 8000c7e:	2301      	movs	r3, #1
 8000c80:	9312      	str	r3, [sp, #72]	; 0x48
 8000c82:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <main+0x16c>)
 8000c84:	466b      	mov	r3, sp
 8000c86:	4611      	mov	r1, r2
 8000c88:	2248      	movs	r2, #72	; 0x48
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fcd0 	bl	8004630 <memcpy>
 8000c90:	2332      	movs	r3, #50	; 0x32
 8000c92:	4a2a      	ldr	r2, [pc, #168]	; (8000d3c <main+0x170>)
 8000c94:	4922      	ldr	r1, [pc, #136]	; (8000d20 <main+0x154>)
 8000c96:	482a      	ldr	r0, [pc, #168]	; (8000d40 <main+0x174>)
 8000c98:	f7ff fde4 	bl	8000864 <FlyWheel_Init>
  FlyWheel_Init(&FlyWheel_3, &Wheel3_HD, TIM8, 50, htim8, 2);
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	9312      	str	r3, [sp, #72]	; 0x48
 8000ca0:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <main+0x178>)
 8000ca2:	466b      	mov	r3, sp
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	2248      	movs	r2, #72	; 0x48
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fcc1 	bl	8004630 <memcpy>
 8000cae:	2332      	movs	r3, #50	; 0x32
 8000cb0:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <main+0x17c>)
 8000cb2:	491c      	ldr	r1, [pc, #112]	; (8000d24 <main+0x158>)
 8000cb4:	4825      	ldr	r0, [pc, #148]	; (8000d4c <main+0x180>)
 8000cb6:	f7ff fdd5 	bl	8000864 <FlyWheel_Init>
  FlyWheel_Init(&FlyWheel_4, &Wheel4_HD, TIM3, 50, htim3, 3);
 8000cba:	2303      	movs	r3, #3
 8000cbc:	9312      	str	r3, [sp, #72]	; 0x48
 8000cbe:	4a24      	ldr	r2, [pc, #144]	; (8000d50 <main+0x184>)
 8000cc0:	466b      	mov	r3, sp
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	2248      	movs	r2, #72	; 0x48
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fcb2 	bl	8004630 <memcpy>
 8000ccc:	2332      	movs	r3, #50	; 0x32
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <main+0x188>)
 8000cd0:	4915      	ldr	r1, [pc, #84]	; (8000d28 <main+0x15c>)
 8000cd2:	4821      	ldr	r0, [pc, #132]	; (8000d58 <main+0x18c>)
 8000cd4:	f7ff fdc6 	bl	8000864 <FlyWheel_Init>
  //FlyWheel_StartPWM(&FlyWheel_2);
  //FlyWheel_StartPWM(&FlyWheel_3);
  //FlyWheel_StartPWM(&FlyWheel_4);

  //RW_Driver_Type* RW_Driver, FlyWheel_Type* FlyWheel0, FlyWheel_Type* FlyWheel1, FlyWheel_Type* FlyWheel2, FlyWheel_Type * FlyWheel3);
  RW_Driver_Init(&RW_Driver_0, &FlyWheel_1, &FlyWheel_2, &FlyWheel_3, &FlyWheel_4);
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <main+0x18c>)
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <main+0x180>)
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <main+0x174>)
 8000ce0:	4914      	ldr	r1, [pc, #80]	; (8000d34 <main+0x168>)
 8000ce2:	481e      	ldr	r0, [pc, #120]	; (8000d5c <main+0x190>)
 8000ce4:	f7ff fbec 	bl	80004c0 <RW_Driver_Init>


  HAL_CAN_Start(&hcan2);
 8000ce8:	481d      	ldr	r0, [pc, #116]	; (8000d60 <main+0x194>)
 8000cea:	f001 f9bb 	bl	8002064 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cee:	2102      	movs	r1, #2
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <main+0x194>)
 8000cf2:	f001 fbe8 	bl	80024c6 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <main+0x198>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <main+0x198>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <main+0x198>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x123;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <main+0x198>)
 8000d0a:	f240 1223 	movw	r2, #291	; 0x123
 8000d0e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <main+0x144>
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	20000340 	.word	0x20000340
 8000d1c:	40020c00 	.word	0x40020c00
 8000d20:	20000158 	.word	0x20000158
 8000d24:	20000360 	.word	0x20000360
 8000d28:	20000378 	.word	0x20000378
 8000d2c:	20000244 	.word	0x20000244
 8000d30:	40010000 	.word	0x40010000
 8000d34:	200001b8 	.word	0x200001b8
 8000d38:	200000fc 	.word	0x200000fc
 8000d3c:	40000800 	.word	0x40000800
 8000d40:	200002e4 	.word	0x200002e4
 8000d44:	200000b4 	.word	0x200000b4
 8000d48:	40010400 	.word	0x40010400
 8000d4c:	2000005c 	.word	0x2000005c
 8000d50:	20000170 	.word	0x20000170
 8000d54:	40000400 	.word	0x40000400
 8000d58:	2000028c 	.word	0x2000028c
 8000d5c:	20000144 	.word	0x20000144
 8000d60:	20000214 	.word	0x20000214
 8000d64:	20000044 	.word	0x20000044

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	; 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	; 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fc68 	bl	800464c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <SystemClock_Config+0xb4>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <SystemClock_Config+0xb4>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <SystemClock_Config+0xb4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <SystemClock_Config+0xb8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <SystemClock_Config+0xb8>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <SystemClock_Config+0xb8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 f8a9 	bl	8002f30 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000de4:	f000 fc9a 	bl	800171c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fb0c 	bl	8003420 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e0e:	f000 fc85 	bl	800171c <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e2c:	4a26      	ldr	r2, [pc, #152]	; (8000ec8 <MX_CAN2_Init+0xa4>)
 8000e2e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e44:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000e48:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e50:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e76:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000e78:	f000 ff18 	bl	8001cac <HAL_CAN_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000e82:	f000 fc4b 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 14;
 8000e8a:	230e      	movs	r3, #14
 8000e8c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterIdHigh = 0x456 << 5;
 8000e92:	f648 23c0 	movw	r3, #35520	; 0x8ac0
 8000e96:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x456 << 5;
 8000e9c:	f648 23c0 	movw	r3, #35520	; 0x8ac0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
  sFilterConfig.SlaveStartFilterBank= 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <MX_CAN2_Init+0xa0>)
 8000eb8:	f000 fff4 	bl	8001ea4 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000214 	.word	0x20000214
 8000ec8:	40006800 	.word	0x40006800

08000ecc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b096      	sub	sp, #88	; 0x58
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2220      	movs	r2, #32
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fba1 	bl	800464c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f0a:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f0c:	4a4a      	ldr	r2, [pc, #296]	; (8001038 <MX_TIM1_Init+0x16c>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000f10:	4b48      	ldr	r3, [pc, #288]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f12:	220f      	movs	r2, #15
 8000f14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000f1c:	4b45      	ldr	r3, [pc, #276]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f1e:	2263      	movs	r2, #99	; 0x63
 8000f20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b44      	ldr	r3, [pc, #272]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b41      	ldr	r3, [pc, #260]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f34:	483f      	ldr	r0, [pc, #252]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f36:	f002 fc0f 	bl	8003758 <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f40:	f000 fbec 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4838      	ldr	r0, [pc, #224]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f52:	f002 fea3 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f5c:	f000 fbde 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f60:	4834      	ldr	r0, [pc, #208]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f62:	f002 fc48 	bl	80037f6 <HAL_TIM_PWM_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f6c:	f000 fbd6 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	482d      	ldr	r0, [pc, #180]	; (8001034 <MX_TIM1_Init+0x168>)
 8000f80:	f003 fa64 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000f8a:	f000 fbc7 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	; 0x60
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4820      	ldr	r0, [pc, #128]	; (8001034 <MX_TIM1_Init+0x168>)
 8000fb4:	f002 fdb0 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000fbe:	f000 fbad 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481a      	ldr	r0, [pc, #104]	; (8001034 <MX_TIM1_Init+0x168>)
 8000fcc:	f002 fda4 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000fd6:	f000 fba1 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	2208      	movs	r2, #8
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <MX_TIM1_Init+0x168>)
 8000fe4:	f002 fd98 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000fee:	f000 fb95 	bl	800171c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM1_Init+0x168>)
 8001016:	f003 fa95 	bl	8004544 <HAL_TIMEx_ConfigBreakDeadTime>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001020:	f000 fb7c 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM1_Init+0x168>)
 8001026:	f000 fc69 	bl	80018fc <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3758      	adds	r7, #88	; 0x58
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000244 	.word	0x20000244
 8001038:	40010000 	.word	0x40010000

0800103c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	; 0x38
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_TIM3_Init+0x110>)
 800106e:	4a38      	ldr	r2, [pc, #224]	; (8001150 <MX_TIM3_Init+0x114>)
 8001070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <MX_TIM3_Init+0x110>)
 8001074:	220f      	movs	r2, #15
 8001076:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <MX_TIM3_Init+0x110>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800107e:	4b33      	ldr	r3, [pc, #204]	; (800114c <MX_TIM3_Init+0x110>)
 8001080:	2263      	movs	r2, #99	; 0x63
 8001082:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <MX_TIM3_Init+0x110>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <MX_TIM3_Init+0x110>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001090:	482e      	ldr	r0, [pc, #184]	; (800114c <MX_TIM3_Init+0x110>)
 8001092:	f002 fb61 	bl	8003758 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800109c:	f000 fb3e 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4827      	ldr	r0, [pc, #156]	; (800114c <MX_TIM3_Init+0x110>)
 80010ae:	f002 fdf5 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010b8:	f000 fb30 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010bc:	4823      	ldr	r0, [pc, #140]	; (800114c <MX_TIM3_Init+0x110>)
 80010be:	f002 fb9a 	bl	80037f6 <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80010c8:	f000 fb28 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4619      	mov	r1, r3
 80010da:	481c      	ldr	r0, [pc, #112]	; (800114c <MX_TIM3_Init+0x110>)
 80010dc:	f003 f9b6 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80010e6:	f000 fb19 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <MX_TIM3_Init+0x110>)
 8001102:	f002 fd09 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800110c:	f000 fb06 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2204      	movs	r2, #4
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_TIM3_Init+0x110>)
 8001118:	f002 fcfe 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001122:	f000 fafb 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2208      	movs	r2, #8
 800112a:	4619      	mov	r1, r3
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <MX_TIM3_Init+0x110>)
 800112e:	f002 fcf3 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001138:	f000 faf0 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM3_Init+0x110>)
 800113e:	f000 fbdd 	bl	80018fc <HAL_TIM_MspPostInit>

}
 8001142:	bf00      	nop
 8001144:	3738      	adds	r7, #56	; 0x38
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000170 	.word	0x20000170
 8001150:	40000400 	.word	0x40000400

08001154 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <MX_TIM4_Init+0x110>)
 8001186:	4a38      	ldr	r2, [pc, #224]	; (8001268 <MX_TIM4_Init+0x114>)
 8001188:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <MX_TIM4_Init+0x110>)
 800118c:	220f      	movs	r2, #15
 800118e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <MX_TIM4_Init+0x110>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <MX_TIM4_Init+0x110>)
 8001198:	2263      	movs	r2, #99	; 0x63
 800119a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <MX_TIM4_Init+0x110>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <MX_TIM4_Init+0x110>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011a8:	482e      	ldr	r0, [pc, #184]	; (8001264 <MX_TIM4_Init+0x110>)
 80011aa:	f002 fad5 	bl	8003758 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80011b4:	f000 fab2 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4827      	ldr	r0, [pc, #156]	; (8001264 <MX_TIM4_Init+0x110>)
 80011c6:	f002 fd69 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80011d0:	f000 faa4 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d4:	4823      	ldr	r0, [pc, #140]	; (8001264 <MX_TIM4_Init+0x110>)
 80011d6:	f002 fb0e 	bl	80037f6 <HAL_TIM_PWM_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80011e0:	f000 fa9c 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	4619      	mov	r1, r3
 80011f2:	481c      	ldr	r0, [pc, #112]	; (8001264 <MX_TIM4_Init+0x110>)
 80011f4:	f003 f92a 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80011fe:	f000 fa8d 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001202:	2360      	movs	r3, #96	; 0x60
 8001204:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4812      	ldr	r0, [pc, #72]	; (8001264 <MX_TIM4_Init+0x110>)
 800121a:	f002 fc7d 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001224:	f000 fa7a 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2204      	movs	r2, #4
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_TIM4_Init+0x110>)
 8001230:	f002 fc72 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800123a:	f000 fa6f 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2208      	movs	r2, #8
 8001242:	4619      	mov	r1, r3
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM4_Init+0x110>)
 8001246:	f002 fc67 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8001250:	f000 fa64 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM4_Init+0x110>)
 8001256:	f000 fb51 	bl	80018fc <HAL_TIM_MspPostInit>

}
 800125a:	bf00      	nop
 800125c:	3738      	adds	r7, #56	; 0x38
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000fc 	.word	0x200000fc
 8001268:	40000800 	.word	0x40000800

0800126c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	; 0x58
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 f9d1 	bl	800464c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012ac:	4a4a      	ldr	r2, [pc, #296]	; (80013d8 <MX_TIM8_Init+0x16c>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80012b0:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012b2:	220f      	movs	r2, #15
 80012b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012be:	2263      	movs	r2, #99	; 0x63
 80012c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012c8:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012d4:	483f      	ldr	r0, [pc, #252]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012d6:	f002 fa3f 	bl	8003758 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80012e0:	f000 fa1c 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ee:	4619      	mov	r1, r3
 80012f0:	4838      	ldr	r0, [pc, #224]	; (80013d4 <MX_TIM8_Init+0x168>)
 80012f2:	f002 fcd3 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80012fc:	f000 fa0e 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001300:	4834      	ldr	r0, [pc, #208]	; (80013d4 <MX_TIM8_Init+0x168>)
 8001302:	f002 fa78 	bl	80037f6 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800130c:	f000 fa06 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800131c:	4619      	mov	r1, r3
 800131e:	482d      	ldr	r0, [pc, #180]	; (80013d4 <MX_TIM8_Init+0x168>)
 8001320:	f003 f894 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800132a:	f000 f9f7 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	; 0x60
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	4820      	ldr	r0, [pc, #128]	; (80013d4 <MX_TIM8_Init+0x168>)
 8001354:	f002 fbe0 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800135e:	f000 f9dd 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	2204      	movs	r2, #4
 8001368:	4619      	mov	r1, r3
 800136a:	481a      	ldr	r0, [pc, #104]	; (80013d4 <MX_TIM8_Init+0x168>)
 800136c:	f002 fbd4 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001376:	f000 f9d1 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	2208      	movs	r2, #8
 8001380:	4619      	mov	r1, r3
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <MX_TIM8_Init+0x168>)
 8001384:	f002 fbc8 	bl	8003b18 <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800138e:	f000 f9c5 	bl	800171c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM8_Init+0x168>)
 80013b6:	f003 f8c5 	bl	8004544 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 80013c0:	f000 f9ac 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM8_Init+0x168>)
 80013c6:	f000 fa99 	bl	80018fc <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3758      	adds	r7, #88	; 0x58
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000b4 	.word	0x200000b4
 80013d8:	40010400 	.word	0x40010400

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <MX_GPIO_Init+0x1b0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a64      	ldr	r2, [pc, #400]	; (800158c <MX_GPIO_Init+0x1b0>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a5d      	ldr	r2, [pc, #372]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a56      	ldr	r2, [pc, #344]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <MX_GPIO_Init+0x1b0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b50      	ldr	r3, [pc, #320]	; (800158c <MX_GPIO_Init+0x1b0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a4f      	ldr	r2, [pc, #316]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b4d      	ldr	r3, [pc, #308]	; (800158c <MX_GPIO_Init+0x1b0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001468:	4849      	ldr	r0, [pc, #292]	; (8001590 <MX_GPIO_Init+0x1b4>)
 800146a:	f001 fd2f 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800146e:	2200      	movs	r2, #0
 8001470:	f640 71f8 	movw	r1, #4088	; 0xff8
 8001474:	4847      	ldr	r0, [pc, #284]	; (8001594 <MX_GPIO_Init+0x1b8>)
 8001476:	f001 fd29 	bl	8002ecc <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800147a:	2370      	movs	r3, #112	; 0x70
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800147e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4840      	ldr	r0, [pc, #256]	; (8001590 <MX_GPIO_Init+0x1b4>)
 8001490:	f001 fb80 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001494:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4838      	ldr	r0, [pc, #224]	; (8001590 <MX_GPIO_Init+0x1b4>)
 80014ae:	f001 fb71 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB14 PB15
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80014b2:	f44f 4365 	mov.w	r3, #58624	; 0xe500
 80014b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4833      	ldr	r0, [pc, #204]	; (8001598 <MX_GPIO_Init+0x1bc>)
 80014ca:	f001 fb63 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014ce:	f640 73f8 	movw	r3, #4088	; 0xff8
 80014d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	482b      	ldr	r0, [pc, #172]	; (8001594 <MX_GPIO_Init+0x1b8>)
 80014e8:	f001 fb54 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014f2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4826      	ldr	r0, [pc, #152]	; (800159c <MX_GPIO_Init+0x1c0>)
 8001504:	f001 fb46 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001508:	2307      	movs	r3, #7
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800150c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001512:	2302      	movs	r3, #2
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	481d      	ldr	r0, [pc, #116]	; (8001594 <MX_GPIO_Init+0x1b8>)
 800151e:	f001 fb39 	bl	8002b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2006      	movs	r0, #6
 8001528:	f001 fafd 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800152c:	2006      	movs	r0, #6
 800152e:	f001 fb16 	bl	8002b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2007      	movs	r0, #7
 8001538:	f001 faf5 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800153c:	2007      	movs	r0, #7
 800153e:	f001 fb0e 	bl	8002b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2008      	movs	r0, #8
 8001548:	f001 faed 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800154c:	2008      	movs	r0, #8
 800154e:	f001 fb06 	bl	8002b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	200a      	movs	r0, #10
 8001558:	f001 fae5 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800155c:	200a      	movs	r0, #10
 800155e:	f001 fafe 	bl	8002b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2017      	movs	r0, #23
 8001568:	f001 fadd 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800156c:	2017      	movs	r0, #23
 800156e:	f001 faf6 	bl	8002b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2028      	movs	r0, #40	; 0x28
 8001578:	f001 fad5 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800157c:	2028      	movs	r0, #40	; 0x28
 800157e:	f001 faee 	bl	8002b5e <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800

080015a0 <HAL_GPIO_EXTI_Callback>:
 * @brief Interrupt generated by the GPIO
 * @param GPIO_Pin Pin that calls the interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==GPIO_PIN_0 || GPIO_Pin==GPIO_PIN_1 || GPIO_Pin==GPIO_PIN_2){
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_EXTI_Callback+0x1c>
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d002      	beq.n	80015bc <HAL_GPIO_EXTI_Callback+0x1c>
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d10c      	bne.n	80015d6 <HAL_GPIO_EXTI_Callback+0x36>
	  phase= (GPIOD->IDR) & 0x7;
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	4a2f      	ldr	r2, [pc, #188]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015c6:	6013      	str	r3, [r2, #0]
	  FlyWheel_MoveMotor(&FlyWheel_1, phase);
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	482e      	ldr	r0, [pc, #184]	; (8001688 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015d0:	f7ff f9a4 	bl	800091c <FlyWheel_MoveMotor>
 80015d4:	e050      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0xd8>
	 // move_motor1(phase);
  }
  else if (GPIO_Pin==GPIO_PIN_4 || GPIO_Pin==GPIO_PIN_5 || GPIO_Pin==GPIO_PIN_6){
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d005      	beq.n	80015e8 <HAL_GPIO_EXTI_Callback+0x48>
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d002      	beq.n	80015e8 <HAL_GPIO_EXTI_Callback+0x48>
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	2b40      	cmp	r3, #64	; 0x40
 80015e6:	d10d      	bne.n	8001604 <HAL_GPIO_EXTI_Callback+0x64>
	  phase= ((GPIOE->IDR) & 0x70)>>4;
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_GPIO_EXTI_Callback+0xec>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	4a24      	ldr	r2, [pc, #144]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015f4:	6013      	str	r3, [r2, #0]
	  FlyWheel_MoveMotor(&FlyWheel_2, phase);
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4824      	ldr	r0, [pc, #144]	; (8001690 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015fe:	f7ff f98d 	bl	800091c <FlyWheel_MoveMotor>
 8001602:	e039      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0xd8>
	 // move_motor2(phase);
  }
  else if (GPIO_Pin==GPIO_PIN_8 || GPIO_Pin==GPIO_PIN_9 || GPIO_Pin==GPIO_PIN_10){
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800160a:	d007      	beq.n	800161c <HAL_GPIO_EXTI_Callback+0x7c>
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001612:	d003      	beq.n	800161c <HAL_GPIO_EXTI_Callback+0x7c>
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161a:	d113      	bne.n	8001644 <HAL_GPIO_EXTI_Callback+0xa4>
	  phase= (((GPIOB->IDR) & 0x500)|((GPIOC->IDR) & 0x200))>>8;
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_GPIO_EXTI_Callback+0xf4>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	f403 62a0 	and.w	r2, r3, #1280	; 0x500
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800162c:	4313      	orrs	r3, r2
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	461a      	mov	r2, r3
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001634:	601a      	str	r2, [r3, #0]
	  FlyWheel_MoveMotor(&FlyWheel_3, phase);
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <HAL_GPIO_EXTI_Callback+0xfc>)
 800163e:	f7ff f96d 	bl	800091c <FlyWheel_MoveMotor>
 8001642:	e019      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0xd8>
	//  move_motor3(phase);
  }
  else if (GPIO_Pin==GPIO_PIN_13 || GPIO_Pin==GPIO_PIN_14 || GPIO_Pin==GPIO_PIN_15){
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164a:	d007      	beq.n	800165c <HAL_GPIO_EXTI_Callback+0xbc>
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001652:	d003      	beq.n	800165c <HAL_GPIO_EXTI_Callback+0xbc>
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800165a:	d10d      	bne.n	8001678 <HAL_GPIO_EXTI_Callback+0xd8>
	  phase= ((GPIOB->IDR) & 0xE000)>>13;;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_GPIO_EXTI_Callback+0xf4>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	0b5b      	lsrs	r3, r3, #13
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001668:	6013      	str	r3, [r2, #0]
	  FlyWheel_MoveMotor(&FlyWheel_4, phase);
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_GPIO_EXTI_Callback+0xe4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4619      	mov	r1, r3
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001672:	f7ff f953 	bl	800091c <FlyWheel_MoveMotor>
	 // move_motor4(phase);
  }
}
 8001676:	e7ff      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0xd8>
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020c00 	.word	0x40020c00
 8001684:	20000210 	.word	0x20000210
 8001688:	200001b8 	.word	0x200001b8
 800168c:	40021000 	.word	0x40021000
 8001690:	200002e4 	.word	0x200002e4
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	2000005c 	.word	0x2000005c
 80016a0:	2000028c 	.word	0x2000028c

080016a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief Interrupt generated by CAN_RX
 * @param hcan CAN Port that calls the interrupt
 * @retval None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	int R_W;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fdf5 	bl	80022a2 <HAL_CAN_GetRxMessage>

	R_W=(RxData[0]) & 0x1;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
	if (R_W){
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d012      	beq.n	80016ee <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		// Obtener Trama de CAN según lo que se vaya a enviar
		TxData[0]= RxData[0];
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80016ce:	701a      	strb	r2, [r3, #0]
		TxData[1]= RW_Driver_ReadSolicitude(&RW_Driver_0, RxData);
 80016d0:	490b      	ldr	r1, [pc, #44]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80016d4:	f7fe ff10 	bl	80004f8 <RW_Driver_ReadSolicitude>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80016de:	705a      	strb	r2, [r3, #1]
		HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80016e4:	490b      	ldr	r1, [pc, #44]	; (8001714 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80016e8:	f000 fd00 	bl	80020ec <HAL_CAN_AddTxMessage>
	}
	else{
		RW_Driver_WriteSolicitude(&RW_Driver_0, RxData);
	}

}
 80016ec:	e003      	b.n	80016f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		RW_Driver_WriteSolicitude(&RW_Driver_0, RxData);
 80016ee:	4904      	ldr	r1, [pc, #16]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80016f2:	f7fe ff4d 	bl	8000590 <RW_Driver_WriteSolicitude>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000358 	.word	0x20000358
 8001704:	20000028 	.word	0x20000028
 8001708:	2000023c 	.word	0x2000023c
 800170c:	20000144 	.word	0x20000144
 8001710:	2000033c 	.word	0x2000033c
 8001714:	20000044 	.word	0x20000044
 8001718:	20000214 	.word	0x20000214

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_MspInit+0x4c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x4c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a24      	ldr	r2, [pc, #144]	; (8001828 <HAL_CAN_MspInit+0xb0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d142      	bne.n	8001820 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a22      	ldr	r2, [pc, #136]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_CAN_MspInit+0xb4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80017ee:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001800:	2309      	movs	r3, #9
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <HAL_CAN_MspInit+0xb8>)
 800180c:	f001 f9c2 	bl	8002b94 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2040      	movs	r0, #64	; 0x40
 8001816:	f001 f986 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800181a:	2040      	movs	r0, #64	; 0x40
 800181c:	f001 f99f 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40006800 	.word	0x40006800
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <HAL_TIM_Base_MspInit+0xb4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10e      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001862:	e03a      	b.n	80018da <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <HAL_TIM_Base_MspInit+0xbc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10e      	bne.n	800188c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
}
 800188a:	e026      	b.n	80018da <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <HAL_TIM_Base_MspInit+0xc0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10e      	bne.n	80018b4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	e012      	b.n	80018da <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_TIM_Base_MspInit+0xc4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10d      	bne.n	80018da <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_TIM_Base_MspInit+0xb8>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40010000 	.word	0x40010000
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40000400 	.word	0x40000400
 80018f4:	40000800 	.word	0x40000800
 80018f8:	40010400 	.word	0x40010400

080018fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <HAL_TIM_MspPostInit+0x144>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11f      	bne.n	800195e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800193a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800194c:	2301      	movs	r3, #1
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	483c      	ldr	r0, [pc, #240]	; (8001a48 <HAL_TIM_MspPostInit+0x14c>)
 8001958:	f001 f91c 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800195c:	e06c      	b.n	8001a38 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_TIM_MspPostInit+0x150>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d11e      	bne.n	80019a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a34      	ldr	r2, [pc, #208]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8001984:	2331      	movs	r3, #49	; 0x31
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001994:	2302      	movs	r3, #2
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	482c      	ldr	r0, [pc, #176]	; (8001a50 <HAL_TIM_MspPostInit+0x154>)
 80019a0:	f001 f8f8 	bl	8002b94 <HAL_GPIO_Init>
}
 80019a4:	e048      	b.n	8001a38 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <HAL_TIM_MspPostInit+0x158>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d11f      	bne.n	80019f0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6313      	str	r3, [r2, #48]	; 0x30
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80019cc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019de:	2302      	movs	r3, #2
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	481b      	ldr	r0, [pc, #108]	; (8001a58 <HAL_TIM_MspPostInit+0x15c>)
 80019ea:	f001 f8d3 	bl	8002b94 <HAL_GPIO_Init>
}
 80019ee:	e023      	b.n	8001a38 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_TIM_MspPostInit+0x160>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d11e      	bne.n	8001a38 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_TIM_MspPostInit+0x148>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a16:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	480b      	ldr	r0, [pc, #44]	; (8001a60 <HAL_TIM_MspPostInit+0x164>)
 8001a34:	f001 f8ae 	bl	8002b94 <HAL_GPIO_Init>
}
 8001a38:	bf00      	nop
 8001a3a:	3730      	adds	r7, #48	; 0x30
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40000800 	.word	0x40000800
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40010400 	.word	0x40010400
 8001a60:	40020800 	.word	0x40020800

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 f8dc 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f001 fa1f 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001aca:	2002      	movs	r0, #2
 8001acc:	f001 fa18 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ad8:	2004      	movs	r0, #4
 8001ada:	f001 fa11 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ae6:	2010      	movs	r0, #16
 8001ae8:	f001 fa0a 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001af4:	2020      	movs	r0, #32
 8001af6:	f001 fa03 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001afa:	2040      	movs	r0, #64	; 0x40
 8001afc:	f001 fa00 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b04:	f001 f9fc 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b0c:	f001 f9f8 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b1c:	f001 f9f0 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b24:	f001 f9ec 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b2c:	f001 f9e8 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b34:	f001 f9e4 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <CAN2_RX0_IRQHandler+0x10>)
 8001b42:	f000 fce6 	bl	8002512 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000214 	.word	0x20000214

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <SystemInit+0x20>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <SystemInit+0x20>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7a:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b90:	4c0b      	ldr	r4, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b9e:	f7ff ffd7 	bl	8001b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f002 fd21 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff f811 	bl	8000bcc <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bb8:	08004694 	.word	0x08004694
  ldr r2, =_sbss
 8001bbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bc0:	20000394 	.word	0x20000394

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <HAL_Init+0x40>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_Init+0x40>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_Init+0x40>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 ff8d 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fd94 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 ffa5 	bl	8002b7a <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 ff6d 	bl	8002b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000390 	.word	0x20000390

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000390 	.word	0x20000390

08001cac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0ed      	b.n	8001e9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fd54 	bl	8001778 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce0:	f7ff ffd8 	bl	8001c94 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ce6:	e012      	b.n	8001d0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce8:	f7ff ffd4 	bl	8001c94 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	d90b      	bls.n	8001d0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2205      	movs	r2, #5
 8001d06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0c5      	b.n	8001e9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0e5      	beq.n	8001ce8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0202 	bic.w	r2, r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2c:	f7ff ffb2 	bl	8001c94 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d32:	e012      	b.n	8001d5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d34:	f7ff ffae 	bl	8001c94 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b0a      	cmp	r3, #10
 8001d40:	d90b      	bls.n	8001d5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e09f      	b.n	8001e9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e5      	bne.n	8001d34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e1b      	ldrb	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d108      	bne.n	8001d82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e007      	b.n	8001d92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7e5b      	ldrb	r3, [r3, #25]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e007      	b.n	8001dbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e9b      	ldrb	r3, [r3, #26]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d108      	bne.n	8001dd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0220 	bic.w	r2, r2, #32
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7edb      	ldrb	r3, [r3, #27]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d108      	bne.n	8001e00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0210 	bic.w	r2, r2, #16
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e007      	b.n	8001e10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7f1b      	ldrb	r3, [r3, #28]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d108      	bne.n	8001e2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0208 	orr.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e007      	b.n	8001e3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0208 	bic.w	r2, r2, #8
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7f5b      	ldrb	r3, [r3, #29]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d108      	bne.n	8001e54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0204 	orr.w	r2, r2, #4
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e007      	b.n	8001e64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	ea42 0103 	orr.w	r1, r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d003      	beq.n	8001eca <HAL_CAN_ConfigFilter+0x26>
 8001ec2:	7cfb      	ldrb	r3, [r7, #19]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	f040 80be 	bne.w	8002046 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_CAN_ConfigFilter+0x1bc>)
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ee4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	431a      	orrs	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d123      	bne.n	8001f74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3248      	adds	r2, #72	; 0x48
 8001f54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f6a:	6979      	ldr	r1, [r7, #20]
 8001f6c:	3348      	adds	r3, #72	; 0x48
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d122      	bne.n	8001fc2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3248      	adds	r2, #72	; 0x48
 8001fa2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	3348      	adds	r3, #72	; 0x48
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fdc:	e007      	b.n	8001fee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	401a      	ands	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002008:	e007      	b.n	800201a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	431a      	orrs	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d107      	bne.n	8002032 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	431a      	orrs	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002038:	f023 0201 	bic.w	r2, r3, #1
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e006      	b.n	8002054 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40006400 	.word	0x40006400

08002064 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d12e      	bne.n	80020d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002090:	f7ff fe00 	bl	8001c94 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002096:	e012      	b.n	80020be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002098:	f7ff fdfc 	bl	8001c94 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d90b      	bls.n	80020be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2205      	movs	r2, #5
 80020b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e012      	b.n	80020e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e5      	bne.n	8002098 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e006      	b.n	80020e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002100:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d003      	beq.n	8002118 <HAL_CAN_AddTxMessage+0x2c>
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	2b02      	cmp	r3, #2
 8002114:	f040 80b8 	bne.w	8002288 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80a0 	beq.w	8002278 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	0e1b      	lsrs	r3, r3, #24
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d907      	bls.n	8002158 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e09e      	b.n	8002296 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002158:	2201      	movs	r2, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	409a      	lsls	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	6809      	ldr	r1, [r1, #0]
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3318      	adds	r3, #24
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	440b      	add	r3, r1
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e00f      	b.n	80021a6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002190:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800219a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3318      	adds	r3, #24
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	440b      	add	r3, r1
 80021a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3318      	adds	r3, #24
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	440b      	add	r3, r1
 80021b6:	3304      	adds	r3, #4
 80021b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	7d1b      	ldrb	r3, [r3, #20]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d111      	bne.n	80021e6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3318      	adds	r3, #24
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6811      	ldr	r1, [r2, #0]
 80021d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3318      	adds	r3, #24
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	440b      	add	r3, r1
 80021e2:	3304      	adds	r3, #4
 80021e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3307      	adds	r3, #7
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	061a      	lsls	r2, r3, #24
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3306      	adds	r3, #6
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3305      	adds	r3, #5
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4313      	orrs	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	3204      	adds	r2, #4
 8002206:	7812      	ldrb	r2, [r2, #0]
 8002208:	4610      	mov	r0, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	6811      	ldr	r1, [r2, #0]
 800220e:	ea43 0200 	orr.w	r2, r3, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	440b      	add	r3, r1
 8002218:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800221c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3303      	adds	r3, #3
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3302      	adds	r3, #2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	4313      	orrs	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	4610      	mov	r0, r2
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	ea43 0200 	orr.w	r2, r3, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	440b      	add	r3, r1
 800224e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002252:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3318      	adds	r3, #24
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	6811      	ldr	r1, [r2, #0]
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3318      	adds	r3, #24
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	440b      	add	r3, r1
 8002272:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e00e      	b.n	8002296 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e006      	b.n	8002296 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d003      	beq.n	80022c6 <HAL_CAN_GetRxMessage+0x24>
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	f040 80f3 	bne.w	80024ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10e      	bne.n	80022ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0e7      	b.n	80024ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d8      	b.n	80024ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	331b      	adds	r3, #27
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4413      	add	r3, r2
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0204 	and.w	r2, r3, #4
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	331b      	adds	r3, #27
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0d5b      	lsrs	r3, r3, #21
 8002336:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e00b      	b.n	8002358 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	331b      	adds	r3, #27
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	08db      	lsrs	r3, r3, #3
 8002350:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	331b      	adds	r3, #27
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0202 	and.w	r2, r3, #2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	331b      	adds	r3, #27
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 020f 	and.w	r2, r3, #15
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	331b      	adds	r3, #27
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	3304      	adds	r3, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b2da      	uxtb	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	331b      	adds	r3, #27
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0a1a      	lsrs	r2, r3, #8
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0c1a      	lsrs	r2, r3, #16
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3302      	adds	r3, #2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e1a      	lsrs	r2, r3, #24
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	3303      	adds	r3, #3
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3304      	adds	r3, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0a1a      	lsrs	r2, r3, #8
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3305      	adds	r3, #5
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0c1a      	lsrs	r2, r3, #16
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3306      	adds	r3, #6
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e1a      	lsrs	r2, r3, #24
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3307      	adds	r3, #7
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d108      	bne.n	8002498 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	e007      	b.n	80024a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e006      	b.n	80024ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d002      	beq.n	80024e4 <HAL_CAN_ActivateNotification+0x1e>
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d109      	bne.n	80024f8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6959      	ldr	r1, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e006      	b.n	8002506 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08a      	sub	sp, #40	; 0x28
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d07c      	beq.n	8002652 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d023      	beq.n	80025aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f983 	bl	8002880 <HAL_CAN_TxMailbox0CompleteCallback>
 800257a:	e016      	b.n	80025aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e00c      	b.n	80025aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e002      	b.n	80025aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f989 	bl	80028bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d024      	beq.n	80025fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f963 	bl	8002894 <HAL_CAN_TxMailbox1CompleteCallback>
 80025ce:	e016      	b.n	80025fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	e00c      	b.n	80025fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e002      	b.n	80025fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f969 	bl	80028d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d024      	beq.n	8002652 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002610:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f943 	bl	80028a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002622:	e016      	b.n	8002652 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	e00c      	b.n	8002652 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	e002      	b.n	8002652 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f949 	bl	80028e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2208      	movs	r2, #8
 8002690:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f930 	bl	80028f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fe fff7 	bl	80016a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2210      	movs	r2, #16
 80026d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2208      	movs	r2, #8
 80026f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f912 	bl	8002920 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f8f9 	bl	800290c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2210      	movs	r2, #16
 8002734:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8fc 	bl	8002934 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2208      	movs	r2, #8
 8002756:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f8f5 	bl	8002948 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d07b      	beq.n	8002860 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d072      	beq.n	8002858 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d043      	beq.n	8002858 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d03e      	beq.n	8002858 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027e0:	2b60      	cmp	r3, #96	; 0x60
 80027e2:	d02b      	beq.n	800283c <HAL_CAN_IRQHandler+0x32a>
 80027e4:	2b60      	cmp	r3, #96	; 0x60
 80027e6:	d82e      	bhi.n	8002846 <HAL_CAN_IRQHandler+0x334>
 80027e8:	2b50      	cmp	r3, #80	; 0x50
 80027ea:	d022      	beq.n	8002832 <HAL_CAN_IRQHandler+0x320>
 80027ec:	2b50      	cmp	r3, #80	; 0x50
 80027ee:	d82a      	bhi.n	8002846 <HAL_CAN_IRQHandler+0x334>
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d019      	beq.n	8002828 <HAL_CAN_IRQHandler+0x316>
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d826      	bhi.n	8002846 <HAL_CAN_IRQHandler+0x334>
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d010      	beq.n	800281e <HAL_CAN_IRQHandler+0x30c>
 80027fc:	2b30      	cmp	r3, #48	; 0x30
 80027fe:	d822      	bhi.n	8002846 <HAL_CAN_IRQHandler+0x334>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d002      	beq.n	800280a <HAL_CAN_IRQHandler+0x2f8>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d005      	beq.n	8002814 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002808:	e01d      	b.n	8002846 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002812:	e019      	b.n	8002848 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	f043 0310 	orr.w	r3, r3, #16
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800281c:	e014      	b.n	8002848 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f043 0320 	orr.w	r3, r3, #32
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002826:	e00f      	b.n	8002848 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002830:	e00a      	b.n	8002848 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800283a:	e005      	b.n	8002848 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002844:	e000      	b.n	8002848 <HAL_CAN_IRQHandler+0x336>
            break;
 8002846:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002856:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2204      	movs	r2, #4
 800285e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f872 	bl	800295c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002878:	bf00      	nop
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800299c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4907      	ldr	r1, [pc, #28]	; (8002a0c <__NVIC_EnableIRQ+0x38>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100

08002a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	; (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	; (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
         );
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	; 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002adc:	d301      	bcc.n	8002ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <SysTick_Config+0x40>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aea:	210f      	movs	r1, #15
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f7ff ff8e 	bl	8002a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <SysTick_Config+0x40>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <SysTick_Config+0x40>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff29 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff3e 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff8e 	bl	8002a64 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5d 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff31 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffa2 	bl	8002acc <SysTick_Config>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e16b      	b.n	8002e88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 815a 	bne.w	8002e82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80b4 	beq.w	8002e82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a5f      	ldr	r2, [pc, #380]	; (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <HAL_GPIO_Init+0x310>)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_GPIO_Init+0x314>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02b      	beq.n	8002dba <HAL_GPIO_Init+0x226>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a51      	ldr	r2, [pc, #324]	; (8002eac <HAL_GPIO_Init+0x318>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d025      	beq.n	8002db6 <HAL_GPIO_Init+0x222>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_GPIO_Init+0x31c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <HAL_GPIO_Init+0x21e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	; (8002eb4 <HAL_GPIO_Init+0x320>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_GPIO_Init+0x21a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <HAL_GPIO_Init+0x324>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_Init+0x216>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4d      	ldr	r2, [pc, #308]	; (8002ebc <HAL_GPIO_Init+0x328>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_Init+0x212>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	; (8002ec0 <HAL_GPIO_Init+0x32c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_Init+0x20e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <HAL_GPIO_Init+0x330>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_Init+0x20a>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00e      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002da2:	2306      	movs	r3, #6
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dcc:	4935      	ldr	r1, [pc, #212]	; (8002ea4 <HAL_GPIO_Init+0x310>)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfe:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e04:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	f67f ae90 	bls.w	8002bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40021400 	.word	0x40021400
 8002ec0:	40021800 	.word	0x40021800
 8002ec4:	40021c00 	.word	0x40021c00
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fb3e 	bl	80015a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e264      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d075      	beq.n	800303a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4e:	4ba3      	ldr	r3, [pc, #652]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d00c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4ba0      	ldr	r3, [pc, #640]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d112      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f66:	4b9d      	ldr	r3, [pc, #628]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f72:	d10b      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	4b99      	ldr	r3, [pc, #612]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d05b      	beq.n	8003038 <HAL_RCC_OscConfig+0x108>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d157      	bne.n	8003038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e23f      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d106      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x74>
 8002f96:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a90      	ldr	r2, [pc, #576]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0xb0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x98>
 8002fae:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a8a      	ldr	r2, [pc, #552]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a87      	ldr	r2, [pc, #540]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0xb0>
 8002fc8:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a83      	ldr	r2, [pc, #524]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a80      	ldr	r2, [pc, #512]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fe54 	bl	8001c94 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fe50 	bl	8001c94 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e204      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xc0>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fe40 	bl	8001c94 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe fe3c 	bl	8001c94 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1f0      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	4b6c      	ldr	r3, [pc, #432]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0xe8>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d063      	beq.n	800310e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003046:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003052:	4b62      	ldr	r3, [pc, #392]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305a:	2b08      	cmp	r3, #8
 800305c:	d11c      	bne.n	8003098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d116      	bne.n	8003098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_RCC_OscConfig+0x152>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e1c4      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4b56      	ldr	r3, [pc, #344]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4952      	ldr	r1, [pc, #328]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003096:	e03a      	b.n	800310e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a0:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_RCC_OscConfig+0x2b0>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fdf5 	bl	8001c94 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ae:	f7fe fdf1 	bl	8001c94 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e1a5      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4940      	ldr	r1, [pc, #256]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
 80030e0:	e015      	b.n	800310e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_OscConfig+0x2b0>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fdd4 	bl	8001c94 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fe fdd0 	bl	8001c94 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e184      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d030      	beq.n	800317c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d016      	beq.n	8003150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_RCC_OscConfig+0x2b4>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe fdb4 	bl	8001c94 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003130:	f7fe fdb0 	bl	8001c94 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e164      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x200>
 800314e:	e015      	b.n	800317c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x2b4>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003156:	f7fe fd9d 	bl	8001c94 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315e:	f7fe fd99 	bl	8001c94 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e14d      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a0 	beq.w	80032ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_OscConfig+0x2b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d121      	bne.n	800320a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCC_OscConfig+0x2b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_RCC_OscConfig+0x2b8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fd5f 	bl	8001c94 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e011      	b.n	80031fe <HAL_RCC_OscConfig+0x2ce>
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	42470000 	.word	0x42470000
 80031e4:	42470e80 	.word	0x42470e80
 80031e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ec:	f7fe fd52 	bl	8001c94 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e106      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_RCC_OscConfig+0x4e4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x2f0>
 8003212:	4b81      	ldr	r3, [pc, #516]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a80      	ldr	r2, [pc, #512]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	e01c      	b.n	800325a <HAL_RCC_OscConfig+0x32a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0x312>
 8003228:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a7a      	ldr	r2, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0x32a>
 8003242:	4b75      	ldr	r3, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a74      	ldr	r2, [pc, #464]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a71      	ldr	r2, [pc, #452]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fd17 	bl	8001c94 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe fd13 	bl	8001c94 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0c5      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ee      	beq.n	800326a <HAL_RCC_OscConfig+0x33a>
 800328c:	e014      	b.n	80032b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fd01 	bl	8001c94 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe fcfd 	bl	8001c94 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0af      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d105      	bne.n	80032ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 809b 	beq.w	800340a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d05c      	beq.n	800339a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d141      	bne.n	800336c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCC_OscConfig+0x4ec>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe fcd1 	bl	8001c94 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe fccd 	bl	8001c94 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e081      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	019b      	lsls	r3, r3, #6
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	3b01      	subs	r3, #1
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_OscConfig+0x4ec>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fca6 	bl	8001c94 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe fca2 	bl	8001c94 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e056      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x41c>
 800336a:	e04e      	b.n	800340a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_OscConfig+0x4ec>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe fc8f 	bl	8001c94 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe fc8b 	bl	8001c94 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e03f      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x44a>
 8003398:	e037      	b.n	800340a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e032      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a6:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d028      	beq.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d121      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d11a      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033de:	4293      	cmp	r3, r2
 80033e0:	d111      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40007000 	.word	0x40007000
 8003418:	40023800 	.word	0x40023800
 800341c:	42470060 	.word	0x42470060

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0cc      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d90c      	bls.n	800345c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0b8      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003474:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800348c:	4b53      	ldr	r3, [pc, #332]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a52      	ldr	r2, [pc, #328]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003498:	4b50      	ldr	r3, [pc, #320]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	494d      	ldr	r1, [pc, #308]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d044      	beq.n	8003540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d003      	beq.n	80034de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e067      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4934      	ldr	r1, [pc, #208]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7fe fbc0 	bl	8001c94 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe fbbc 	bl	8001c94 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e04f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d20c      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e032      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4916      	ldr	r1, [pc, #88]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490e      	ldr	r1, [pc, #56]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a6:	f000 f821 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490a      	ldr	r1, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fb20 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08004674 	.word	0x08004674
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035f2:	2100      	movs	r1, #0
 80035f4:	6079      	str	r1, [r7, #4]
 80035f6:	2100      	movs	r1, #0
 80035f8:	60f9      	str	r1, [r7, #12]
 80035fa:	2100      	movs	r1, #0
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035fe:	2100      	movs	r1, #0
 8003600:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003602:	4952      	ldr	r1, [pc, #328]	; (800374c <HAL_RCC_GetSysClockFreq+0x160>)
 8003604:	6889      	ldr	r1, [r1, #8]
 8003606:	f001 010c 	and.w	r1, r1, #12
 800360a:	2908      	cmp	r1, #8
 800360c:	d00d      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x3e>
 800360e:	2908      	cmp	r1, #8
 8003610:	f200 8094 	bhi.w	800373c <HAL_RCC_GetSysClockFreq+0x150>
 8003614:	2900      	cmp	r1, #0
 8003616:	d002      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x32>
 8003618:	2904      	cmp	r1, #4
 800361a:	d003      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x38>
 800361c:	e08e      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCC_GetSysClockFreq+0x164>)
 8003620:	60bb      	str	r3, [r7, #8]
       break;
 8003622:	e08e      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_RCC_GetSysClockFreq+0x168>)
 8003626:	60bb      	str	r3, [r7, #8]
      break;
 8003628:	e08b      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800362a:	4948      	ldr	r1, [pc, #288]	; (800374c <HAL_RCC_GetSysClockFreq+0x160>)
 800362c:	6849      	ldr	r1, [r1, #4]
 800362e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003632:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003634:	4945      	ldr	r1, [pc, #276]	; (800374c <HAL_RCC_GetSysClockFreq+0x160>)
 8003636:	6849      	ldr	r1, [r1, #4]
 8003638:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800363c:	2900      	cmp	r1, #0
 800363e:	d024      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4942      	ldr	r1, [pc, #264]	; (800374c <HAL_RCC_GetSysClockFreq+0x160>)
 8003642:	6849      	ldr	r1, [r1, #4]
 8003644:	0989      	lsrs	r1, r1, #6
 8003646:	4608      	mov	r0, r1
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003650:	f04f 0500 	mov.w	r5, #0
 8003654:	ea00 0204 	and.w	r2, r0, r4
 8003658:	ea01 0305 	and.w	r3, r1, r5
 800365c:	493d      	ldr	r1, [pc, #244]	; (8003754 <HAL_RCC_GetSysClockFreq+0x168>)
 800365e:	fb01 f003 	mul.w	r0, r1, r3
 8003662:	2100      	movs	r1, #0
 8003664:	fb01 f102 	mul.w	r1, r1, r2
 8003668:	1844      	adds	r4, r0, r1
 800366a:	493a      	ldr	r1, [pc, #232]	; (8003754 <HAL_RCC_GetSysClockFreq+0x168>)
 800366c:	fba2 0101 	umull	r0, r1, r2, r1
 8003670:	1863      	adds	r3, r4, r1
 8003672:	4619      	mov	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	461a      	mov	r2, r3
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	f7fc fda4 	bl	80001c8 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e04a      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368a:	4b30      	ldr	r3, [pc, #192]	; (800374c <HAL_RCC_GetSysClockFreq+0x160>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	461a      	mov	r2, r3
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	f240 10ff 	movw	r0, #511	; 0x1ff
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	ea02 0400 	and.w	r4, r2, r0
 80036a2:	ea03 0501 	and.w	r5, r3, r1
 80036a6:	4620      	mov	r0, r4
 80036a8:	4629      	mov	r1, r5
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	014b      	lsls	r3, r1, #5
 80036b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036b8:	0142      	lsls	r2, r0, #5
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	1b00      	subs	r0, r0, r4
 80036c0:	eb61 0105 	sbc.w	r1, r1, r5
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	018b      	lsls	r3, r1, #6
 80036ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036d2:	0182      	lsls	r2, r0, #6
 80036d4:	1a12      	subs	r2, r2, r0
 80036d6:	eb63 0301 	sbc.w	r3, r3, r1
 80036da:	f04f 0000 	mov.w	r0, #0
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	00d9      	lsls	r1, r3, #3
 80036e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036e8:	00d0      	lsls	r0, r2, #3
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	1912      	adds	r2, r2, r4
 80036f0:	eb45 0303 	adc.w	r3, r5, r3
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	0299      	lsls	r1, r3, #10
 80036fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003702:	0290      	lsls	r0, r2, #10
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	f7fc fd58 	bl	80001c8 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_RCC_GetSysClockFreq+0x160>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	60bb      	str	r3, [r7, #8]
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <HAL_RCC_GetSysClockFreq+0x164>)
 800373e:	60bb      	str	r3, [r7, #8]
      break;
 8003740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003742:	68bb      	ldr	r3, [r7, #8]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bdb0      	pop	{r4, r5, r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	00f42400 	.word	0x00f42400
 8003754:	017d7840 	.word	0x017d7840

08003758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e041      	b.n	80037ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f858 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 fb48 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e041      	b.n	800388c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f839 	bl	8003894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 faf9 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_TIM_PWM_Start+0x24>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e022      	b.n	8003912 <HAL_TIM_PWM_Start+0x6a>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d109      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x3e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e015      	b.n	8003912 <HAL_TIM_PWM_Start+0x6a>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d109      	bne.n	8003900 <HAL_TIM_PWM_Start+0x58>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e008      	b.n	8003912 <HAL_TIM_PWM_Start+0x6a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07c      	b.n	8003a14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Start+0x82>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003928:	e013      	b.n	8003952 <HAL_TIM_PWM_Start+0xaa>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start+0x92>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003938:	e00b      	b.n	8003952 <HAL_TIM_PWM_Start+0xaa>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	e003      	b.n	8003952 <HAL_TIM_PWM_Start+0xaa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fd50 	bl	8004400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <HAL_TIM_PWM_Start+0x174>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_PWM_Start+0xcc>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <HAL_TIM_PWM_Start+0x178>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_TIM_PWM_Start+0xd0>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_TIM_PWM_Start+0xd2>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <HAL_TIM_PWM_Start+0x174>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d01d      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_TIM_PWM_Start+0x17c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_TIM_PWM_Start+0x180>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_TIM_PWM_Start+0x184>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <HAL_TIM_PWM_Start+0x178>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_TIM_PWM_Start+0x188>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <HAL_TIM_PWM_Start+0x18c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d010      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	e007      	b.n	8003a12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40010400 	.word	0x40010400
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40001800 	.word	0x40001800

08003a38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	6839      	ldr	r1, [r7, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fcd8 	bl	8004400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_TIM_PWM_Stop+0xd8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_TIM_PWM_Stop+0x2c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2d      	ldr	r2, [pc, #180]	; (8003b14 <HAL_TIM_PWM_Stop+0xdc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_PWM_Stop+0x30>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_TIM_PWM_Stop+0x32>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_TIM_PWM_Stop+0x66>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	f240 4344 	movw	r3, #1092	; 0x444
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_TIM_PWM_Stop+0x66>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <HAL_TIM_PWM_Stop+0x96>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	f240 4344 	movw	r3, #1092	; 0x444
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_TIM_PWM_Stop+0x96>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_PWM_Stop+0xa6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003adc:	e013      	b.n	8003b06 <HAL_TIM_PWM_Stop+0xce>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Stop+0xb6>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aec:	e00b      	b.n	8003b06 <HAL_TIM_PWM_Stop+0xce>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_PWM_Stop+0xc6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003afc:	e003      	b.n	8003b06 <HAL_TIM_PWM_Stop+0xce>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010400 	.word	0x40010400

08003b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e0ae      	b.n	8003c94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	f200 809f 	bhi.w	8003c84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b81 	.word	0x08003b81
 8003b50:	08003c85 	.word	0x08003c85
 8003b54:	08003c85 	.word	0x08003c85
 8003b58:	08003c85 	.word	0x08003c85
 8003b5c:	08003bc1 	.word	0x08003bc1
 8003b60:	08003c85 	.word	0x08003c85
 8003b64:	08003c85 	.word	0x08003c85
 8003b68:	08003c85 	.word	0x08003c85
 8003b6c:	08003c03 	.word	0x08003c03
 8003b70:	08003c85 	.word	0x08003c85
 8003b74:	08003c85 	.word	0x08003c85
 8003b78:	08003c85 	.word	0x08003c85
 8003b7c:	08003c43 	.word	0x08003c43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9f0 	bl	8003f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0204 	bic.w	r2, r2, #4
 8003baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	619a      	str	r2, [r3, #24]
      break;
 8003bbe:	e064      	b.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fa40 	bl	800404c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6999      	ldr	r1, [r3, #24]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	021a      	lsls	r2, r3, #8
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	619a      	str	r2, [r3, #24]
      break;
 8003c00:	e043      	b.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fa95 	bl	8004138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0208 	orr.w	r2, r2, #8
 8003c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0204 	bic.w	r2, r2, #4
 8003c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69d9      	ldr	r1, [r3, #28]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	61da      	str	r2, [r3, #28]
      break;
 8003c40:	e023      	b.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fae9 	bl	8004220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69d9      	ldr	r1, [r3, #28]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	021a      	lsls	r2, r3, #8
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	61da      	str	r2, [r3, #28]
      break;
 8003c82:	e002      	b.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
      break;
 8003c88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0b4      	b.n	8003e22 <HAL_TIM_ConfigClockSource+0x186>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf0:	d03e      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf6:	f200 8087 	bhi.w	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfe:	f000 8086 	beq.w	8003e0e <HAL_TIM_ConfigClockSource+0x172>
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d06:	d87f      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b70      	cmp	r3, #112	; 0x70
 8003d0a:	d01a      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0xa6>
 8003d0c:	2b70      	cmp	r3, #112	; 0x70
 8003d0e:	d87b      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b60      	cmp	r3, #96	; 0x60
 8003d12:	d050      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x11a>
 8003d14:	2b60      	cmp	r3, #96	; 0x60
 8003d16:	d877      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b50      	cmp	r3, #80	; 0x50
 8003d1a:	d03c      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0xfa>
 8003d1c:	2b50      	cmp	r3, #80	; 0x50
 8003d1e:	d873      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d058      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d86f      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b30      	cmp	r3, #48	; 0x30
 8003d2a:	d064      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b30      	cmp	r3, #48	; 0x30
 8003d2e:	d86b      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d060      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d867      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d05c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d05a      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	e062      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f000 fb35 	bl	80043c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	609a      	str	r2, [r3, #8]
      break;
 8003d6e:	e04f      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f000 fb1e 	bl	80043c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d92:	609a      	str	r2, [r3, #8]
      break;
 8003d94:	e03c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 fa92 	bl	80042cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2150      	movs	r1, #80	; 0x50
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 faeb 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003db4:	e02c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f000 fab1 	bl	800432a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2160      	movs	r1, #96	; 0x60
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fadb 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003dd4:	e01c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f000 fa72 	bl	80042cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 facb 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003df4:	e00c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f000 fac2 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0c:	e000      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d00f      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <TIM_Base_SetConfig+0x118>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <TIM_Base_SetConfig+0x11c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <TIM_Base_SetConfig+0x120>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d108      	bne.n	8003e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2f      	ldr	r2, [pc, #188]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d027      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <TIM_Base_SetConfig+0x118>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d023      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <TIM_Base_SetConfig+0x11c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <TIM_Base_SetConfig+0x120>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d017      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <TIM_Base_SetConfig+0x128>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <TIM_Base_SetConfig+0x12c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00f      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <TIM_Base_SetConfig+0x130>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <TIM_Base_SetConfig+0x134>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <TIM_Base_SetConfig+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <TIM_Base_SetConfig+0x13c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0xf8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d103      	bne.n	8003f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	615a      	str	r2, [r3, #20]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800
 8003f60:	40001800 	.word	0x40001800
 8003f64:	40001c00 	.word	0x40001c00
 8003f68:	40002000 	.word	0x40002000

08003f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0201 	bic.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 0302 	bic.w	r3, r3, #2
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a20      	ldr	r2, [pc, #128]	; (8004044 <TIM_OC1_SetConfig+0xd8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC1_SetConfig+0x64>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <TIM_OC1_SetConfig+0xdc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10c      	bne.n	8003fea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0308 	bic.w	r3, r3, #8
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <TIM_OC1_SetConfig+0xd8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_OC1_SetConfig+0x8e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a14      	ldr	r2, [pc, #80]	; (8004048 <TIM_OC1_SetConfig+0xdc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d111      	bne.n	800401e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400

0800404c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0320 	bic.w	r3, r3, #32
 8004096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a22      	ldr	r2, [pc, #136]	; (8004130 <TIM_OC2_SetConfig+0xe4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_OC2_SetConfig+0x68>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a21      	ldr	r2, [pc, #132]	; (8004134 <TIM_OC2_SetConfig+0xe8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10d      	bne.n	80040d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a17      	ldr	r2, [pc, #92]	; (8004130 <TIM_OC2_SetConfig+0xe4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_OC2_SetConfig+0x94>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a16      	ldr	r2, [pc, #88]	; (8004134 <TIM_OC2_SetConfig+0xe8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d113      	bne.n	8004108 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a21      	ldr	r2, [pc, #132]	; (8004218 <TIM_OC3_SetConfig+0xe0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_OC3_SetConfig+0x66>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <TIM_OC3_SetConfig+0xe4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10d      	bne.n	80041ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a16      	ldr	r2, [pc, #88]	; (8004218 <TIM_OC3_SetConfig+0xe0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_OC3_SetConfig+0x92>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a15      	ldr	r2, [pc, #84]	; (800421c <TIM_OC3_SetConfig+0xe4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d113      	bne.n	80041f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40010000 	.word	0x40010000
 800421c:	40010400 	.word	0x40010400

08004220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800426a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	031b      	lsls	r3, r3, #12
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <TIM_OC4_SetConfig+0xa4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_OC4_SetConfig+0x68>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <TIM_OC4_SetConfig+0xa8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d109      	bne.n	800429c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	019b      	lsls	r3, r3, #6
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40010400 	.word	0x40010400

080042cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0201 	bic.w	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 030a 	bic.w	r3, r3, #10
 8004308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432a:	b480      	push	{r7}
 800432c:	b087      	sub	sp, #28
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0210 	bic.w	r2, r3, #16
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	031b      	lsls	r3, r3, #12
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2201      	movs	r2, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1a      	ldr	r2, [r3, #32]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	43db      	mvns	r3, r3
 8004422:	401a      	ands	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e05a      	b.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d022      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d01d      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d018      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00e      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d009      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10c      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40010400 	.word	0x40010400
 800453c:	40014000 	.word	0x40014000
 8004540:	40001800 	.word	0x40001800

08004544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e03d      	b.n	80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4d0d      	ldr	r5, [pc, #52]	; (8004620 <__libc_init_array+0x38>)
 80045ec:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045ee:	1b64      	subs	r4, r4, r5
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	2600      	movs	r6, #0
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	4d0b      	ldr	r5, [pc, #44]	; (8004628 <__libc_init_array+0x40>)
 80045fa:	4c0c      	ldr	r4, [pc, #48]	; (800462c <__libc_init_array+0x44>)
 80045fc:	f000 f82e 	bl	800465c <_init>
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	2600      	movs	r6, #0
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f855 3b04 	ldr.w	r3, [r5], #4
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	0800468c 	.word	0x0800468c
 8004624:	0800468c 	.word	0x0800468c
 8004628:	0800468c 	.word	0x0800468c
 800462c:	08004690 	.word	0x08004690

08004630 <memcpy>:
 8004630:	440a      	add	r2, r1
 8004632:	4291      	cmp	r1, r2
 8004634:	f100 33ff 	add.w	r3, r0, #4294967295
 8004638:	d100      	bne.n	800463c <memcpy+0xc>
 800463a:	4770      	bx	lr
 800463c:	b510      	push	{r4, lr}
 800463e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004646:	4291      	cmp	r1, r2
 8004648:	d1f9      	bne.n	800463e <memcpy+0xe>
 800464a:	bd10      	pop	{r4, pc}

0800464c <memset>:
 800464c:	4402      	add	r2, r0
 800464e:	4603      	mov	r3, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	d100      	bne.n	8004656 <memset+0xa>
 8004654:	4770      	bx	lr
 8004656:	f803 1b01 	strb.w	r1, [r3], #1
 800465a:	e7f9      	b.n	8004650 <memset+0x4>

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
