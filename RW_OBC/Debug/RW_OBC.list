
RW_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005e28  08005e28  00015e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006018  08006018  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006020  08006020  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000314  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  2000038c  2000038c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001021f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc3  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00032288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be0  00000000  00000000  00032f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000348a  00000000  00000000  00033b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4e5  00000000  00000000  00036f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb157  00000000  00000000  00046477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001115ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ab0  00000000  00000000  00111624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e0c 	.word	0x08005e0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08005e0c 	.word	0x08005e0c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <ADCS_RPY2RotationMatrix>:
	q=ADCS_RotationMatrix2Quaternion(&r);
	return q;

}

Rotation_Matrix_Type ADCS_RPY2RotationMatrix(double phi, double theta, double psi){
 8000e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e8c:	b0bc      	sub	sp, #240	; 0xf0
 8000e8e:	af02      	add	r7, sp, #8
 8000e90:	6278      	str	r0, [r7, #36]	; 0x24
 8000e92:	ed87 0b06 	vstr	d0, [r7, #24]
 8000e96:	ed87 1b04 	vstr	d1, [r7, #16]
 8000e9a:	ed87 2b02 	vstr	d2, [r7, #8]

	Rotation_Matrix_Type r;
	double r11,r12,r13,r21,r22,r23,r31,r32,r33;
	double c_phi, c_theta, c_psi, s_phi, s_theta, s_psi;

	c_phi=cos(phi);
 8000e9e:	ed97 0b06 	vldr	d0, [r7, #24]
 8000ea2:	f003 fe45 	bl	8004b30 <cos>
 8000ea6:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	c_theta=cos(theta);
 8000eaa:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eae:	f003 fe3f 	bl	8004b30 <cos>
 8000eb2:	ed87 0b36 	vstr	d0, [r7, #216]	; 0xd8
	c_psi=cos(psi);
 8000eb6:	ed97 0b02 	vldr	d0, [r7, #8]
 8000eba:	f003 fe39 	bl	8004b30 <cos>
 8000ebe:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0

	s_phi=sin(phi);
 8000ec2:	ed97 0b06 	vldr	d0, [r7, #24]
 8000ec6:	f003 fe83 	bl	8004bd0 <sin>
 8000eca:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	s_theta=sin(theta);
 8000ece:	ed97 0b04 	vldr	d0, [r7, #16]
 8000ed2:	f003 fe7d 	bl	8004bd0 <sin>
 8000ed6:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	s_psi=sin(psi);
 8000eda:	ed97 0b02 	vldr	d0, [r7, #8]
 8000ede:	f003 fe77 	bl	8004bd0 <sin>
 8000ee2:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8

	r11=c_phi*c_theta;
 8000ee6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8000eea:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000eee:	f7ff fb27 	bl	8000540 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	r12=-s_phi*c_psi+c_psi*s_theta*s_psi;
 8000efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f12:	f7ff fb15 	bl	8000540 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4690      	mov	r8, r2
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000f22:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8000f26:	f7ff fb0b 	bl	8000540 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8000f36:	f7ff fb03 	bl	8000540 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4640      	mov	r0, r8
 8000f40:	4649      	mov	r1, r9
 8000f42:	f7ff f947 	bl	80001d4 <__adddf3>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	r13=s_phi*s_psi+c_phi*s_theta*c_psi;
 8000f4e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8000f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000f56:	f7ff faf3 	bl	8000540 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4690      	mov	r8, r2
 8000f60:	4699      	mov	r9, r3
 8000f62:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000f66:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000f6a:	f7ff fae9 	bl	8000540 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000f7a:	f7ff fae1 	bl	8000540 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4640      	mov	r0, r8
 8000f84:	4649      	mov	r1, r9
 8000f86:	f7ff f925 	bl	80001d4 <__adddf3>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	r21=s_phi*c_theta;
 8000f92:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8000f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000f9a:	f7ff fad1 	bl	8000540 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	r22=c_phi*c_psi+s_phi*s_theta*s_psi;
 8000fa6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000faa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000fae:	f7ff fac7 	bl	8000540 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	4699      	mov	r9, r3
 8000fba:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000fc2:	f7ff fabd 	bl	8000540 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8000fd2:	f7ff fab5 	bl	8000540 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4640      	mov	r0, r8
 8000fdc:	4649      	mov	r1, r9
 8000fde:	f7ff f8f9 	bl	80001d4 <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	r23=-c_phi*s_psi+s_phi*s_theta*c_psi;
 8000fea:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8000fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ff2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000ff6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff fa9f 	bl	8000540 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4614      	mov	r4, r2
 8001008:	461d      	mov	r5, r3
 800100a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800100e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001012:	f7ff fa95 	bl	8000540 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001022:	f7ff fa8d 	bl	8000540 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f8d1 	bl	80001d4 <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	r31=-s_theta;
 800103a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800103e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001046:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800104a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	r32=c_theta*s_psi;
 800104e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001052:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001056:	f7ff fa73 	bl	8000540 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	r33=c_theta*c_psi;
 8001062:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001066:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800106a:	f7ff fa69 	bl	8000540 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	Rotation_Matrix_Type_Set(&r,r11,r12,r13,r21,r22,r23,r31,r32,r33);
 8001076:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800107a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800107e:	e9cd 2300 	strd	r2, r3, [sp]
 8001082:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001086:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800108a:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 800108e:	ed97 4b24 	vldr	d4, [r7, #144]	; 0x90
 8001092:	ed97 3b26 	vldr	d3, [r7, #152]	; 0x98
 8001096:	ed97 2b28 	vldr	d2, [r7, #160]	; 0xa0
 800109a:	ed97 1b2a 	vldr	d1, [r7, #168]	; 0xa8
 800109e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 80010a2:	4608      	mov	r0, r1
 80010a4:	f000 f91e 	bl	80012e4 <Rotation_Matrix_Type_Set>

	return r;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	4618      	mov	r0, r3
 80010ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b0:	2248      	movs	r2, #72	; 0x48
 80010b2:	4619      	mov	r1, r3
 80010b4:	f003 fd26 	bl	8004b04 <memcpy>

}
 80010b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ba:	37e8      	adds	r7, #232	; 0xe8
 80010bc:	46bd      	mov	sp, r7
 80010be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080010c4 <ADCS_RotationMatrix2Quaternion>:

Quaternion_Type ADCS_RotationMatrix2Quaternion(Rotation_Matrix_Type * r){
 80010c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c8:	b0a2      	sub	sp, #136	; 0x88
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6278      	str	r0, [r7, #36]	; 0x24

	Quaternion_Type q;
	double q0,q1,q2,q3;

	q0=0.5*sqrt(r->r11+r->r22+r->r33+1);
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010da:	f7ff f87b 	bl	80001d4 <__adddf3>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80010ec:	f7ff f872 	bl	80001d4 <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b62      	ldr	r3, [pc, #392]	; (8001288 <ADCS_RotationMatrix2Quaternion+0x1c4>)
 80010fe:	f7ff f869 	bl	80001d4 <__adddf3>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ec43 2b17 	vmov	d7, r2, r3
 800110a:	eeb0 0a47 	vmov.f32	s0, s14
 800110e:	eef0 0a67 	vmov.f32	s1, s15
 8001112:	f003 fdb1 	bl	8004c78 <sqrt>
 8001116:	ec51 0b10 	vmov	r0, r1, d0
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <ADCS_RotationMatrix2Quaternion+0x1c8>)
 8001120:	f7ff fa0e 	bl	8000540 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	//q0=0.5;
	if(q0==0){
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001138:	f7ff fc6a 	bl	8000a10 <__aeabi_dcmpeq>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00f      	beq.n	8001162 <ADCS_RotationMatrix2Quaternion+0x9e>
		q3=-1;
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b52      	ldr	r3, [pc, #328]	; (8001290 <ADCS_RotationMatrix2Quaternion+0x1cc>)
 8001148:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		q2=-1;
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <ADCS_RotationMatrix2Quaternion+0x1cc>)
 8001152:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		q1=-1;
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <ADCS_RotationMatrix2Quaternion+0x1cc>)
 800115c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001160:	e056      	b.n	8001210 <ADCS_RotationMatrix2Quaternion+0x14c>
	}
	else{
	q3=(r->r21-r->r12)/(4*q0);
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800116e:	f7ff f82f 	bl	80001d0 <__aeabi_dsub>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b45      	ldr	r3, [pc, #276]	; (8001294 <ADCS_RotationMatrix2Quaternion+0x1d0>)
 8001180:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001184:	f7ff f9dc 	bl	8000540 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	f7ff fb00 	bl	8000794 <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	q2=(r->r13-r->r31)/(4*q0);
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011a8:	f7ff f812 	bl	80001d0 <__aeabi_dsub>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	461d      	mov	r5, r3
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <ADCS_RotationMatrix2Quaternion+0x1d0>)
 80011ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80011be:	f7ff f9bf 	bl	8000540 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff fae3 	bl	8000794 <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	q1=(r->r23-r->r32)/(4*q0);
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011e2:	f7fe fff5 	bl	80001d0 <__aeabi_dsub>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4614      	mov	r4, r2
 80011ec:	461d      	mov	r5, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <ADCS_RotationMatrix2Quaternion+0x1d0>)
 80011f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80011f8:	f7ff f9a2 	bl	8000540 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4620      	mov	r0, r4
 8001202:	4629      	mov	r1, r5
 8001204:	f7ff fac6 	bl	8000794 <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	}

	Quaternion_Set(&q,q0,q1,q2,q3);
 8001210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001214:	ed97 3b1c 	vldr	d3, [r7, #112]	; 0x70
 8001218:	ed97 2b1e 	vldr	d2, [r7, #120]	; 0x78
 800121c:	ed97 1b20 	vldr	d1, [r7, #128]	; 0x80
 8001220:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f837 	bl	8001298 <Quaternion_Set>

	return q;
 800122a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800122e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001236:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800123a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800123e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001242:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800124a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800124e:	ec49 8b14 	vmov	d4, r8, r9
 8001252:	ec45 4b15 	vmov	d5, r4, r5
 8001256:	ec41 0b16 	vmov	d6, r0, r1
 800125a:	ec43 2b17 	vmov	d7, r2, r3

}
 800125e:	eeb0 0a44 	vmov.f32	s0, s8
 8001262:	eef0 0a64 	vmov.f32	s1, s9
 8001266:	eeb0 1a45 	vmov.f32	s2, s10
 800126a:	eef0 1a65 	vmov.f32	s3, s11
 800126e:	eeb0 2a46 	vmov.f32	s4, s12
 8001272:	eef0 2a66 	vmov.f32	s5, s13
 8001276:	eeb0 3a47 	vmov.f32	s6, s14
 800127a:	eef0 3a67 	vmov.f32	s7, s15
 800127e:	3788      	adds	r7, #136	; 0x88
 8001280:	46bd      	mov	sp, r7
 8001282:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001286:	bf00      	nop
 8001288:	3ff00000 	.word	0x3ff00000
 800128c:	3fe00000 	.word	0x3fe00000
 8001290:	bff00000 	.word	0xbff00000
 8001294:	40100000 	.word	0x40100000

08001298 <Quaternion_Set>:

void Quaternion_Set(Quaternion_Type * q , double q0, double q1, double q2, double q3){
 8001298:	b480      	push	{r7}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af00      	add	r7, sp, #0
 800129e:	6278      	str	r0, [r7, #36]	; 0x24
 80012a0:	ed87 0b06 	vstr	d0, [r7, #24]
 80012a4:	ed87 1b04 	vstr	d1, [r7, #16]
 80012a8:	ed87 2b02 	vstr	d2, [r7, #8]
 80012ac:	ed87 3b00 	vstr	d3, [r7]

	q->q0=q0;
 80012b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012b6:	e9c1 2300 	strd	r2, r3, [r1]
	q->q1=q1;
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	q->q2=q2;
 80012c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
	q->q3=q3;
 80012ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d4:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 80012d8:	bf00      	nop
 80012da:	372c      	adds	r7, #44	; 0x2c
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <Rotation_Matrix_Type_Set>:

void Rotation_Matrix_Type_Set(Rotation_Matrix_Type * r , double r11, double r12, double r13, double r21, double r22, double r23, double r31, double r32, double r33){
 80012e4:	b480      	push	{r7}
 80012e6:	b093      	sub	sp, #76	; 0x4c
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6478      	str	r0, [r7, #68]	; 0x44
 80012ec:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80012f0:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80012f4:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80012f8:	ed87 3b08 	vstr	d3, [r7, #32]
 80012fc:	ed87 4b06 	vstr	d4, [r7, #24]
 8001300:	ed87 5b04 	vstr	d5, [r7, #16]
 8001304:	ed87 6b02 	vstr	d6, [r7, #8]
 8001308:	ed87 7b00 	vstr	d7, [r7]

	r->r11=r11;
 800130c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800130e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001312:	e9c1 2300 	strd	r2, r3, [r1]
	r->r12=r12;
 8001316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800131c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	r->r13=r13;
 8001320:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001326:	e9c1 2304 	strd	r2, r3, [r1, #16]
	r->r21=r21;
 800132a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800132c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001330:	e9c1 2306 	strd	r2, r3, [r1, #24]
	r->r22=r22;
 8001334:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800133a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	r->r23=r23;
 800133e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001344:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	r->r31=r31;
 8001348:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800134a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	r->r32=r32;
 8001352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001358:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	r->r33=r33;
 800135c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800135e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001362:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

}
 8001366:	bf00      	nop
 8001368:	374c      	adds	r7, #76	; 0x4c
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <L3GD20H_Init>:

#include "l3gd20h.h"

double sx[4],sy[4],sz[4];

void L3GD20H_Init(L3GD20H_Type * l3g,I2C_HandleTypeDef hi2c,uint8_t L3GD20H_DR,uint8_t L3GD20H_FR, uint8_t L3GD20H_BW, uint8_t L3GD20H_POWER_MODE,uint8_t L3GD20H_LOWODR){
 8001374:	b084      	sub	sp, #16
 8001376:	b590      	push	{r4, r7, lr}
 8001378:	b097      	sub	sp, #92	; 0x5c
 800137a:	af14      	add	r7, sp, #80	; 0x50
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	f107 001c 	add.w	r0, r7, #28
 8001382:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	l3g->i2c = hi2c;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2254      	movs	r2, #84	; 0x54
 8001390:	4619      	mov	r1, r3
 8001392:	f003 fbb7 	bl	8004b04 <memcpy>
	l3g->ADDRESS = L3GD20H_ADDRESS;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	22d6      	movs	r2, #214	; 0xd6
 800139a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	l3g->LOWODR = L3GD20H_LOWODR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80013a4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	l3g->FR = L3GD20H_FR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80013ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	l3g->BW = L3GD20H_BW;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80013b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	l3g->DR = L3GD20H_DR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80013c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	l3g->POWER_MODE = L3GD20H_POWER_MODE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 80013cc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	l3g->offset[0] = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	671a      	str	r2, [r3, #112]	; 0x70
	l3g->offset[1] = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	675a      	str	r2, [r3, #116]	; 0x74
	l3g->offset[2] = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	679a      	str	r2, [r3, #120]	; 0x78
	l3g->angle[0]=0;
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	l3g->angle[1]=0;
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	l3g->angle[2]=0;
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

	sx[0]=0;
 800140c:	495e      	ldr	r1, [pc, #376]	; (8001588 <L3GD20H_Init+0x214>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c1 2300 	strd	r2, r3, [r1]
	sx[1]=0;
 800141a:	495b      	ldr	r1, [pc, #364]	; (8001588 <L3GD20H_Init+0x214>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sx[2]=0;
 8001428:	4957      	ldr	r1, [pc, #348]	; (8001588 <L3GD20H_Init+0x214>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sx[3]=0;
 8001436:	4954      	ldr	r1, [pc, #336]	; (8001588 <L3GD20H_Init+0x214>)
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e9c1 2306 	strd	r2, r3, [r1, #24]
	sy[0]=0;
 8001444:	4951      	ldr	r1, [pc, #324]	; (800158c <L3GD20H_Init+0x218>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	e9c1 2300 	strd	r2, r3, [r1]
	sy[1]=0;
 8001452:	494e      	ldr	r1, [pc, #312]	; (800158c <L3GD20H_Init+0x218>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sy[2]=0;
 8001460:	494a      	ldr	r1, [pc, #296]	; (800158c <L3GD20H_Init+0x218>)
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sy[3]=0;
 800146e:	4947      	ldr	r1, [pc, #284]	; (800158c <L3GD20H_Init+0x218>)
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c1 2306 	strd	r2, r3, [r1, #24]
	sz[0]=0;
 800147c:	4944      	ldr	r1, [pc, #272]	; (8001590 <L3GD20H_Init+0x21c>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e9c1 2300 	strd	r2, r3, [r1]
	sz[1]=0;
 800148a:	4941      	ldr	r1, [pc, #260]	; (8001590 <L3GD20H_Init+0x21c>)
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sz[2]=0;
 8001498:	493d      	ldr	r1, [pc, #244]	; (8001590 <L3GD20H_Init+0x21c>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sz[3]=0;
 80014a6:	493a      	ldr	r1, [pc, #232]	; (8001590 <L3GD20H_Init+0x21c>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c1 2306 	strd	r2, r3, [r1, #24]


	writereg(l3g->i2c,l3g->ADDRESS , L3GD20H_LOW_ODR , L3GD20H_LOWODR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014ba:	687c      	ldr	r4, [r7, #4]
 80014bc:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80014c0:	9213      	str	r2, [sp, #76]	; 0x4c
 80014c2:	2239      	movs	r2, #57	; 0x39
 80014c4:	9212      	str	r2, [sp, #72]	; 0x48
 80014c6:	9311      	str	r3, [sp, #68]	; 0x44
 80014c8:	4668      	mov	r0, sp
 80014ca:	f104 0310 	add.w	r3, r4, #16
 80014ce:	2244      	movs	r2, #68	; 0x44
 80014d0:	4619      	mov	r1, r3
 80014d2:	f003 fb17 	bl	8004b04 <memcpy>
 80014d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014da:	f000 ff2f 	bl	800233c <writereg>

	writereg(l3g->i2c,l3g->ADDRESS , L3GD20H_CTRL4 , L3GD20H_FR);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014e4:	687c      	ldr	r4, [r7, #4]
 80014e6:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80014ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80014ec:	2223      	movs	r2, #35	; 0x23
 80014ee:	9212      	str	r2, [sp, #72]	; 0x48
 80014f0:	9311      	str	r3, [sp, #68]	; 0x44
 80014f2:	4668      	mov	r0, sp
 80014f4:	f104 0310 	add.w	r3, r4, #16
 80014f8:	2244      	movs	r2, #68	; 0x44
 80014fa:	4619      	mov	r1, r3
 80014fc:	f003 fb02 	bl	8004b04 <memcpy>
 8001500:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001504:	f000 ff1a 	bl	800233c <writereg>

	writereg(l3g->i2c,l3g->ADDRESS , L3GD20H_CTRL1 , L3GD20H_DR | L3GD20H_BW | L3GD20H_POWER_MODE );
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800150e:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 8001512:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8001516:	430a      	orrs	r2, r1
 8001518:	b2d1      	uxtb	r1, r2
 800151a:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 800151e:	430a      	orrs	r2, r1
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	687c      	ldr	r4, [r7, #4]
 8001524:	9213      	str	r2, [sp, #76]	; 0x4c
 8001526:	2220      	movs	r2, #32
 8001528:	9212      	str	r2, [sp, #72]	; 0x48
 800152a:	9311      	str	r3, [sp, #68]	; 0x44
 800152c:	4668      	mov	r0, sp
 800152e:	f104 0310 	add.w	r3, r4, #16
 8001532:	2244      	movs	r2, #68	; 0x44
 8001534:	4619      	mov	r1, r3
 8001536:	f003 fae5 	bl	8004b04 <memcpy>
 800153a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800153e:	f000 fefd 	bl	800233c <writereg>

	if(L3GD20H_FR==L3GD20H_FR_250)
 8001542:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <L3GD20H_Init+0x1e4>
		l3g->gain_fr=250;
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <L3GD20H_Init+0x220>)
 8001552:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		l3g->gain_fr=500;
	else
		l3g->gain_fr=2000;


}
 8001556:	e010      	b.n	800157a <L3GD20H_Init+0x206>
	else if(L3GD20H_FR==L3GD20H_FR_500)
 8001558:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800155c:	2b10      	cmp	r3, #16
 800155e:	d106      	bne.n	800156e <L3GD20H_Init+0x1fa>
		l3g->gain_fr=500;
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <L3GD20H_Init+0x224>)
 8001568:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 800156c:	e005      	b.n	800157a <L3GD20H_Init+0x206>
		l3g->gain_fr=2000;
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <L3GD20H_Init+0x228>)
 8001576:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001584:	b004      	add	sp, #16
 8001586:	4770      	bx	lr
 8001588:	20000098 	.word	0x20000098
 800158c:	200000d8 	.word	0x200000d8
 8001590:	200000b8 	.word	0x200000b8
 8001594:	406f4000 	.word	0x406f4000
 8001598:	407f4000 	.word	0x407f4000
 800159c:	409f4000 	.word	0x409f4000

080015a0 <L3GD20H_Read>:

void L3GD20H_Read(L3GD20H_Type * l3g,float dt){
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b096      	sub	sp, #88	; 0x58
 80015a6:	af14      	add	r7, sp, #80	; 0x50
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	ed87 0a00 	vstr	s0, [r7]

	l3g->gyro_raw[0]=readreg(l3g->i2c,l3g->ADDRESS , L3GD20H_OUT_X_L );
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015b4:	687c      	ldr	r4, [r7, #4]
 80015b6:	2228      	movs	r2, #40	; 0x28
 80015b8:	9212      	str	r2, [sp, #72]	; 0x48
 80015ba:	9311      	str	r3, [sp, #68]	; 0x44
 80015bc:	4668      	mov	r0, sp
 80015be:	f104 0310 	add.w	r3, r4, #16
 80015c2:	2244      	movs	r2, #68	; 0x44
 80015c4:	4619      	mov	r1, r3
 80015c6:	f003 fa9d 	bl	8004b04 <memcpy>
 80015ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015ce:	f000 fed8 	bl	8002382 <readreg>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	l3g->gyro_raw[1]=readreg(l3g->i2c,l3g->ADDRESS , L3GD20H_OUT_X_H );
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015e2:	687c      	ldr	r4, [r7, #4]
 80015e4:	2229      	movs	r2, #41	; 0x29
 80015e6:	9212      	str	r2, [sp, #72]	; 0x48
 80015e8:	9311      	str	r3, [sp, #68]	; 0x44
 80015ea:	4668      	mov	r0, sp
 80015ec:	f104 0310 	add.w	r3, r4, #16
 80015f0:	2244      	movs	r2, #68	; 0x44
 80015f2:	4619      	mov	r1, r3
 80015f4:	f003 fa86 	bl	8004b04 <memcpy>
 80015f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015fc:	f000 fec1 	bl	8002382 <readreg>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	l3g->gyro_raw[2]=readreg(l3g->i2c,l3g->ADDRESS , L3GD20H_OUT_Y_L );
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001610:	687c      	ldr	r4, [r7, #4]
 8001612:	222a      	movs	r2, #42	; 0x2a
 8001614:	9212      	str	r2, [sp, #72]	; 0x48
 8001616:	9311      	str	r3, [sp, #68]	; 0x44
 8001618:	4668      	mov	r0, sp
 800161a:	f104 0310 	add.w	r3, r4, #16
 800161e:	2244      	movs	r2, #68	; 0x44
 8001620:	4619      	mov	r1, r3
 8001622:	f003 fa6f 	bl	8004b04 <memcpy>
 8001626:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800162a:	f000 feaa 	bl	8002382 <readreg>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	l3g->gyro_raw[3]=readreg(l3g->i2c,l3g->ADDRESS , L3GD20H_OUT_Y_H );
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800163e:	687c      	ldr	r4, [r7, #4]
 8001640:	222b      	movs	r2, #43	; 0x2b
 8001642:	9212      	str	r2, [sp, #72]	; 0x48
 8001644:	9311      	str	r3, [sp, #68]	; 0x44
 8001646:	4668      	mov	r0, sp
 8001648:	f104 0310 	add.w	r3, r4, #16
 800164c:	2244      	movs	r2, #68	; 0x44
 800164e:	4619      	mov	r1, r3
 8001650:	f003 fa58 	bl	8004b04 <memcpy>
 8001654:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001658:	f000 fe93 	bl	8002382 <readreg>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	l3g->gyro_raw[4]=readreg(l3g->i2c,l3g->ADDRESS , L3GD20H_OUT_Z_L );
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800166c:	687c      	ldr	r4, [r7, #4]
 800166e:	222c      	movs	r2, #44	; 0x2c
 8001670:	9212      	str	r2, [sp, #72]	; 0x48
 8001672:	9311      	str	r3, [sp, #68]	; 0x44
 8001674:	4668      	mov	r0, sp
 8001676:	f104 0310 	add.w	r3, r4, #16
 800167a:	2244      	movs	r2, #68	; 0x44
 800167c:	4619      	mov	r1, r3
 800167e:	f003 fa41 	bl	8004b04 <memcpy>
 8001682:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001686:	f000 fe7c 	bl	8002382 <readreg>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	l3g->gyro_raw[5]=readreg(l3g->i2c,l3g->ADDRESS , L3GD20H_OUT_Z_H );
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800169a:	687c      	ldr	r4, [r7, #4]
 800169c:	222d      	movs	r2, #45	; 0x2d
 800169e:	9212      	str	r2, [sp, #72]	; 0x48
 80016a0:	9311      	str	r3, [sp, #68]	; 0x44
 80016a2:	4668      	mov	r0, sp
 80016a4:	f104 0310 	add.w	r3, r4, #16
 80016a8:	2244      	movs	r2, #68	; 0x44
 80016aa:	4619      	mov	r1, r3
 80016ac:	f003 fa2a 	bl	8004b04 <memcpy>
 80016b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016b4:	f000 fe65 	bl	8002382 <readreg>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

	l3g->hil_gyro[0]=l3g->gyro_raw[0]+(l3g->gyro_raw[1]<<8)-l3g->offset[0];
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	b29b      	uxth	r3, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	l3g->hil_gyro[1]=l3g->gyro_raw[2]+(l3g->gyro_raw[3]<<8)-l3g->offset[1];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001708:	b29b      	uxth	r3, r3
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	b29b      	uxth	r3, r3
 800170e:	b21a      	sxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	l3g->hil_gyro[2]=l3g->gyro_raw[4]+(l3g->gyro_raw[5]<<8)-l3g->offset[2];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001724:	b29b      	uxth	r3, r3
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b29b      	uxth	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001732:	b29b      	uxth	r3, r3
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	b29b      	uxth	r3, r3
 8001738:	b21a      	sxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	l3g->gyro[0]=l3g->hil_gyro[0]*l3g->gain_fr/32768;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe90 	bl	800046c <__aeabi_i2d>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001752:	f7fe fef5 	bl	8000540 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4ba8      	ldr	r3, [pc, #672]	; (8001a04 <L3GD20H_Read+0x464>)
 8001764:	f7ff f816 	bl	8000794 <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	l3g->gyro[1]=l3g->hil_gyro[1]*l3g->gain_fr/32768;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe77 	bl	800046c <__aeabi_i2d>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001784:	f7fe fedc 	bl	8000540 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b9b      	ldr	r3, [pc, #620]	; (8001a04 <L3GD20H_Read+0x464>)
 8001796:	f7fe fffd 	bl	8000794 <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	l3g->gyro[2]=l3g->hil_gyro[2]*l3g->gain_fr/32768;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fe5e 	bl	800046c <__aeabi_i2d>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80017b6:	f7fe fec3 	bl	8000540 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b8f      	ldr	r3, [pc, #572]	; (8001a04 <L3GD20H_Read+0x464>)
 80017c8:	f7fe ffe4 	bl	8000794 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98


	sx[3]=sx[2];
 80017d6:	4b8c      	ldr	r3, [pc, #560]	; (8001a08 <L3GD20H_Read+0x468>)
 80017d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017dc:	498a      	ldr	r1, [pc, #552]	; (8001a08 <L3GD20H_Read+0x468>)
 80017de:	e9c1 2306 	strd	r2, r3, [r1, #24]
	sy[3]=sy[2];
 80017e2:	4b8a      	ldr	r3, [pc, #552]	; (8001a0c <L3GD20H_Read+0x46c>)
 80017e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017e8:	4988      	ldr	r1, [pc, #544]	; (8001a0c <L3GD20H_Read+0x46c>)
 80017ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
	sz[3]=sz[2];
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <L3GD20H_Read+0x470>)
 80017f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017f4:	4986      	ldr	r1, [pc, #536]	; (8001a10 <L3GD20H_Read+0x470>)
 80017f6:	e9c1 2306 	strd	r2, r3, [r1, #24]

	sx[2]=sx[1];
 80017fa:	4b83      	ldr	r3, [pc, #524]	; (8001a08 <L3GD20H_Read+0x468>)
 80017fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001800:	4981      	ldr	r1, [pc, #516]	; (8001a08 <L3GD20H_Read+0x468>)
 8001802:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sy[2]=sy[1];
 8001806:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <L3GD20H_Read+0x46c>)
 8001808:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800180c:	497f      	ldr	r1, [pc, #508]	; (8001a0c <L3GD20H_Read+0x46c>)
 800180e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sz[2]=sz[1];
 8001812:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <L3GD20H_Read+0x470>)
 8001814:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001818:	497d      	ldr	r1, [pc, #500]	; (8001a10 <L3GD20H_Read+0x470>)
 800181a:	e9c1 2304 	strd	r2, r3, [r1, #16]

	sx[1]=sx[0];
 800181e:	4b7a      	ldr	r3, [pc, #488]	; (8001a08 <L3GD20H_Read+0x468>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	4978      	ldr	r1, [pc, #480]	; (8001a08 <L3GD20H_Read+0x468>)
 8001826:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sy[1]=sy[0];
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <L3GD20H_Read+0x46c>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	4976      	ldr	r1, [pc, #472]	; (8001a0c <L3GD20H_Read+0x46c>)
 8001832:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sz[1]=sz[0];
 8001836:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <L3GD20H_Read+0x470>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	4974      	ldr	r1, [pc, #464]	; (8001a10 <L3GD20H_Read+0x470>)
 800183e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	sx[0]=l3g->gyro[0];
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001848:	496f      	ldr	r1, [pc, #444]	; (8001a08 <L3GD20H_Read+0x468>)
 800184a:	e9c1 2300 	strd	r2, r3, [r1]
	sy[0]=l3g->gyro[1];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001854:	496d      	ldr	r1, [pc, #436]	; (8001a0c <L3GD20H_Read+0x46c>)
 8001856:	e9c1 2300 	strd	r2, r3, [r1]
	sz[0]=l3g->gyro[2];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001860:	496b      	ldr	r1, [pc, #428]	; (8001a10 <L3GD20H_Read+0x470>)
 8001862:	e9c1 2300 	strd	r2, r3, [r1]

	l3g->angle[0]+=(dt/8)*(sx[0]+3*(sx[1]+sx[2])+sx[3]);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 800186c:	edd7 7a00 	vldr	s15, [r7]
 8001870:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001874:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001878:	ee16 0a90 	vmov	r0, s13
 800187c:	f7fe fe08 	bl	8000490 <__aeabi_f2d>
 8001880:	4682      	mov	sl, r0
 8001882:	468b      	mov	fp, r1
 8001884:	4b60      	ldr	r3, [pc, #384]	; (8001a08 <L3GD20H_Read+0x468>)
 8001886:	e9d3 8900 	ldrd	r8, r9, [r3]
 800188a:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <L3GD20H_Read+0x468>)
 800188c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001890:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <L3GD20H_Read+0x468>)
 8001892:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001896:	f7fe fc9d 	bl	80001d4 <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <L3GD20H_Read+0x474>)
 80018a8:	f7fe fe4a 	bl	8000540 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4640      	mov	r0, r8
 80018b2:	4649      	mov	r1, r9
 80018b4:	f7fe fc8e 	bl	80001d4 <__adddf3>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <L3GD20H_Read+0x468>)
 80018c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018c6:	f7fe fc85 	bl	80001d4 <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4650      	mov	r0, sl
 80018d0:	4659      	mov	r1, fp
 80018d2:	f7fe fe35 	bl	8000540 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fc79 	bl	80001d4 <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	l3g->angle[1]+=(dt/8)*(sy[0]+3*(sy[1]+sy[2])+sy[3]);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80018f2:	edd7 7a00 	vldr	s15, [r7]
 80018f6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80018fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018fe:	ee16 0a90 	vmov	r0, s13
 8001902:	f7fe fdc5 	bl	8000490 <__aeabi_f2d>
 8001906:	4682      	mov	sl, r0
 8001908:	468b      	mov	fp, r1
 800190a:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <L3GD20H_Read+0x46c>)
 800190c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001910:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <L3GD20H_Read+0x46c>)
 8001912:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <L3GD20H_Read+0x46c>)
 8001918:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800191c:	f7fe fc5a 	bl	80001d4 <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <L3GD20H_Read+0x474>)
 800192e:	f7fe fe07 	bl	8000540 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4640      	mov	r0, r8
 8001938:	4649      	mov	r1, r9
 800193a:	f7fe fc4b 	bl	80001d4 <__adddf3>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <L3GD20H_Read+0x46c>)
 8001948:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800194c:	f7fe fc42 	bl	80001d4 <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4650      	mov	r0, sl
 8001956:	4659      	mov	r1, fp
 8001958:	f7fe fdf2 	bl	8000540 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7fe fc36 	bl	80001d4 <__adddf3>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	l3g->angle[2]+=(dt/8)*(sz[0]+3*(sz[1]+sz[2])+sz[3]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8001978:	edd7 7a00 	vldr	s15, [r7]
 800197c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001980:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001984:	ee16 0a90 	vmov	r0, s13
 8001988:	f7fe fd82 	bl	8000490 <__aeabi_f2d>
 800198c:	4682      	mov	sl, r0
 800198e:	468b      	mov	fp, r1
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <L3GD20H_Read+0x470>)
 8001992:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <L3GD20H_Read+0x470>)
 8001998:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <L3GD20H_Read+0x470>)
 800199e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019a2:	f7fe fc17 	bl	80001d4 <__adddf3>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <L3GD20H_Read+0x474>)
 80019b4:	f7fe fdc4 	bl	8000540 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	f7fe fc08 	bl	80001d4 <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <L3GD20H_Read+0x470>)
 80019ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019d2:	f7fe fbff 	bl	80001d4 <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4650      	mov	r0, sl
 80019dc:	4659      	mov	r1, fp
 80019de:	f7fe fdaf 	bl	8000540 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe fbf3 	bl	80001d4 <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

	//l3g->angle[0]+=sx[0]*dt;
	//l3g->angle[1]+=sy[0]*dt;
	//l3g->angle[2]+=sz[0]*dt;

}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a02:	bf00      	nop
 8001a04:	40e00000 	.word	0x40e00000
 8001a08:	20000098 	.word	0x20000098
 8001a0c:	200000d8 	.word	0x200000d8
 8001a10:	200000b8 	.word	0x200000b8
 8001a14:	40080000 	.word	0x40080000

08001a18 <L3GD20H_Calibration>:

void L3GD20H_Calibration(L3GD20H_Type * l3g , TIM_HandleTypeDef htim1){
 8001a18:	b084      	sub	sp, #16
 8001a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1e:	b09b      	sub	sp, #108	; 0x6c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001a28:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t i=0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	float dt=0;
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	65fb      	str	r3, [r7, #92]	; 0x5c
	short Error[3];		//Error utilizado en el cálculo del PI.
	float P[3];			//Termino proporcional
	double I[3]={0,0,0};			//Termino Integral
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//double Esum=0;		//Acumulador del error en las lecturas
	double error=0;		//Suma de errores de los 3 ejes.
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	float kP=0.05;		//Ganancia proporcional
 8001a68:	4b97      	ldr	r3, [pc, #604]	; (8001cc8 <L3GD20H_Calibration+0x2b0>)
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float kI=1;		//Ganancian Integral
 8001a6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
	//int Econt=0;		//Contador del número de veces que se calcula el error y el PI
	//double PromE=0;		//Error promedio
	int Ecount=0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	663b      	str	r3, [r7, #96]	; 0x60
	double ErrorMax=40;	//Máximo error permitido
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <L3GD20H_Calibration+0x2b4>)
 8001a7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10);
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f000 fd43 	bl	8002514 <HAL_Delay>
	do{

		dt=__HAL_TIM_GET_COUNTER(&htim1);
 8001a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		dt=dt*0.000001;
 8001aa0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001aa2:	f7fe fcf5 	bl	8000490 <__aeabi_f2d>
 8001aa6:	a386      	add	r3, pc, #536	; (adr r3, 8001cc0 <L3GD20H_Calibration+0x2a8>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fd48 	bl	8000540 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f81a 	bl	8000af0 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	65fb      	str	r3, [r7, #92]	; 0x5c
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
		L3GD20H_Read(l3g,dt);
 8001ac8:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff fd67 	bl	80015a0 <L3GD20H_Read>
		error=fabs(l3g->hil_gyro[0])+fabs(l3g->hil_gyro[1])+fabs(l3g->hil_gyro[2]);		//Se suman las lecturas para obtener un error entre estas
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fcc7 	bl	800046c <__aeabi_i2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4614      	mov	r4, r2
 8001ae4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fcbc 	bl	800046c <__aeabi_i2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4690      	mov	r8, r2
 8001afa:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001afe:	4642      	mov	r2, r8
 8001b00:	464b      	mov	r3, r9
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fb65 	bl	80001d4 <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9c7 2300 	strd	r2, r3, [r7]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fca7 	bl	800046c <__aeabi_i2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4692      	mov	sl, r2
 8001b24:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001b28:	4652      	mov	r2, sl
 8001b2a:	465b      	mov	r3, fp
 8001b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b30:	f7fe fb50 	bl	80001d4 <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		/*
		Esum+=error;																							//Se va acumulando el error obtenido anteriormente.
		Econt++;																								//Se incrementa el contador encargado de ver el número de veces que se realiza el calculo de PI
		PromE=fabs(Esum/Econt);																					//Se calcula el error promedio con el uso de la suma de errores y el contador de las veces que se realiza.
		 */
		for(i=0;i<=2;i++){
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b42:	e086      	b.n	8001c52 <L3GD20H_Calibration+0x23a>
			Error[i]=l3g->hil_gyro[i]; 						//Se calcula el error entre un offset 0 y la aceleración en un eje del giroscopio
 8001b44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b48:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	333c      	adds	r3, #60	; 0x3c
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	440b      	add	r3, r1
 8001b54:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001b58:	0053      	lsls	r3, r2, #1
 8001b5a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001b5e:	4413      	add	r3, r2
 8001b60:	460a      	mov	r2, r1
 8001b62:	f823 2c30 	strh.w	r2, [r3, #-48]
			P[i]=kP*Error[i];								//Se calcula el término proporcional, multiplicando al error por la gananacia kp
 8001b66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001b70:	4413      	add	r3, r2
 8001b72:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b82:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001b90:	4413      	add	r3, r2
 8001b92:	3b3c      	subs	r3, #60	; 0x3c
 8001b94:	edc3 7a00 	vstr	s15, [r3]
			I[i]+=Error[i]*dt*kI;			    			//Se calcula el término integral acumulando la multiplicación del error obtenido por la ganacia ki y por un delay entre lecturas.
 8001b98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b58      	subs	r3, #88	; 0x58
 8001ba6:	ed93 7b00 	vldr	d7, [r3]
 8001baa:	ed87 7b00 	vstr	d7, [r7]
 8001bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001bb8:	4413      	add	r3, r2
 8001bba:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	ee17 0a90 	vmov	r0, s15
 8001bda:	f7fe fc59 	bl	8000490 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	f897 6067 	ldrb.w	r6, [r7, #103]	; 0x67
 8001be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bea:	f7fe faf3 	bl	80001d4 <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	00f1      	lsls	r1, r6, #3
 8001bf4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001bf8:	4401      	add	r1, r0
 8001bfa:	3958      	subs	r1, #88	; 0x58
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]
			l3g->offset[i]=(int)(P[i]+I[i]);				//Se juntan los dos términos, el proporcional (P) y el integral (I).
 8001c00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b3c      	subs	r3, #60	; 0x3c
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc3d 	bl	8000490 <__aeabi_f2d>
 8001c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c20:	4413      	add	r3, r2
 8001c22:	3b58      	subs	r3, #88	; 0x58
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f7fe fad4 	bl	80001d4 <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f897 6067 	ldrb.w	r6, [r7, #103]	; 0x67
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ff32 	bl	8000aa0 <__aeabi_d2iz>
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f106 021c 	add.w	r2, r6, #28
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0;i<=2;i++){
 8001c48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f67f af74 	bls.w	8001b44 <L3GD20H_Calibration+0x12c>

		}

		if(error<ErrorMax){
 8001c5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c60:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c64:	f7fe fede 	bl	8000a24 <__aeabi_dcmplt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <L3GD20H_Calibration+0x25e>
			Ecount++;
 8001c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c70:	3301      	adds	r3, #1
 8001c72:	663b      	str	r3, [r7, #96]	; 0x60
 8001c74:	e001      	b.n	8001c7a <L3GD20H_Calibration+0x262>
		}
		else{
			Ecount=0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	663b      	str	r3, [r7, #96]	; 0x60
		}
		HAL_Delay(10);
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f000 fc4a 	bl	8002514 <HAL_Delay>

	}while(Ecount<15);
 8001c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c82:	2b0e      	cmp	r3, #14
 8001c84:	f77f af03 	ble.w	8001a8e <L3GD20H_Calibration+0x76>

	l3g->angle[0]=0;
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	l3g->angle[1]=0;
 8001c96:	68f9      	ldr	r1, [r7, #12]
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	l3g->angle[2]=0;
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

}
 8001cb2:	bf00      	nop
 8001cb4:	376c      	adds	r7, #108	; 0x6c
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cbc:	b004      	add	sp, #16
 8001cbe:	4770      	bx	lr
 8001cc0:	a0b5ed8d 	.word	0xa0b5ed8d
 8001cc4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cc8:	3d4ccccd 	.word	0x3d4ccccd
 8001ccc:	40440000 	.word	0x40440000

08001cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	b0ad      	sub	sp, #180	; 0xb4
 8001cd4:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd6:	f000 fbab 	bl	8002430 <HAL_Init>

  /* USER CODE BEGIN Init */

  float dt=0;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce0:	f000 f928 	bl	8001f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce4:	f000 fa3c 	bl	8002160 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ce8:	f000 f98c 	bl	8002004 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001cec:	f000 f9b8 	bl	8002060 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  L3GD20H_Init(&gyro,hi2c1, L3GD20H_DR_200 ,L3GD20H_FR_250, L3GD20H_BW_3,L3GD20H_NORMAL,L3GD20H_LOW_ODR_D);
 8001cf0:	4c85      	ldr	r4, [pc, #532]	; (8001f08 <main+0x238>)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9316      	str	r3, [sp, #88]	; 0x58
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	9315      	str	r3, [sp, #84]	; 0x54
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	9314      	str	r3, [sp, #80]	; 0x50
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	9312      	str	r3, [sp, #72]	; 0x48
 8001d06:	4668      	mov	r0, sp
 8001d08:	f104 030c 	add.w	r3, r4, #12
 8001d0c:	2248      	movs	r2, #72	; 0x48
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f002 fef8 	bl	8004b04 <memcpy>
 8001d14:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d18:	487c      	ldr	r0, [pc, #496]	; (8001f0c <main+0x23c>)
 8001d1a:	f7ff fb2b 	bl	8001374 <L3GD20H_Init>
  HAL_TIM_Base_Start(&htim1);
 8001d1e:	487c      	ldr	r0, [pc, #496]	; (8001f10 <main+0x240>)
 8001d20:	f002 fa94 	bl	800424c <HAL_TIM_Base_Start>
  L3GD20H_Calibration(&gyro,htim1);
 8001d24:	4e7a      	ldr	r6, [pc, #488]	; (8001f10 <main+0x240>)
 8001d26:	466d      	mov	r5, sp
 8001d28:	f106 040c 	add.w	r4, r6, #12
 8001d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d40:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d44:	4871      	ldr	r0, [pc, #452]	; (8001f0c <main+0x23c>)
 8001d46:	f7ff fe67 	bl	8001a18 <L3GD20H_Calibration>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001d4a:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <main+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_Delay(10);
 8001d52:	200a      	movs	r0, #10
 8001d54:	f000 fbde 	bl	8002514 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    dt=__HAL_TIM_GET_COUNTER(&htim1);
 8001d58:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <main+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d66:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    dt=dt*0.000001;
 8001d6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d6c:	f7fe fb90 	bl	8000490 <__aeabi_f2d>
 8001d70:	a361      	add	r3, pc, #388	; (adr r3, 8001ef8 <main+0x228>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe fbe3 	bl	8000540 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe feb5 	bl	8000af0 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	64fb      	str	r3, [r7, #76]	; 0x4c
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001d8a:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <main+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
	//  HMC5883L_Init(&magn,hi2c1);
	L3GD20H_Read(&gyro,dt);
 8001d92:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001d96:	485d      	ldr	r0, [pc, #372]	; (8001f0c <main+0x23c>)
 8001d98:	f7ff fc02 	bl	80015a0 <L3GD20H_Read>
	psi=gyro.angle[0]*3.1416/180;
 8001d9c:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <main+0x23c>)
 8001d9e:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8001da2:	a357      	add	r3, pc, #348	; (adr r3, 8001f00 <main+0x230>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fbca 	bl	8000540 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <main+0x244>)
 8001dba:	f7fe fceb 	bl	8000794 <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4955      	ldr	r1, [pc, #340]	; (8001f18 <main+0x248>)
 8001dc4:	e9c1 2300 	strd	r2, r3, [r1]
	theta=gyro.angle[1]*3.1416/180;
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <main+0x23c>)
 8001dca:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8001dce:	a34c      	add	r3, pc, #304	; (adr r3, 8001f00 <main+0x230>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fbb4 	bl	8000540 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <main+0x244>)
 8001de6:	f7fe fcd5 	bl	8000794 <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	494b      	ldr	r1, [pc, #300]	; (8001f1c <main+0x24c>)
 8001df0:	e9c1 2300 	strd	r2, r3, [r1]
	phi=gyro.angle[2]*3.1416/180;
 8001df4:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <main+0x23c>)
 8001df6:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8001dfa:	a341      	add	r3, pc, #260	; (adr r3, 8001f00 <main+0x230>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fb9e 	bl	8000540 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <main+0x244>)
 8001e12:	f7fe fcbf 	bl	8000794 <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4941      	ldr	r1, [pc, #260]	; (8001f20 <main+0x250>)
 8001e1c:	e9c1 2300 	strd	r2, r3, [r1]
	r=ADCS_RPY2RotationMatrix(phi,theta,psi);
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <main+0x250>)
 8001e22:	ed93 7b00 	vldr	d7, [r3]
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <main+0x24c>)
 8001e28:	ed93 6b00 	vldr	d6, [r3]
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <main+0x248>)
 8001e2e:	ed93 5b00 	vldr	d5, [r3]
 8001e32:	4c3c      	ldr	r4, [pc, #240]	; (8001f24 <main+0x254>)
 8001e34:	463b      	mov	r3, r7
 8001e36:	eeb0 2a45 	vmov.f32	s4, s10
 8001e3a:	eef0 2a65 	vmov.f32	s5, s11
 8001e3e:	eeb0 1a46 	vmov.f32	s2, s12
 8001e42:	eef0 1a66 	vmov.f32	s3, s13
 8001e46:	eeb0 0a47 	vmov.f32	s0, s14
 8001e4a:	eef0 0a67 	vmov.f32	s1, s15
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f81a 	bl	8000e88 <ADCS_RPY2RotationMatrix>
 8001e54:	4620      	mov	r0, r4
 8001e56:	463b      	mov	r3, r7
 8001e58:	2248      	movs	r2, #72	; 0x48
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f002 fe52 	bl	8004b04 <memcpy>
	test=sqrt(r.r11+r.r22+r.r33+1);
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <main+0x254>)
 8001e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <main+0x254>)
 8001e68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e6c:	f7fe f9b2 	bl	80001d4 <__adddf3>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <main+0x254>)
 8001e7a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001e7e:	f7fe f9a9 	bl	80001d4 <__adddf3>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <main+0x258>)
 8001e90:	f7fe f9a0 	bl	80001d4 <__adddf3>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	ec43 2b17 	vmov	d7, r2, r3
 8001e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea0:	eef0 0a67 	vmov.f32	s1, s15
 8001ea4:	f002 fee8 	bl	8004c78 <sqrt>
 8001ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8001eac:	eef0 7a60 	vmov.f32	s15, s1
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <main+0x25c>)
 8001eb2:	ed83 7b00 	vstr	d7, [r3]
	q=ADCS_RotationMatrix2Quaternion(&r);
 8001eb6:	481b      	ldr	r0, [pc, #108]	; (8001f24 <main+0x254>)
 8001eb8:	f7ff f904 	bl	80010c4 <ADCS_RotationMatrix2Quaternion>
 8001ebc:	eeb0 4a40 	vmov.f32	s8, s0
 8001ec0:	eef0 4a60 	vmov.f32	s9, s1
 8001ec4:	eeb0 5a41 	vmov.f32	s10, s2
 8001ec8:	eef0 5a61 	vmov.f32	s11, s3
 8001ecc:	eeb0 6a42 	vmov.f32	s12, s4
 8001ed0:	eef0 6a62 	vmov.f32	s13, s5
 8001ed4:	eeb0 7a43 	vmov.f32	s14, s6
 8001ed8:	eef0 7a63 	vmov.f32	s15, s7
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <main+0x260>)
 8001ede:	ed83 4b00 	vstr	d4, [r3]
 8001ee2:	ed83 5b02 	vstr	d5, [r3, #8]
 8001ee6:	ed83 6b04 	vstr	d6, [r3, #16]
 8001eea:	ed83 7b06 	vstr	d7, [r3, #24]
	//HIL_Transmit_Gyro(&gyro);
	HAL_Delay(10);
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f000 fb10 	bl	8002514 <HAL_Delay>
    dt=__HAL_TIM_GET_COUNTER(&htim1);
 8001ef4:	e730      	b.n	8001d58 <main+0x88>
 8001ef6:	bf00      	nop
 8001ef8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001efc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001f00:	2e48e8a7 	.word	0x2e48e8a7
 8001f04:	400921ff 	.word	0x400921ff
 8001f08:	20000100 	.word	0x20000100
 8001f0c:	20000260 	.word	0x20000260
 8001f10:	20000320 	.word	0x20000320
 8001f14:	40668000 	.word	0x40668000
 8001f18:	200000f8 	.word	0x200000f8
 8001f1c:	20000258 	.word	0x20000258
 8001f20:	20000208 	.word	0x20000208
 8001f24:	20000210 	.word	0x20000210
 8001f28:	3ff00000 	.word	0x3ff00000
 8001f2c:	20000318 	.word	0x20000318
 8001f30:	20000368 	.word	0x20000368

08001f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b094      	sub	sp, #80	; 0x50
 8001f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3a:	f107 0320 	add.w	r3, r7, #32
 8001f3e:	2230      	movs	r2, #48	; 0x30
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 fdec 	bl	8004b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <SystemClock_Config+0xc8>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <SystemClock_Config+0xc8>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6413      	str	r3, [r2, #64]	; 0x40
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <SystemClock_Config+0xc8>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <SystemClock_Config+0xcc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <SystemClock_Config+0xcc>)
 8001f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <SystemClock_Config+0xcc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f90:	2302      	movs	r3, #2
 8001f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f94:	2301      	movs	r3, #1
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f98:	2310      	movs	r3, #16
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001fa8:	2350      	movs	r3, #80	; 0x50
 8001faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fb0:	2307      	movs	r3, #7
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb4:	f107 0320 	add.w	r3, r7, #32
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 fce7 	bl	800398c <HAL_RCC_OscConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fc4:	f000 f8e6 	bl	8002194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc8:	230f      	movs	r3, #15
 8001fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 ff49 	bl	8003e7c <HAL_RCC_ClockConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ff0:	f000 f8d0 	bl	8002194 <Error_Handler>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3750      	adds	r7, #80	; 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000

08002004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_I2C1_Init+0x50>)
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <MX_I2C1_Init+0x54>)
 800200c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_I2C1_Init+0x50>)
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_I2C1_Init+0x58>)
 8002012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_I2C1_Init+0x50>)
 8002022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <MX_I2C1_Init+0x50>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_I2C1_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_I2C1_Init+0x50>)
 8002042:	f000 fd0d 	bl	8002a60 <HAL_I2C_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800204c:	f000 f8a2 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000100 	.word	0x20000100
 8002058:	40005400 	.word	0x40005400
 800205c:	000186a0 	.word	0x000186a0

08002060 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b092      	sub	sp, #72	; 0x48
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
 8002080:	615a      	str	r2, [r3, #20]
 8002082:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2220      	movs	r2, #32
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fd48 	bl	8004b20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002090:	4b31      	ldr	r3, [pc, #196]	; (8002158 <MX_TIM1_Init+0xf8>)
 8002092:	4a32      	ldr	r2, [pc, #200]	; (800215c <MX_TIM1_Init+0xfc>)
 8002094:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <MX_TIM1_Init+0xf8>)
 8002098:	224f      	movs	r2, #79	; 0x4f
 800209a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <MX_TIM1_Init+0xf8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <MX_TIM1_Init+0xf8>)
 80020a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <MX_TIM1_Init+0xf8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <MX_TIM1_Init+0xf8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <MX_TIM1_Init+0xf8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80020bc:	4826      	ldr	r0, [pc, #152]	; (8002158 <MX_TIM1_Init+0xf8>)
 80020be:	f002 f92d 	bl	800431c <HAL_TIM_OC_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80020c8:	f000 f864 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d8:	4619      	mov	r1, r3
 80020da:	481f      	ldr	r0, [pc, #124]	; (8002158 <MX_TIM1_Init+0xf8>)
 80020dc:	f002 fc1a 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80020e6:	f000 f855 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f6:	2300      	movs	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	4619      	mov	r1, r3
 800210e:	4812      	ldr	r0, [pc, #72]	; (8002158 <MX_TIM1_Init+0xf8>)
 8002110:	f002 f954 	bl	80043bc <HAL_TIM_OC_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800211a:	f000 f83b 	bl	8002194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002136:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_TIM1_Init+0xf8>)
 8002142:	f002 fc63 	bl	8004a0c <HAL_TIMEx_ConfigBreakDeadTime>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800214c:	f000 f822 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3748      	adds	r7, #72	; 0x48
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000320 	.word	0x20000320
 800215c:	40010000 	.word	0x40010000

08002160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_GPIO_Init+0x30>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <MX_GPIO_Init+0x30>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_GPIO_Init+0x30>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219c:	e7fe      	b.n	800219c <Error_Handler+0x8>
	...

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_MspInit+0x4c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_MspInit+0x4c>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_MspInit+0x4c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_MspInit+0x4c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a08      	ldr	r2, [pc, #32]	; (80021ec <HAL_MspInit+0x4c>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_MspInit+0x4c>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_I2C_MspInit+0x84>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d12b      	bne.n	800226a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_I2C_MspInit+0x88>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002232:	2312      	movs	r3, #18
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800223e:	2304      	movs	r3, #4
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <HAL_I2C_MspInit+0x8c>)
 800224a:	f000 fa6d 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40005400 	.word	0x40005400
 8002278:	40023800 	.word	0x40023800
 800227c:	40020400 	.word	0x40020400

08002280 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <HAL_TIM_OC_MspInit+0x3c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10d      	bne.n	80022ae <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_TIM_OC_MspInit+0x40>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_TIM_OC_MspInit+0x40>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_TIM_OC_MspInit+0x40>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40023800 	.word	0x40023800

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <NMI_Handler+0x4>

080022ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <MemManage_Handler+0x4>

080022d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002310:	f000 f8e0 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}

08002318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <SystemInit+0x20>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <SystemInit+0x20>)
 8002324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <writereg>:
 */


#include "wire.h"

void writereg(I2C_HandleTypeDef hi2c ,uint8_t sensor_address,uint8_t subaddress,uint8_t data){
 800233c:	b084      	sub	sp, #16
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af02      	add	r7, sp, #8
 8002344:	f107 0c10 	add.w	ip, r7, #16
 8002348:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t msg[2];
	msg[0]=subaddress;
 800234c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002350:	713b      	strb	r3, [r7, #4]
	msg[1]=data;
 8002352:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002356:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c,sensor_address & 0XFE,msg,2,10);
 8002358:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800235c:	b29b      	uxth	r3, r3
 800235e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002362:	b299      	uxth	r1, r3
 8002364:	1d3a      	adds	r2, r7, #4
 8002366:	230a      	movs	r3, #10
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2302      	movs	r3, #2
 800236c:	f107 0010 	add.w	r0, r7, #16
 8002370:	f000 fcba 	bl	8002ce8 <HAL_I2C_Master_Transmit>

}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800237e:	b004      	add	sp, #16
 8002380:	4770      	bx	lr

08002382 <readreg>:

uint8_t readreg(I2C_HandleTypeDef hi2c,uint8_t sensor_address,uint8_t subaddress){
 8002382:	b084      	sub	sp, #16
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af02      	add	r7, sp, #8
 800238a:	f107 0c10 	add.w	ip, r7, #16
 800238e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t data;
	HAL_I2C_Master_Transmit(&hi2c,sensor_address & 0XFE ,&subaddress,1, 10);
 8002392:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002396:	b29b      	uxth	r3, r3
 8002398:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800239c:	b299      	uxth	r1, r3
 800239e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80023a2:	230a      	movs	r3, #10
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2301      	movs	r3, #1
 80023a8:	f107 0010 	add.w	r0, r7, #16
 80023ac:	f000 fc9c 	bl	8002ce8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c,sensor_address + 0x01, &data,1, 10);
 80023b0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	b299      	uxth	r1, r3
 80023ba:	1dfa      	adds	r2, r7, #7
 80023bc:	230a      	movs	r3, #10
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	f107 0010 	add.w	r0, r7, #16
 80023c6:	f000 fd8d 	bl	8002ee4 <HAL_I2C_Master_Receive>
	return data;
 80023ca:	79fb      	ldrb	r3, [r7, #7]

}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023d6:	b004      	add	sp, #16
 80023d8:	4770      	bx	lr
	...

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023e2:	490e      	ldr	r1, [pc, #56]	; (800241c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f8:	4c0b      	ldr	r4, [pc, #44]	; (8002428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002406:	f7ff ff87 	bl	8002318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240a:	f002 fb57 	bl	8004abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7ff fc5f 	bl	8001cd0 <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002420:	08006028 	.word	0x08006028
  ldr r2, =_sbss
 8002424:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002428:	2000038c 	.word	0x2000038c

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 f931 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	200f      	movs	r0, #15
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff fe9c 	bl	80021a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f93b 	bl	800270e <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 f911 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000008 	.word	0x20000008
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008
 80024f8:	20000388 	.word	0x20000388

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000388 	.word	0x20000388

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000008 	.word	0x20000008

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff47 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff5c 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffb0 	bl	800267c <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e16b      	b.n	8002a1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	f040 815a 	bne.w	8002a16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d005      	beq.n	800277a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002776:	2b02      	cmp	r3, #2
 8002778:	d130      	bne.n	80027dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0201 	and.w	r2, r3, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d017      	beq.n	8002818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d123      	bne.n	800286c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80b4 	beq.w	8002a16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <HAL_GPIO_Init+0x30c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a5f      	ldr	r2, [pc, #380]	; (8002a34 <HAL_GPIO_Init+0x30c>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_GPIO_Init+0x30c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ca:	4a5b      	ldr	r2, [pc, #364]	; (8002a38 <HAL_GPIO_Init+0x310>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_GPIO_Init+0x314>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x226>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a51      	ldr	r2, [pc, #324]	; (8002a40 <HAL_GPIO_Init+0x318>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x222>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a50      	ldr	r2, [pc, #320]	; (8002a44 <HAL_GPIO_Init+0x31c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x21e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <HAL_GPIO_Init+0x320>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x21a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4e      	ldr	r2, [pc, #312]	; (8002a4c <HAL_GPIO_Init+0x324>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x216>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4d      	ldr	r2, [pc, #308]	; (8002a50 <HAL_GPIO_Init+0x328>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x212>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <HAL_GPIO_Init+0x32c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x20e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4b      	ldr	r2, [pc, #300]	; (8002a58 <HAL_GPIO_Init+0x330>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x20a>
 800292e:	2307      	movs	r3, #7
 8002930:	e00e      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002932:	2308      	movs	r3, #8
 8002934:	e00c      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002936:	2306      	movs	r3, #6
 8002938:	e00a      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800293a:	2305      	movs	r3, #5
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800293e:	2304      	movs	r3, #4
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x228>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x228>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002960:	4935      	ldr	r1, [pc, #212]	; (8002a38 <HAL_GPIO_Init+0x310>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_GPIO_Init+0x334>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002992:	4a32      	ldr	r2, [pc, #200]	; (8002a5c <HAL_GPIO_Init+0x334>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_GPIO_Init+0x334>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <HAL_GPIO_Init+0x334>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_GPIO_Init+0x334>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_GPIO_Init+0x334>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_GPIO_Init+0x334>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <HAL_GPIO_Init+0x334>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f ae90 	bls.w	8002744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40021c00 	.word	0x40021c00
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e12b      	b.n	8002cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fbb2 	bl	80021f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f001 fbae 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a81      	ldr	r2, [pc, #516]	; (8002cd4 <HAL_I2C_Init+0x274>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d807      	bhi.n	8002ae4 <HAL_I2C_Init+0x84>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a80      	ldr	r2, [pc, #512]	; (8002cd8 <HAL_I2C_Init+0x278>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e006      	b.n	8002af2 <HAL_I2C_Init+0x92>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a7d      	ldr	r2, [pc, #500]	; (8002cdc <HAL_I2C_Init+0x27c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0e7      	b.n	8002cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a78      	ldr	r2, [pc, #480]	; (8002ce0 <HAL_I2C_Init+0x280>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a6a      	ldr	r2, [pc, #424]	; (8002cd4 <HAL_I2C_Init+0x274>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d802      	bhi.n	8002b34 <HAL_I2C_Init+0xd4>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	e009      	b.n	8002b48 <HAL_I2C_Init+0xe8>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	4a69      	ldr	r2, [pc, #420]	; (8002ce4 <HAL_I2C_Init+0x284>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	3301      	adds	r3, #1
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	495c      	ldr	r1, [pc, #368]	; (8002cd4 <HAL_I2C_Init+0x274>)
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d819      	bhi.n	8002b9c <HAL_I2C_Init+0x13c>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e59      	subs	r1, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_I2C_Init+0x138>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e59      	subs	r1, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b96:	e051      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	e04f      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_I2C_Init+0x168>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e012      	b.n	8002bee <HAL_I2C_Init+0x18e>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1e58      	subs	r0, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	0099      	lsls	r1, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Init+0x196>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e022      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10e      	bne.n	8002c1c <HAL_I2C_Init+0x1bc>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e58      	subs	r0, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	440b      	add	r3, r1
 8002c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	e00f      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	6809      	ldr	r1, [r1, #0]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6911      	ldr	r1, [r2, #16]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	000186a0 	.word	0x000186a0
 8002cd8:	001e847f 	.word	0x001e847f
 8002cdc:	003d08ff 	.word	0x003d08ff
 8002ce0:	431bde83 	.word	0x431bde83
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7ff fbfe 	bl	80024fc <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	f040 80e0 	bne.w	8002ed0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2319      	movs	r3, #25
 8002d16:	2201      	movs	r2, #1
 8002d18:	4970      	ldr	r1, [pc, #448]	; (8002edc <HAL_I2C_Master_Transmit+0x1f4>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fc58 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0d3      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x50>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e0cc      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d007      	beq.n	8002d5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	; 0x21
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	893a      	ldrh	r2, [r7, #8]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a50      	ldr	r2, [pc, #320]	; (8002ee0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da0:	8979      	ldrh	r1, [r7, #10]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fac2 	bl	8003330 <I2C_MasterRequestWrite>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e08d      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dcc:	e066      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fcd2 	bl	800377c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d11b      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d017      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fcc2 	bl	80037fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d107      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e01a      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d194      	bne.n	8002dce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	00100002 	.word	0x00100002
 8002ee0:	ffff0000 	.word	0xffff0000

08002ee4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	; 0x30
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff fb00 	bl	80024fc <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 820b 	bne.w	8003322 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2319      	movs	r3, #25
 8002f12:	2201      	movs	r2, #1
 8002f14:	497c      	ldr	r1, [pc, #496]	; (8003108 <HAL_I2C_Master_Receive+0x224>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fb5a 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	e1fe      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2C_Master_Receive+0x50>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e1f7      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d007      	beq.n	8002f5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2222      	movs	r2, #34	; 0x22
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2210      	movs	r2, #16
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	893a      	ldrh	r2, [r7, #8]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a5c      	ldr	r2, [pc, #368]	; (800310c <HAL_I2C_Master_Receive+0x228>)
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa46 	bl	8003434 <I2C_MasterRequestRead>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1b8      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e18c      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d11b      	bne.n	8003022 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e16c      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	2b02      	cmp	r3, #2
 8003028:	d11b      	bne.n	8003062 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003038:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	e14c      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003088:	e138      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	2b03      	cmp	r3, #3
 8003090:	f200 80f1 	bhi.w	8003276 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b01      	cmp	r3, #1
 800309a:	d123      	bne.n	80030e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fbed 	bl	8003880 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e139      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e2:	e10b      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d14e      	bne.n	800318a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	4906      	ldr	r1, [pc, #24]	; (8003110 <HAL_I2C_Master_Receive+0x22c>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa6a 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e10e      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
 8003106:	bf00      	nop
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000
 8003110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003188:	e0b8      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2200      	movs	r2, #0
 8003192:	4966      	ldr	r1, [pc, #408]	; (800332c <HAL_I2C_Master_Receive+0x448>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fa1b 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0bf      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	494f      	ldr	r1, [pc, #316]	; (800332c <HAL_I2C_Master_Receive+0x448>)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f9ed 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e091      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003274:	e042      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fb00 	bl	8003880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e04c      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d118      	bne.n	80032fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f aec2 	bne.w	800308a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	00010004 	.word	0x00010004

08003330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	460b      	mov	r3, r1
 800333e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d006      	beq.n	800335a <I2C_MasterRequestWrite+0x2a>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d003      	beq.n	800335a <I2C_MasterRequestWrite+0x2a>
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003358:	d108      	bne.n	800336c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e00b      	b.n	8003384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	2b12      	cmp	r3, #18
 8003372:	d107      	bne.n	8003384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f91d 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033aa:	d103      	bne.n	80033b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e035      	b.n	8003424 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c0:	d108      	bne.n	80033d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d0:	611a      	str	r2, [r3, #16]
 80033d2:	e01b      	b.n	800340c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033d4:	897b      	ldrh	r3, [r7, #10]
 80033d6:	11db      	asrs	r3, r3, #7
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 0306 	and.w	r3, r3, #6
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f063 030f 	orn	r3, r3, #15
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	490e      	ldr	r1, [pc, #56]	; (800342c <I2C_MasterRequestWrite+0xfc>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f943 	bl	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e010      	b.n	8003424 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <I2C_MasterRequestWrite+0x100>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f933 	bl	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	00010008 	.word	0x00010008
 8003430:	00010002 	.word	0x00010002

08003434 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	460b      	mov	r3, r1
 8003442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003458:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d006      	beq.n	800346e <I2C_MasterRequestRead+0x3a>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d003      	beq.n	800346e <I2C_MasterRequestRead+0x3a>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800346c:	d108      	bne.n	8003480 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e00b      	b.n	8003498 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	2b11      	cmp	r3, #17
 8003486:	d107      	bne.n	8003498 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f893 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034be:	d103      	bne.n	80034c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e079      	b.n	80035c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d4:	d108      	bne.n	80034e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	611a      	str	r2, [r3, #16]
 80034e6:	e05f      	b.n	80035a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	11db      	asrs	r3, r3, #7
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0306 	and.w	r3, r3, #6
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f063 030f 	orn	r3, r3, #15
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4930      	ldr	r1, [pc, #192]	; (80035c8 <I2C_MasterRequestRead+0x194>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f8b9 	bl	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e054      	b.n	80035c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4929      	ldr	r1, [pc, #164]	; (80035cc <I2C_MasterRequestRead+0x198>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f8a9 	bl	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e044      	b.n	80035c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f831 	bl	80035d0 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003582:	d103      	bne.n	800358c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e017      	b.n	80035c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003590:	897b      	ldrh	r3, [r7, #10]
 8003592:	11db      	asrs	r3, r3, #7
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 0306 	and.w	r3, r3, #6
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f063 030e 	orn	r3, r3, #14
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4907      	ldr	r1, [pc, #28]	; (80035cc <I2C_MasterRequestRead+0x198>)
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f865 	bl	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	00010008 	.word	0x00010008
 80035cc:	00010002 	.word	0x00010002

080035d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	e025      	b.n	800362e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d021      	beq.n	800362e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fe ff87 	bl	80024fc <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d116      	bne.n	800362e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f043 0220 	orr.w	r2, r3, #32
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e023      	b.n	8003676 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10d      	bne.n	8003654 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	e00c      	b.n	800366e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	429a      	cmp	r2, r3
 8003672:	d0b6      	beq.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368c:	e051      	b.n	8003732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369c:	d123      	bne.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e046      	b.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d021      	beq.n	8003732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fe ff05 	bl	80024fc <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d116      	bne.n	8003732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e020      	b.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10c      	bne.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	43da      	mvns	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4013      	ands	r3, r2
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e00b      	b.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	43da      	mvns	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d18d      	bne.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003788:	e02d      	b.n	80037e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f8ce 	bl	800392c <I2C_IsAcknowledgeFailed>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e02d      	b.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d021      	beq.n	80037e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fe feab 	bl	80024fc <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d116      	bne.n	80037e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e007      	b.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d1ca      	bne.n	800378a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800380a:	e02d      	b.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f88d 	bl	800392c <I2C_IsAcknowledgeFailed>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e02d      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d021      	beq.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003824:	f7fe fe6a 	bl	80024fc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	d302      	bcc.n	800383a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d116      	bne.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e007      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d1ca      	bne.n	800380c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800388c:	e042      	b.n	8003914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d119      	bne.n	80038d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e029      	b.n	8003924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d0:	f7fe fe14 	bl	80024fc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d116      	bne.n	8003914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d1b5      	bne.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003942:	d11b      	bne.n	800397c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800394c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f043 0204 	orr.w	r2, r3, #4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e264      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d075      	beq.n	8003a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039aa:	4ba3      	ldr	r3, [pc, #652]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d00c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4ba0      	ldr	r3, [pc, #640]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d112      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c2:	4b9d      	ldr	r3, [pc, #628]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	4b99      	ldr	r3, [pc, #612]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05b      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d157      	bne.n	8003a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e23f      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCC_OscConfig+0x74>
 80039f2:	4b91      	ldr	r3, [pc, #580]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a90      	ldr	r2, [pc, #576]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e01d      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x98>
 8003a0a:	4b8b      	ldr	r3, [pc, #556]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a8a      	ldr	r2, [pc, #552]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a87      	ldr	r2, [pc, #540]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b81      	ldr	r3, [pc, #516]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a80      	ldr	r2, [pc, #512]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fe fd5a 	bl	80024fc <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fe fd56 	bl	80024fc <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e204      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0xc0>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fd46 	bl	80024fc <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe fd42 	bl	80024fc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e1f0      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0xe8>
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d063      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa2:	4b65      	ldr	r3, [pc, #404]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d11c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aba:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d116      	bne.n	8003af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_RCC_OscConfig+0x152>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e1c4      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b56      	ldr	r3, [pc, #344]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4952      	ldr	r1, [pc, #328]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	e03a      	b.n	8003b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <HAL_RCC_OscConfig+0x2b0>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fe fcfb 	bl	80024fc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fe fcf7 	bl	80024fc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1a5      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4940      	ldr	r1, [pc, #256]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]
 8003b3c:	e015      	b.n	8003b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3e:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <HAL_RCC_OscConfig+0x2b0>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe fcda 	bl	80024fc <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4c:	f7fe fcd6 	bl	80024fc <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e184      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d030      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7e:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <HAL_RCC_OscConfig+0x2b4>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fe fcba 	bl	80024fc <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8c:	f7fe fcb6 	bl	80024fc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e164      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x200>
 8003baa:	e015      	b.n	8003bd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_RCC_OscConfig+0x2b4>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fca3 	bl	80024fc <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bba:	f7fe fc9f 	bl	80024fc <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e14d      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a0 	beq.w	8003d26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_OscConfig+0x2b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d121      	bne.n	8003c66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <HAL_RCC_OscConfig+0x2b8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a07      	ldr	r2, [pc, #28]	; (8003c44 <HAL_RCC_OscConfig+0x2b8>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fc65 	bl	80024fc <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e011      	b.n	8003c5a <HAL_RCC_OscConfig+0x2ce>
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	42470000 	.word	0x42470000
 8003c40:	42470e80 	.word	0x42470e80
 8003c44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fe fc58 	bl	80024fc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e106      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_RCC_OscConfig+0x4e4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
 8003c6e:	4b81      	ldr	r3, [pc, #516]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a80      	ldr	r2, [pc, #512]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	e01c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x32a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_OscConfig+0x312>
 8003c84:	4b7b      	ldr	r3, [pc, #492]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a7a      	ldr	r2, [pc, #488]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c90:	4b78      	ldr	r3, [pc, #480]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a77      	ldr	r2, [pc, #476]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	e00b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x32a>
 8003c9e:	4b75      	ldr	r3, [pc, #468]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a74      	ldr	r2, [pc, #464]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	4b72      	ldr	r3, [pc, #456]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a71      	ldr	r2, [pc, #452]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fc1d 	bl	80024fc <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fe fc19 	bl	80024fc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0c5      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x33a>
 8003ce8:	e014      	b.n	8003d14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fe fc07 	bl	80024fc <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe fc03 	bl	80024fc <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0af      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d08:	4b5a      	ldr	r3, [pc, #360]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a55      	ldr	r2, [pc, #340]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 809b 	beq.w	8003e66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d30:	4b50      	ldr	r3, [pc, #320]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d05c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d141      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b4c      	ldr	r3, [pc, #304]	; (8003e78 <HAL_RCC_OscConfig+0x4ec>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fbd7 	bl	80024fc <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe fbd3 	bl	80024fc <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e081      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	019b      	lsls	r3, r3, #6
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
 8003d94:	4937      	ldr	r1, [pc, #220]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <HAL_RCC_OscConfig+0x4ec>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fbac 	bl	80024fc <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fe fba8 	bl	80024fc <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e056      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x41c>
 8003dc6:	e04e      	b.n	8003e66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_RCC_OscConfig+0x4ec>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe fb95 	bl	80024fc <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe fb91 	bl	80024fc <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e03f      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de8:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x44a>
 8003df4:	e037      	b.n	8003e66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e032      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e02:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <HAL_RCC_OscConfig+0x4e8>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d028      	beq.n	8003e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d121      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d11a      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d111      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40007000 	.word	0x40007000
 8003e74:	40023800 	.word	0x40023800
 8003e78:	42470060 	.word	0x42470060

08003e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0cc      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e90:	4b68      	ldr	r3, [pc, #416]	; (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d90c      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b65      	ldr	r3, [pc, #404]	; (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b63      	ldr	r3, [pc, #396]	; (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0b8      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a58      	ldr	r2, [pc, #352]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee8:	4b53      	ldr	r3, [pc, #332]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a52      	ldr	r2, [pc, #328]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b50      	ldr	r3, [pc, #320]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	494d      	ldr	r1, [pc, #308]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d044      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	4b47      	ldr	r3, [pc, #284]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d119      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e07f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3a:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e06f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e067      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5a:	4b37      	ldr	r3, [pc, #220]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f023 0203 	bic.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4934      	ldr	r1, [pc, #208]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f6c:	f7fe fac6 	bl	80024fc <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f74:	f7fe fac2 	bl	80024fc <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e04f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	4b2b      	ldr	r3, [pc, #172]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 020c 	and.w	r2, r3, #12
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d1eb      	bne.n	8003f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b25      	ldr	r3, [pc, #148]	; (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d20c      	bcs.n	8003fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b22      	ldr	r3, [pc, #136]	; (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd0:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4916      	ldr	r1, [pc, #88]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fee:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	490e      	ldr	r1, [pc, #56]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004002:	f000 f821 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490a      	ldr	r1, [pc, #40]	; (800403c <HAL_RCC_ClockConfig+0x1c0>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fa26 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023c00 	.word	0x40023c00
 8004038:	40023800 	.word	0x40023800
 800403c:	08005e28 	.word	0x08005e28
 8004040:	20000000 	.word	0x20000000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	2300      	movs	r3, #0
 800405a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004060:	4b67      	ldr	r3, [pc, #412]	; (8004200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b08      	cmp	r3, #8
 800406a:	d00d      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x40>
 800406c:	2b08      	cmp	r3, #8
 800406e:	f200 80bd 	bhi.w	80041ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x34>
 8004076:	2b04      	cmp	r3, #4
 8004078:	d003      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x3a>
 800407a:	e0b7      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800407c:	4b61      	ldr	r3, [pc, #388]	; (8004204 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800407e:	60bb      	str	r3, [r7, #8]
       break;
 8004080:	e0b7      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004082:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004084:	60bb      	str	r3, [r7, #8]
      break;
 8004086:	e0b4      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004088:	4b5d      	ldr	r3, [pc, #372]	; (8004200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004090:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004092:	4b5b      	ldr	r3, [pc, #364]	; (8004200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d04d      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409e:	4b58      	ldr	r3, [pc, #352]	; (8004200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	ea02 0800 	and.w	r8, r2, r0
 80040b6:	ea03 0901 	and.w	r9, r3, r1
 80040ba:	4640      	mov	r0, r8
 80040bc:	4649      	mov	r1, r9
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	014b      	lsls	r3, r1, #5
 80040c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040cc:	0142      	lsls	r2, r0, #5
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	ebb0 0008 	subs.w	r0, r0, r8
 80040d6:	eb61 0109 	sbc.w	r1, r1, r9
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	018b      	lsls	r3, r1, #6
 80040e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040e8:	0182      	lsls	r2, r0, #6
 80040ea:	1a12      	subs	r2, r2, r0
 80040ec:	eb63 0301 	sbc.w	r3, r3, r1
 80040f0:	f04f 0000 	mov.w	r0, #0
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	00d9      	lsls	r1, r3, #3
 80040fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040fe:	00d0      	lsls	r0, r2, #3
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	eb12 0208 	adds.w	r2, r2, r8
 8004108:	eb43 0309 	adc.w	r3, r3, r9
 800410c:	f04f 0000 	mov.w	r0, #0
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	0259      	lsls	r1, r3, #9
 8004116:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800411a:	0250      	lsls	r0, r2, #9
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	461a      	mov	r2, r3
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	f7fc fd30 	bl	8000b90 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e04a      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	461a      	mov	r2, r3
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	ea02 0400 	and.w	r4, r2, r0
 8004152:	ea03 0501 	and.w	r5, r3, r1
 8004156:	4620      	mov	r0, r4
 8004158:	4629      	mov	r1, r5
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	014b      	lsls	r3, r1, #5
 8004164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004168:	0142      	lsls	r2, r0, #5
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	1b00      	subs	r0, r0, r4
 8004170:	eb61 0105 	sbc.w	r1, r1, r5
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	018b      	lsls	r3, r1, #6
 800417e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004182:	0182      	lsls	r2, r0, #6
 8004184:	1a12      	subs	r2, r2, r0
 8004186:	eb63 0301 	sbc.w	r3, r3, r1
 800418a:	f04f 0000 	mov.w	r0, #0
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004198:	00d0      	lsls	r0, r2, #3
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	1912      	adds	r2, r2, r4
 80041a0:	eb45 0303 	adc.w	r3, r5, r3
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	0299      	lsls	r1, r3, #10
 80041ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041b2:	0290      	lsls	r0, r2, #10
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	461a      	mov	r2, r3
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f7fc fce4 	bl	8000b90 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4613      	mov	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	3301      	adds	r3, #1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	60bb      	str	r3, [r7, #8]
      break;
 80041ea:	e002      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041ee:	60bb      	str	r3, [r7, #8]
      break;
 80041f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f2:	68bb      	ldr	r3, [r7, #8]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	00f42400 	.word	0x00f42400
 8004208:	007a1200 	.word	0x007a1200

0800420c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <HAL_RCC_GetHCLKFreq+0x14>)
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000000 	.word	0x20000000

08004224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004228:	f7ff fff0 	bl	800420c <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0a9b      	lsrs	r3, r3, #10
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4903      	ldr	r1, [pc, #12]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40023800 	.word	0x40023800
 8004248:	08005e38 	.word	0x08005e38

0800424c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d001      	beq.n	8004264 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e046      	b.n	80042f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a23      	ldr	r2, [pc, #140]	; (8004300 <HAL_TIM_Base_Start+0xb4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d01d      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <HAL_TIM_Base_Start+0xb8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <HAL_TIM_Base_Start+0xbc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_TIM_Base_Start+0xc0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <HAL_TIM_Base_Start+0xc4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_TIM_Base_Start+0xc8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	; (8004318 <HAL_TIM_Base_Start+0xcc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d111      	bne.n	80042e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d010      	beq.n	80042f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	e007      	b.n	80042f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40001800 	.word	0x40001800

0800431c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e041      	b.n	80043b2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd ff9c 	bl	8002280 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 f88a 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_TIM_OC_ConfigChannel+0x1e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e048      	b.n	800446c <HAL_TIM_OC_ConfigChannel+0xb0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d839      	bhi.n	800445c <HAL_TIM_OC_ConfigChannel+0xa0>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004425 	.word	0x08004425
 80043f4:	0800445d 	.word	0x0800445d
 80043f8:	0800445d 	.word	0x0800445d
 80043fc:	0800445d 	.word	0x0800445d
 8004400:	08004433 	.word	0x08004433
 8004404:	0800445d 	.word	0x0800445d
 8004408:	0800445d 	.word	0x0800445d
 800440c:	0800445d 	.word	0x0800445d
 8004410:	08004441 	.word	0x08004441
 8004414:	0800445d 	.word	0x0800445d
 8004418:	0800445d 	.word	0x0800445d
 800441c:	0800445d 	.word	0x0800445d
 8004420:	0800444f 	.word	0x0800444f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f8c2 	bl	80045b4 <TIM_OC1_SetConfig>
      break;
 8004430:	e017      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f92b 	bl	8004694 <TIM_OC2_SetConfig>
      break;
 800443e:	e010      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f99a 	bl	8004780 <TIM_OC3_SetConfig>
      break;
 800444c:	e009      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fa07 	bl	8004868 <TIM_OC4_SetConfig>
      break;
 800445a:	e002      	b.n	8004462 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	75fb      	strb	r3, [r7, #23]
      break;
 8004460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a40      	ldr	r2, [pc, #256]	; (8004588 <TIM_Base_SetConfig+0x114>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d00f      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3d      	ldr	r2, [pc, #244]	; (800458c <TIM_Base_SetConfig+0x118>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <TIM_Base_SetConfig+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3b      	ldr	r2, [pc, #236]	; (8004594 <TIM_Base_SetConfig+0x120>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3a      	ldr	r2, [pc, #232]	; (8004598 <TIM_Base_SetConfig+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d108      	bne.n	80044c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2f      	ldr	r2, [pc, #188]	; (8004588 <TIM_Base_SetConfig+0x114>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d02b      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d027      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2c      	ldr	r2, [pc, #176]	; (800458c <TIM_Base_SetConfig+0x118>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d023      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	; (8004590 <TIM_Base_SetConfig+0x11c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <TIM_Base_SetConfig+0x120>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01b      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a29      	ldr	r2, [pc, #164]	; (8004598 <TIM_Base_SetConfig+0x124>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d017      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a28      	ldr	r2, [pc, #160]	; (800459c <TIM_Base_SetConfig+0x128>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <TIM_Base_SetConfig+0x12c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00f      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <TIM_Base_SetConfig+0x130>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00b      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <TIM_Base_SetConfig+0x134>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <TIM_Base_SetConfig+0x138>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <TIM_Base_SetConfig+0x13c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d108      	bne.n	8004538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <TIM_Base_SetConfig+0x114>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <TIM_Base_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d103      	bne.n	8004574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	615a      	str	r2, [r3, #20]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40010400 	.word	0x40010400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800
 80045a8:	40001800 	.word	0x40001800
 80045ac:	40001c00 	.word	0x40001c00
 80045b0:	40002000 	.word	0x40002000

080045b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0201 	bic.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 0302 	bic.w	r3, r3, #2
 80045fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a20      	ldr	r2, [pc, #128]	; (800468c <TIM_OC1_SetConfig+0xd8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC1_SetConfig+0x64>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <TIM_OC1_SetConfig+0xdc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10c      	bne.n	8004632 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0308 	bic.w	r3, r3, #8
 800461e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a15      	ldr	r2, [pc, #84]	; (800468c <TIM_OC1_SetConfig+0xd8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_OC1_SetConfig+0x8e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a14      	ldr	r2, [pc, #80]	; (8004690 <TIM_OC1_SetConfig+0xdc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d111      	bne.n	8004666 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	40010000 	.word	0x40010000
 8004690:	40010400 	.word	0x40010400

08004694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0210 	bic.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0320 	bic.w	r3, r3, #32
 80046de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a22      	ldr	r2, [pc, #136]	; (8004778 <TIM_OC2_SetConfig+0xe4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_OC2_SetConfig+0x68>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a21      	ldr	r2, [pc, #132]	; (800477c <TIM_OC2_SetConfig+0xe8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10d      	bne.n	8004718 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <TIM_OC2_SetConfig+0xe4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_OC2_SetConfig+0x94>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a16      	ldr	r2, [pc, #88]	; (800477c <TIM_OC2_SetConfig+0xe8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d113      	bne.n	8004750 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800472e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40010000 	.word	0x40010000
 800477c:	40010400 	.word	0x40010400

08004780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a21      	ldr	r2, [pc, #132]	; (8004860 <TIM_OC3_SetConfig+0xe0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_OC3_SetConfig+0x66>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <TIM_OC3_SetConfig+0xe4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d10d      	bne.n	8004802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a16      	ldr	r2, [pc, #88]	; (8004860 <TIM_OC3_SetConfig+0xe0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC3_SetConfig+0x92>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a15      	ldr	r2, [pc, #84]	; (8004864 <TIM_OC3_SetConfig+0xe4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d113      	bne.n	800483a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40010000 	.word	0x40010000
 8004864:	40010400 	.word	0x40010400

08004868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	031b      	lsls	r3, r3, #12
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <TIM_OC4_SetConfig+0xa4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_OC4_SetConfig+0x68>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <TIM_OC4_SetConfig+0xa8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d109      	bne.n	80048e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	019b      	lsls	r3, r3, #6
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40010400 	.word	0x40010400

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e05a      	b.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d01d      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10c      	bne.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40001800 	.word	0x40001800

08004a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e03d      	b.n	8004aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <__errno>:
 8004ab0:	4b01      	ldr	r3, [pc, #4]	; (8004ab8 <__errno+0x8>)
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	2000000c 	.word	0x2000000c

08004abc <__libc_init_array>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	4d0d      	ldr	r5, [pc, #52]	; (8004af4 <__libc_init_array+0x38>)
 8004ac0:	4c0d      	ldr	r4, [pc, #52]	; (8004af8 <__libc_init_array+0x3c>)
 8004ac2:	1b64      	subs	r4, r4, r5
 8004ac4:	10a4      	asrs	r4, r4, #2
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	42a6      	cmp	r6, r4
 8004aca:	d109      	bne.n	8004ae0 <__libc_init_array+0x24>
 8004acc:	4d0b      	ldr	r5, [pc, #44]	; (8004afc <__libc_init_array+0x40>)
 8004ace:	4c0c      	ldr	r4, [pc, #48]	; (8004b00 <__libc_init_array+0x44>)
 8004ad0:	f001 f99c 	bl	8005e0c <_init>
 8004ad4:	1b64      	subs	r4, r4, r5
 8004ad6:	10a4      	asrs	r4, r4, #2
 8004ad8:	2600      	movs	r6, #0
 8004ada:	42a6      	cmp	r6, r4
 8004adc:	d105      	bne.n	8004aea <__libc_init_array+0x2e>
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae4:	4798      	blx	r3
 8004ae6:	3601      	adds	r6, #1
 8004ae8:	e7ee      	b.n	8004ac8 <__libc_init_array+0xc>
 8004aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aee:	4798      	blx	r3
 8004af0:	3601      	adds	r6, #1
 8004af2:	e7f2      	b.n	8004ada <__libc_init_array+0x1e>
 8004af4:	08006020 	.word	0x08006020
 8004af8:	08006020 	.word	0x08006020
 8004afc:	08006020 	.word	0x08006020
 8004b00:	08006024 	.word	0x08006024

08004b04 <memcpy>:
 8004b04:	440a      	add	r2, r1
 8004b06:	4291      	cmp	r1, r2
 8004b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b0c:	d100      	bne.n	8004b10 <memcpy+0xc>
 8004b0e:	4770      	bx	lr
 8004b10:	b510      	push	{r4, lr}
 8004b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	d1f9      	bne.n	8004b12 <memcpy+0xe>
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <memset>:
 8004b20:	4402      	add	r2, r0
 8004b22:	4603      	mov	r3, r0
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d100      	bne.n	8004b2a <memset+0xa>
 8004b28:	4770      	bx	lr
 8004b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2e:	e7f9      	b.n	8004b24 <memset+0x4>

08004b30 <cos>:
 8004b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b32:	ec53 2b10 	vmov	r2, r3, d0
 8004b36:	4824      	ldr	r0, [pc, #144]	; (8004bc8 <cos+0x98>)
 8004b38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b3c:	4281      	cmp	r1, r0
 8004b3e:	dc06      	bgt.n	8004b4e <cos+0x1e>
 8004b40:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8004bc0 <cos+0x90>
 8004b44:	f000 fb8c 	bl	8005260 <__kernel_cos>
 8004b48:	ec51 0b10 	vmov	r0, r1, d0
 8004b4c:	e007      	b.n	8004b5e <cos+0x2e>
 8004b4e:	481f      	ldr	r0, [pc, #124]	; (8004bcc <cos+0x9c>)
 8004b50:	4281      	cmp	r1, r0
 8004b52:	dd09      	ble.n	8004b68 <cos+0x38>
 8004b54:	ee10 0a10 	vmov	r0, s0
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f7fb fb39 	bl	80001d0 <__aeabi_dsub>
 8004b5e:	ec41 0b10 	vmov	d0, r0, r1
 8004b62:	b005      	add	sp, #20
 8004b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b68:	4668      	mov	r0, sp
 8004b6a:	f000 f8b9 	bl	8004ce0 <__ieee754_rem_pio2>
 8004b6e:	f000 0003 	and.w	r0, r0, #3
 8004b72:	2801      	cmp	r0, #1
 8004b74:	d007      	beq.n	8004b86 <cos+0x56>
 8004b76:	2802      	cmp	r0, #2
 8004b78:	d012      	beq.n	8004ba0 <cos+0x70>
 8004b7a:	b9c0      	cbnz	r0, 8004bae <cos+0x7e>
 8004b7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b80:	ed9d 0b00 	vldr	d0, [sp]
 8004b84:	e7de      	b.n	8004b44 <cos+0x14>
 8004b86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b8a:	ed9d 0b00 	vldr	d0, [sp]
 8004b8e:	f000 ff6f 	bl	8005a70 <__kernel_sin>
 8004b92:	ec53 2b10 	vmov	r2, r3, d0
 8004b96:	ee10 0a10 	vmov	r0, s0
 8004b9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004b9e:	e7de      	b.n	8004b5e <cos+0x2e>
 8004ba0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ba4:	ed9d 0b00 	vldr	d0, [sp]
 8004ba8:	f000 fb5a 	bl	8005260 <__kernel_cos>
 8004bac:	e7f1      	b.n	8004b92 <cos+0x62>
 8004bae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004bb2:	ed9d 0b00 	vldr	d0, [sp]
 8004bb6:	2001      	movs	r0, #1
 8004bb8:	f000 ff5a 	bl	8005a70 <__kernel_sin>
 8004bbc:	e7c4      	b.n	8004b48 <cos+0x18>
 8004bbe:	bf00      	nop
	...
 8004bc8:	3fe921fb 	.word	0x3fe921fb
 8004bcc:	7fefffff 	.word	0x7fefffff

08004bd0 <sin>:
 8004bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bd2:	ec53 2b10 	vmov	r2, r3, d0
 8004bd6:	4826      	ldr	r0, [pc, #152]	; (8004c70 <sin+0xa0>)
 8004bd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004bdc:	4281      	cmp	r1, r0
 8004bde:	dc07      	bgt.n	8004bf0 <sin+0x20>
 8004be0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004c68 <sin+0x98>
 8004be4:	2000      	movs	r0, #0
 8004be6:	f000 ff43 	bl	8005a70 <__kernel_sin>
 8004bea:	ec51 0b10 	vmov	r0, r1, d0
 8004bee:	e007      	b.n	8004c00 <sin+0x30>
 8004bf0:	4820      	ldr	r0, [pc, #128]	; (8004c74 <sin+0xa4>)
 8004bf2:	4281      	cmp	r1, r0
 8004bf4:	dd09      	ble.n	8004c0a <sin+0x3a>
 8004bf6:	ee10 0a10 	vmov	r0, s0
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f7fb fae8 	bl	80001d0 <__aeabi_dsub>
 8004c00:	ec41 0b10 	vmov	d0, r0, r1
 8004c04:	b005      	add	sp, #20
 8004c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c0a:	4668      	mov	r0, sp
 8004c0c:	f000 f868 	bl	8004ce0 <__ieee754_rem_pio2>
 8004c10:	f000 0003 	and.w	r0, r0, #3
 8004c14:	2801      	cmp	r0, #1
 8004c16:	d008      	beq.n	8004c2a <sin+0x5a>
 8004c18:	2802      	cmp	r0, #2
 8004c1a:	d00d      	beq.n	8004c38 <sin+0x68>
 8004c1c:	b9d0      	cbnz	r0, 8004c54 <sin+0x84>
 8004c1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c22:	ed9d 0b00 	vldr	d0, [sp]
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7dd      	b.n	8004be6 <sin+0x16>
 8004c2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c2e:	ed9d 0b00 	vldr	d0, [sp]
 8004c32:	f000 fb15 	bl	8005260 <__kernel_cos>
 8004c36:	e7d8      	b.n	8004bea <sin+0x1a>
 8004c38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c3c:	ed9d 0b00 	vldr	d0, [sp]
 8004c40:	2001      	movs	r0, #1
 8004c42:	f000 ff15 	bl	8005a70 <__kernel_sin>
 8004c46:	ec53 2b10 	vmov	r2, r3, d0
 8004c4a:	ee10 0a10 	vmov	r0, s0
 8004c4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004c52:	e7d5      	b.n	8004c00 <sin+0x30>
 8004c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c58:	ed9d 0b00 	vldr	d0, [sp]
 8004c5c:	f000 fb00 	bl	8005260 <__kernel_cos>
 8004c60:	e7f1      	b.n	8004c46 <sin+0x76>
 8004c62:	bf00      	nop
 8004c64:	f3af 8000 	nop.w
	...
 8004c70:	3fe921fb 	.word	0x3fe921fb
 8004c74:	7fefffff 	.word	0x7fefffff

08004c78 <sqrt>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	ed2d 8b02 	vpush	{d8}
 8004c7e:	ec55 4b10 	vmov	r4, r5, d0
 8004c82:	f000 fa37 	bl	80050f4 <__ieee754_sqrt>
 8004c86:	4b15      	ldr	r3, [pc, #84]	; (8004cdc <sqrt+0x64>)
 8004c88:	eeb0 8a40 	vmov.f32	s16, s0
 8004c8c:	eef0 8a60 	vmov.f32	s17, s1
 8004c90:	f993 3000 	ldrsb.w	r3, [r3]
 8004c94:	3301      	adds	r3, #1
 8004c96:	d019      	beq.n	8004ccc <sqrt+0x54>
 8004c98:	4622      	mov	r2, r4
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	f7fb fee8 	bl	8000a74 <__aeabi_dcmpun>
 8004ca4:	b990      	cbnz	r0, 8004ccc <sqrt+0x54>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4620      	mov	r0, r4
 8004cac:	4629      	mov	r1, r5
 8004cae:	f7fb feb9 	bl	8000a24 <__aeabi_dcmplt>
 8004cb2:	b158      	cbz	r0, 8004ccc <sqrt+0x54>
 8004cb4:	f7ff fefc 	bl	8004ab0 <__errno>
 8004cb8:	2321      	movs	r3, #33	; 0x21
 8004cba:	6003      	str	r3, [r0, #0]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f7fb fd66 	bl	8000794 <__aeabi_ddiv>
 8004cc8:	ec41 0b18 	vmov	d8, r0, r1
 8004ccc:	eeb0 0a48 	vmov.f32	s0, s16
 8004cd0:	eef0 0a68 	vmov.f32	s1, s17
 8004cd4:	ecbd 8b02 	vpop	{d8}
 8004cd8:	bd38      	pop	{r3, r4, r5, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000070 	.word	0x20000070

08004ce0 <__ieee754_rem_pio2>:
 8004ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	ed2d 8b02 	vpush	{d8}
 8004ce8:	ec55 4b10 	vmov	r4, r5, d0
 8004cec:	4bca      	ldr	r3, [pc, #808]	; (8005018 <__ieee754_rem_pio2+0x338>)
 8004cee:	b08b      	sub	sp, #44	; 0x2c
 8004cf0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004cf4:	4598      	cmp	r8, r3
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	9502      	str	r5, [sp, #8]
 8004cfa:	dc08      	bgt.n	8004d0e <__ieee754_rem_pio2+0x2e>
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2300      	movs	r3, #0
 8004d00:	ed80 0b00 	vstr	d0, [r0]
 8004d04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d08:	f04f 0b00 	mov.w	fp, #0
 8004d0c:	e028      	b.n	8004d60 <__ieee754_rem_pio2+0x80>
 8004d0e:	4bc3      	ldr	r3, [pc, #780]	; (800501c <__ieee754_rem_pio2+0x33c>)
 8004d10:	4598      	cmp	r8, r3
 8004d12:	dc78      	bgt.n	8004e06 <__ieee754_rem_pio2+0x126>
 8004d14:	9b02      	ldr	r3, [sp, #8]
 8004d16:	4ec2      	ldr	r6, [pc, #776]	; (8005020 <__ieee754_rem_pio2+0x340>)
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	ee10 0a10 	vmov	r0, s0
 8004d1e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x300>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	4629      	mov	r1, r5
 8004d26:	dd39      	ble.n	8004d9c <__ieee754_rem_pio2+0xbc>
 8004d28:	f7fb fa52 	bl	80001d0 <__aeabi_dsub>
 8004d2c:	45b0      	cmp	r8, r6
 8004d2e:	4604      	mov	r4, r0
 8004d30:	460d      	mov	r5, r1
 8004d32:	d01b      	beq.n	8004d6c <__ieee754_rem_pio2+0x8c>
 8004d34:	a3ac      	add	r3, pc, #688	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x308>)
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f7fb fa49 	bl	80001d0 <__aeabi_dsub>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	e9ca 2300 	strd	r2, r3, [sl]
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fa41 	bl	80001d0 <__aeabi_dsub>
 8004d4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x308>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fa3c 	bl	80001d0 <__aeabi_dsub>
 8004d58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d5c:	f04f 0b01 	mov.w	fp, #1
 8004d60:	4658      	mov	r0, fp
 8004d62:	b00b      	add	sp, #44	; 0x2c
 8004d64:	ecbd 8b02 	vpop	{d8}
 8004d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x310>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb fa2d 	bl	80001d0 <__aeabi_dsub>
 8004d76:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x318>)
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	460d      	mov	r5, r1
 8004d80:	f7fb fa26 	bl	80001d0 <__aeabi_dsub>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	e9ca 2300 	strd	r2, r3, [sl]
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fa1e 	bl	80001d0 <__aeabi_dsub>
 8004d94:	a398      	add	r3, pc, #608	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x318>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	e7db      	b.n	8004d54 <__ieee754_rem_pio2+0x74>
 8004d9c:	f7fb fa1a 	bl	80001d4 <__adddf3>
 8004da0:	45b0      	cmp	r8, r6
 8004da2:	4604      	mov	r4, r0
 8004da4:	460d      	mov	r5, r1
 8004da6:	d016      	beq.n	8004dd6 <__ieee754_rem_pio2+0xf6>
 8004da8:	a38f      	add	r3, pc, #572	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x308>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fa11 	bl	80001d4 <__adddf3>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	e9ca 2300 	strd	r2, r3, [sl]
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f7fb fa07 	bl	80001d0 <__aeabi_dsub>
 8004dc2:	a389      	add	r3, pc, #548	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x308>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fa04 	bl	80001d4 <__adddf3>
 8004dcc:	f04f 3bff 	mov.w	fp, #4294967295
 8004dd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004dd4:	e7c4      	b.n	8004d60 <__ieee754_rem_pio2+0x80>
 8004dd6:	a386      	add	r3, pc, #536	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x310>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb f9fa 	bl	80001d4 <__adddf3>
 8004de0:	a385      	add	r3, pc, #532	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x318>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	4604      	mov	r4, r0
 8004de8:	460d      	mov	r5, r1
 8004dea:	f7fb f9f3 	bl	80001d4 <__adddf3>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	e9ca 2300 	strd	r2, r3, [sl]
 8004df6:	4620      	mov	r0, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7fb f9e9 	bl	80001d0 <__aeabi_dsub>
 8004dfe:	a37e      	add	r3, pc, #504	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x318>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	e7e0      	b.n	8004dc8 <__ieee754_rem_pio2+0xe8>
 8004e06:	4b87      	ldr	r3, [pc, #540]	; (8005024 <__ieee754_rem_pio2+0x344>)
 8004e08:	4598      	cmp	r8, r3
 8004e0a:	f300 80d9 	bgt.w	8004fc0 <__ieee754_rem_pio2+0x2e0>
 8004e0e:	f000 feed 	bl	8005bec <fabs>
 8004e12:	ec55 4b10 	vmov	r4, r5, d0
 8004e16:	ee10 0a10 	vmov	r0, s0
 8004e1a:	a379      	add	r3, pc, #484	; (adr r3, 8005000 <__ieee754_rem_pio2+0x320>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7fb fb8d 	bl	8000540 <__aeabi_dmul>
 8004e26:	4b80      	ldr	r3, [pc, #512]	; (8005028 <__ieee754_rem_pio2+0x348>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f7fb f9d3 	bl	80001d4 <__adddf3>
 8004e2e:	f7fb fe37 	bl	8000aa0 <__aeabi_d2iz>
 8004e32:	4683      	mov	fp, r0
 8004e34:	f7fb fb1a 	bl	800046c <__aeabi_i2d>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	ec43 2b18 	vmov	d8, r2, r3
 8004e40:	a367      	add	r3, pc, #412	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x300>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f7fb fb7b 	bl	8000540 <__aeabi_dmul>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4629      	mov	r1, r5
 8004e52:	f7fb f9bd 	bl	80001d0 <__aeabi_dsub>
 8004e56:	a364      	add	r3, pc, #400	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x308>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	460f      	mov	r7, r1
 8004e60:	ec51 0b18 	vmov	r0, r1, d8
 8004e64:	f7fb fb6c 	bl	8000540 <__aeabi_dmul>
 8004e68:	f1bb 0f1f 	cmp.w	fp, #31
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	460d      	mov	r5, r1
 8004e70:	dc0d      	bgt.n	8004e8e <__ieee754_rem_pio2+0x1ae>
 8004e72:	4b6e      	ldr	r3, [pc, #440]	; (800502c <__ieee754_rem_pio2+0x34c>)
 8004e74:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7c:	4543      	cmp	r3, r8
 8004e7e:	d006      	beq.n	8004e8e <__ieee754_rem_pio2+0x1ae>
 8004e80:	4622      	mov	r2, r4
 8004e82:	462b      	mov	r3, r5
 8004e84:	4630      	mov	r0, r6
 8004e86:	4639      	mov	r1, r7
 8004e88:	f7fb f9a2 	bl	80001d0 <__aeabi_dsub>
 8004e8c:	e00f      	b.n	8004eae <__ieee754_rem_pio2+0x1ce>
 8004e8e:	462b      	mov	r3, r5
 8004e90:	4622      	mov	r2, r4
 8004e92:	4630      	mov	r0, r6
 8004e94:	4639      	mov	r1, r7
 8004e96:	f7fb f99b 	bl	80001d0 <__aeabi_dsub>
 8004e9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e9e:	9303      	str	r3, [sp, #12]
 8004ea0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ea4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004ea8:	f1b8 0f10 	cmp.w	r8, #16
 8004eac:	dc02      	bgt.n	8004eb4 <__ieee754_rem_pio2+0x1d4>
 8004eae:	e9ca 0100 	strd	r0, r1, [sl]
 8004eb2:	e039      	b.n	8004f28 <__ieee754_rem_pio2+0x248>
 8004eb4:	a34e      	add	r3, pc, #312	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x310>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	ec51 0b18 	vmov	r0, r1, d8
 8004ebe:	f7fb fb3f 	bl	8000540 <__aeabi_dmul>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	460d      	mov	r5, r1
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4630      	mov	r0, r6
 8004ecc:	4639      	mov	r1, r7
 8004ece:	f7fb f97f 	bl	80001d0 <__aeabi_dsub>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	4689      	mov	r9, r1
 8004eda:	4630      	mov	r0, r6
 8004edc:	4639      	mov	r1, r7
 8004ede:	f7fb f977 	bl	80001d0 <__aeabi_dsub>
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	f7fb f973 	bl	80001d0 <__aeabi_dsub>
 8004eea:	a343      	add	r3, pc, #268	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x318>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	ec51 0b18 	vmov	r0, r1, d8
 8004ef8:	f7fb fb22 	bl	8000540 <__aeabi_dmul>
 8004efc:	4622      	mov	r2, r4
 8004efe:	462b      	mov	r3, r5
 8004f00:	f7fb f966 	bl	80001d0 <__aeabi_dsub>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4604      	mov	r4, r0
 8004f0a:	460d      	mov	r5, r1
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4649      	mov	r1, r9
 8004f10:	f7fb f95e 	bl	80001d0 <__aeabi_dsub>
 8004f14:	9a03      	ldr	r2, [sp, #12]
 8004f16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b31      	cmp	r3, #49	; 0x31
 8004f1e:	dc24      	bgt.n	8004f6a <__ieee754_rem_pio2+0x28a>
 8004f20:	e9ca 0100 	strd	r0, r1, [sl]
 8004f24:	4646      	mov	r6, r8
 8004f26:	464f      	mov	r7, r9
 8004f28:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	4642      	mov	r2, r8
 8004f30:	464b      	mov	r3, r9
 8004f32:	4639      	mov	r1, r7
 8004f34:	f7fb f94c 	bl	80001d0 <__aeabi_dsub>
 8004f38:	462b      	mov	r3, r5
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	f7fb f948 	bl	80001d0 <__aeabi_dsub>
 8004f40:	9b02      	ldr	r3, [sp, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f48:	f6bf af0a 	bge.w	8004d60 <__ieee754_rem_pio2+0x80>
 8004f4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f50:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f54:	f8ca 8000 	str.w	r8, [sl]
 8004f58:	f8ca 0008 	str.w	r0, [sl, #8]
 8004f5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f60:	f8ca 300c 	str.w	r3, [sl, #12]
 8004f64:	f1cb 0b00 	rsb	fp, fp, #0
 8004f68:	e6fa      	b.n	8004d60 <__ieee754_rem_pio2+0x80>
 8004f6a:	a327      	add	r3, pc, #156	; (adr r3, 8005008 <__ieee754_rem_pio2+0x328>)
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	ec51 0b18 	vmov	r0, r1, d8
 8004f74:	f7fb fae4 	bl	8000540 <__aeabi_dmul>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4640      	mov	r0, r8
 8004f82:	4649      	mov	r1, r9
 8004f84:	f7fb f924 	bl	80001d0 <__aeabi_dsub>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	460f      	mov	r7, r1
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb f91c 	bl	80001d0 <__aeabi_dsub>
 8004f98:	4622      	mov	r2, r4
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	f7fb f918 	bl	80001d0 <__aeabi_dsub>
 8004fa0:	a31b      	add	r3, pc, #108	; (adr r3, 8005010 <__ieee754_rem_pio2+0x330>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460d      	mov	r5, r1
 8004faa:	ec51 0b18 	vmov	r0, r1, d8
 8004fae:	f7fb fac7 	bl	8000540 <__aeabi_dmul>
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	f7fb f90b 	bl	80001d0 <__aeabi_dsub>
 8004fba:	4604      	mov	r4, r0
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	e75f      	b.n	8004e80 <__ieee754_rem_pio2+0x1a0>
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <__ieee754_rem_pio2+0x350>)
 8004fc2:	4598      	cmp	r8, r3
 8004fc4:	dd36      	ble.n	8005034 <__ieee754_rem_pio2+0x354>
 8004fc6:	ee10 2a10 	vmov	r2, s0
 8004fca:	462b      	mov	r3, r5
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f7fb f8fe 	bl	80001d0 <__aeabi_dsub>
 8004fd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004fd8:	e9ca 0100 	strd	r0, r1, [sl]
 8004fdc:	e694      	b.n	8004d08 <__ieee754_rem_pio2+0x28>
 8004fde:	bf00      	nop
 8004fe0:	54400000 	.word	0x54400000
 8004fe4:	3ff921fb 	.word	0x3ff921fb
 8004fe8:	1a626331 	.word	0x1a626331
 8004fec:	3dd0b461 	.word	0x3dd0b461
 8004ff0:	1a600000 	.word	0x1a600000
 8004ff4:	3dd0b461 	.word	0x3dd0b461
 8004ff8:	2e037073 	.word	0x2e037073
 8004ffc:	3ba3198a 	.word	0x3ba3198a
 8005000:	6dc9c883 	.word	0x6dc9c883
 8005004:	3fe45f30 	.word	0x3fe45f30
 8005008:	2e000000 	.word	0x2e000000
 800500c:	3ba3198a 	.word	0x3ba3198a
 8005010:	252049c1 	.word	0x252049c1
 8005014:	397b839a 	.word	0x397b839a
 8005018:	3fe921fb 	.word	0x3fe921fb
 800501c:	4002d97b 	.word	0x4002d97b
 8005020:	3ff921fb 	.word	0x3ff921fb
 8005024:	413921fb 	.word	0x413921fb
 8005028:	3fe00000 	.word	0x3fe00000
 800502c:	08005e40 	.word	0x08005e40
 8005030:	7fefffff 	.word	0x7fefffff
 8005034:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005038:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800503c:	ee10 0a10 	vmov	r0, s0
 8005040:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005044:	ee10 6a10 	vmov	r6, s0
 8005048:	460f      	mov	r7, r1
 800504a:	f7fb fd29 	bl	8000aa0 <__aeabi_d2iz>
 800504e:	f7fb fa0d 	bl	800046c <__aeabi_i2d>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800505e:	f7fb f8b7 	bl	80001d0 <__aeabi_dsub>
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <__ieee754_rem_pio2+0x40c>)
 8005064:	2200      	movs	r2, #0
 8005066:	f7fb fa6b 	bl	8000540 <__aeabi_dmul>
 800506a:	460f      	mov	r7, r1
 800506c:	4606      	mov	r6, r0
 800506e:	f7fb fd17 	bl	8000aa0 <__aeabi_d2iz>
 8005072:	f7fb f9fb 	bl	800046c <__aeabi_i2d>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4630      	mov	r0, r6
 800507c:	4639      	mov	r1, r7
 800507e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005082:	f7fb f8a5 	bl	80001d0 <__aeabi_dsub>
 8005086:	4b19      	ldr	r3, [pc, #100]	; (80050ec <__ieee754_rem_pio2+0x40c>)
 8005088:	2200      	movs	r2, #0
 800508a:	f7fb fa59 	bl	8000540 <__aeabi_dmul>
 800508e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005092:	ad04      	add	r5, sp, #16
 8005094:	f04f 0803 	mov.w	r8, #3
 8005098:	46a9      	mov	r9, r5
 800509a:	2600      	movs	r6, #0
 800509c:	2700      	movs	r7, #0
 800509e:	4632      	mov	r2, r6
 80050a0:	463b      	mov	r3, r7
 80050a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80050a6:	46c3      	mov	fp, r8
 80050a8:	3d08      	subs	r5, #8
 80050aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80050ae:	f7fb fcaf 	bl	8000a10 <__aeabi_dcmpeq>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d1f3      	bne.n	800509e <__ieee754_rem_pio2+0x3be>
 80050b6:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <__ieee754_rem_pio2+0x410>)
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	2302      	movs	r3, #2
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	4622      	mov	r2, r4
 80050c0:	465b      	mov	r3, fp
 80050c2:	4651      	mov	r1, sl
 80050c4:	4648      	mov	r0, r9
 80050c6:	f000 f993 	bl	80053f0 <__kernel_rem_pio2>
 80050ca:	9b02      	ldr	r3, [sp, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	4683      	mov	fp, r0
 80050d0:	f6bf ae46 	bge.w	8004d60 <__ieee754_rem_pio2+0x80>
 80050d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	f8ca 3004 	str.w	r3, [sl, #4]
 80050e0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80050e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050e8:	e73a      	b.n	8004f60 <__ieee754_rem_pio2+0x280>
 80050ea:	bf00      	nop
 80050ec:	41700000 	.word	0x41700000
 80050f0:	08005ec0 	.word	0x08005ec0

080050f4 <__ieee754_sqrt>:
 80050f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f8:	ec55 4b10 	vmov	r4, r5, d0
 80050fc:	4e56      	ldr	r6, [pc, #344]	; (8005258 <__ieee754_sqrt+0x164>)
 80050fe:	43ae      	bics	r6, r5
 8005100:	ee10 0a10 	vmov	r0, s0
 8005104:	ee10 3a10 	vmov	r3, s0
 8005108:	4629      	mov	r1, r5
 800510a:	462a      	mov	r2, r5
 800510c:	d110      	bne.n	8005130 <__ieee754_sqrt+0x3c>
 800510e:	ee10 2a10 	vmov	r2, s0
 8005112:	462b      	mov	r3, r5
 8005114:	f7fb fa14 	bl	8000540 <__aeabi_dmul>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	f7fb f858 	bl	80001d4 <__adddf3>
 8005124:	4604      	mov	r4, r0
 8005126:	460d      	mov	r5, r1
 8005128:	ec45 4b10 	vmov	d0, r4, r5
 800512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005130:	2d00      	cmp	r5, #0
 8005132:	dc10      	bgt.n	8005156 <__ieee754_sqrt+0x62>
 8005134:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005138:	4330      	orrs	r0, r6
 800513a:	d0f5      	beq.n	8005128 <__ieee754_sqrt+0x34>
 800513c:	b15d      	cbz	r5, 8005156 <__ieee754_sqrt+0x62>
 800513e:	ee10 2a10 	vmov	r2, s0
 8005142:	462b      	mov	r3, r5
 8005144:	ee10 0a10 	vmov	r0, s0
 8005148:	f7fb f842 	bl	80001d0 <__aeabi_dsub>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	f7fb fb20 	bl	8000794 <__aeabi_ddiv>
 8005154:	e7e6      	b.n	8005124 <__ieee754_sqrt+0x30>
 8005156:	1509      	asrs	r1, r1, #20
 8005158:	d076      	beq.n	8005248 <__ieee754_sqrt+0x154>
 800515a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800515e:	07ce      	lsls	r6, r1, #31
 8005160:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005164:	bf5e      	ittt	pl
 8005166:	0fda      	lsrpl	r2, r3, #31
 8005168:	005b      	lslpl	r3, r3, #1
 800516a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800516e:	0fda      	lsrs	r2, r3, #31
 8005170:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005174:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005178:	2000      	movs	r0, #0
 800517a:	106d      	asrs	r5, r5, #1
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	f04f 0e16 	mov.w	lr, #22
 8005182:	4684      	mov	ip, r0
 8005184:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005188:	eb0c 0401 	add.w	r4, ip, r1
 800518c:	4294      	cmp	r4, r2
 800518e:	bfde      	ittt	le
 8005190:	1b12      	suble	r2, r2, r4
 8005192:	eb04 0c01 	addle.w	ip, r4, r1
 8005196:	1840      	addle	r0, r0, r1
 8005198:	0052      	lsls	r2, r2, #1
 800519a:	f1be 0e01 	subs.w	lr, lr, #1
 800519e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80051a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80051a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051aa:	d1ed      	bne.n	8005188 <__ieee754_sqrt+0x94>
 80051ac:	4671      	mov	r1, lr
 80051ae:	2720      	movs	r7, #32
 80051b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80051b4:	4562      	cmp	r2, ip
 80051b6:	eb04 060e 	add.w	r6, r4, lr
 80051ba:	dc02      	bgt.n	80051c2 <__ieee754_sqrt+0xce>
 80051bc:	d113      	bne.n	80051e6 <__ieee754_sqrt+0xf2>
 80051be:	429e      	cmp	r6, r3
 80051c0:	d811      	bhi.n	80051e6 <__ieee754_sqrt+0xf2>
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	eb06 0e04 	add.w	lr, r6, r4
 80051c8:	da43      	bge.n	8005252 <__ieee754_sqrt+0x15e>
 80051ca:	f1be 0f00 	cmp.w	lr, #0
 80051ce:	db40      	blt.n	8005252 <__ieee754_sqrt+0x15e>
 80051d0:	f10c 0801 	add.w	r8, ip, #1
 80051d4:	eba2 020c 	sub.w	r2, r2, ip
 80051d8:	429e      	cmp	r6, r3
 80051da:	bf88      	it	hi
 80051dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80051e0:	1b9b      	subs	r3, r3, r6
 80051e2:	4421      	add	r1, r4
 80051e4:	46c4      	mov	ip, r8
 80051e6:	0052      	lsls	r2, r2, #1
 80051e8:	3f01      	subs	r7, #1
 80051ea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80051ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80051f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051f6:	d1dd      	bne.n	80051b4 <__ieee754_sqrt+0xc0>
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d006      	beq.n	800520a <__ieee754_sqrt+0x116>
 80051fc:	1c4c      	adds	r4, r1, #1
 80051fe:	bf13      	iteet	ne
 8005200:	3101      	addne	r1, #1
 8005202:	3001      	addeq	r0, #1
 8005204:	4639      	moveq	r1, r7
 8005206:	f021 0101 	bicne.w	r1, r1, #1
 800520a:	1043      	asrs	r3, r0, #1
 800520c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005210:	0849      	lsrs	r1, r1, #1
 8005212:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005216:	07c2      	lsls	r2, r0, #31
 8005218:	bf48      	it	mi
 800521a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800521e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005222:	460c      	mov	r4, r1
 8005224:	463d      	mov	r5, r7
 8005226:	e77f      	b.n	8005128 <__ieee754_sqrt+0x34>
 8005228:	0ada      	lsrs	r2, r3, #11
 800522a:	3815      	subs	r0, #21
 800522c:	055b      	lsls	r3, r3, #21
 800522e:	2a00      	cmp	r2, #0
 8005230:	d0fa      	beq.n	8005228 <__ieee754_sqrt+0x134>
 8005232:	02d7      	lsls	r7, r2, #11
 8005234:	d50a      	bpl.n	800524c <__ieee754_sqrt+0x158>
 8005236:	f1c1 0420 	rsb	r4, r1, #32
 800523a:	fa23 f404 	lsr.w	r4, r3, r4
 800523e:	1e4d      	subs	r5, r1, #1
 8005240:	408b      	lsls	r3, r1
 8005242:	4322      	orrs	r2, r4
 8005244:	1b41      	subs	r1, r0, r5
 8005246:	e788      	b.n	800515a <__ieee754_sqrt+0x66>
 8005248:	4608      	mov	r0, r1
 800524a:	e7f0      	b.n	800522e <__ieee754_sqrt+0x13a>
 800524c:	0052      	lsls	r2, r2, #1
 800524e:	3101      	adds	r1, #1
 8005250:	e7ef      	b.n	8005232 <__ieee754_sqrt+0x13e>
 8005252:	46e0      	mov	r8, ip
 8005254:	e7be      	b.n	80051d4 <__ieee754_sqrt+0xe0>
 8005256:	bf00      	nop
 8005258:	7ff00000 	.word	0x7ff00000
 800525c:	00000000 	.word	0x00000000

08005260 <__kernel_cos>:
 8005260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	ec57 6b10 	vmov	r6, r7, d0
 8005268:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800526c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005270:	ed8d 1b00 	vstr	d1, [sp]
 8005274:	da07      	bge.n	8005286 <__kernel_cos+0x26>
 8005276:	ee10 0a10 	vmov	r0, s0
 800527a:	4639      	mov	r1, r7
 800527c:	f7fb fc10 	bl	8000aa0 <__aeabi_d2iz>
 8005280:	2800      	cmp	r0, #0
 8005282:	f000 8088 	beq.w	8005396 <__kernel_cos+0x136>
 8005286:	4632      	mov	r2, r6
 8005288:	463b      	mov	r3, r7
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb f957 	bl	8000540 <__aeabi_dmul>
 8005292:	4b51      	ldr	r3, [pc, #324]	; (80053d8 <__kernel_cos+0x178>)
 8005294:	2200      	movs	r2, #0
 8005296:	4604      	mov	r4, r0
 8005298:	460d      	mov	r5, r1
 800529a:	f7fb f951 	bl	8000540 <__aeabi_dmul>
 800529e:	a340      	add	r3, pc, #256	; (adr r3, 80053a0 <__kernel_cos+0x140>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	4682      	mov	sl, r0
 80052a6:	468b      	mov	fp, r1
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7fb f948 	bl	8000540 <__aeabi_dmul>
 80052b0:	a33d      	add	r3, pc, #244	; (adr r3, 80053a8 <__kernel_cos+0x148>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f7fa ff8d 	bl	80001d4 <__adddf3>
 80052ba:	4622      	mov	r2, r4
 80052bc:	462b      	mov	r3, r5
 80052be:	f7fb f93f 	bl	8000540 <__aeabi_dmul>
 80052c2:	a33b      	add	r3, pc, #236	; (adr r3, 80053b0 <__kernel_cos+0x150>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fa ff82 	bl	80001d0 <__aeabi_dsub>
 80052cc:	4622      	mov	r2, r4
 80052ce:	462b      	mov	r3, r5
 80052d0:	f7fb f936 	bl	8000540 <__aeabi_dmul>
 80052d4:	a338      	add	r3, pc, #224	; (adr r3, 80053b8 <__kernel_cos+0x158>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fa ff7b 	bl	80001d4 <__adddf3>
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	f7fb f92d 	bl	8000540 <__aeabi_dmul>
 80052e6:	a336      	add	r3, pc, #216	; (adr r3, 80053c0 <__kernel_cos+0x160>)
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f7fa ff70 	bl	80001d0 <__aeabi_dsub>
 80052f0:	4622      	mov	r2, r4
 80052f2:	462b      	mov	r3, r5
 80052f4:	f7fb f924 	bl	8000540 <__aeabi_dmul>
 80052f8:	a333      	add	r3, pc, #204	; (adr r3, 80053c8 <__kernel_cos+0x168>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fa ff69 	bl	80001d4 <__adddf3>
 8005302:	4622      	mov	r2, r4
 8005304:	462b      	mov	r3, r5
 8005306:	f7fb f91b 	bl	8000540 <__aeabi_dmul>
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	f7fb f917 	bl	8000540 <__aeabi_dmul>
 8005312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005316:	4604      	mov	r4, r0
 8005318:	460d      	mov	r5, r1
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	f7fb f90f 	bl	8000540 <__aeabi_dmul>
 8005322:	460b      	mov	r3, r1
 8005324:	4602      	mov	r2, r0
 8005326:	4629      	mov	r1, r5
 8005328:	4620      	mov	r0, r4
 800532a:	f7fa ff51 	bl	80001d0 <__aeabi_dsub>
 800532e:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <__kernel_cos+0x17c>)
 8005330:	4598      	cmp	r8, r3
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	dc10      	bgt.n	800535a <__kernel_cos+0xfa>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4650      	mov	r0, sl
 800533e:	4659      	mov	r1, fp
 8005340:	f7fa ff46 	bl	80001d0 <__aeabi_dsub>
 8005344:	460b      	mov	r3, r1
 8005346:	4926      	ldr	r1, [pc, #152]	; (80053e0 <__kernel_cos+0x180>)
 8005348:	4602      	mov	r2, r0
 800534a:	2000      	movs	r0, #0
 800534c:	f7fa ff40 	bl	80001d0 <__aeabi_dsub>
 8005350:	ec41 0b10 	vmov	d0, r0, r1
 8005354:	b003      	add	sp, #12
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <__kernel_cos+0x184>)
 800535c:	4920      	ldr	r1, [pc, #128]	; (80053e0 <__kernel_cos+0x180>)
 800535e:	4598      	cmp	r8, r3
 8005360:	bfcc      	ite	gt
 8005362:	4d21      	ldrgt	r5, [pc, #132]	; (80053e8 <__kernel_cos+0x188>)
 8005364:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005368:	2400      	movs	r4, #0
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	2000      	movs	r0, #0
 8005370:	f7fa ff2e 	bl	80001d0 <__aeabi_dsub>
 8005374:	4622      	mov	r2, r4
 8005376:	4680      	mov	r8, r0
 8005378:	4689      	mov	r9, r1
 800537a:	462b      	mov	r3, r5
 800537c:	4650      	mov	r0, sl
 800537e:	4659      	mov	r1, fp
 8005380:	f7fa ff26 	bl	80001d0 <__aeabi_dsub>
 8005384:	4632      	mov	r2, r6
 8005386:	463b      	mov	r3, r7
 8005388:	f7fa ff22 	bl	80001d0 <__aeabi_dsub>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4640      	mov	r0, r8
 8005392:	4649      	mov	r1, r9
 8005394:	e7da      	b.n	800534c <__kernel_cos+0xec>
 8005396:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80053d0 <__kernel_cos+0x170>
 800539a:	e7db      	b.n	8005354 <__kernel_cos+0xf4>
 800539c:	f3af 8000 	nop.w
 80053a0:	be8838d4 	.word	0xbe8838d4
 80053a4:	bda8fae9 	.word	0xbda8fae9
 80053a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80053ac:	3e21ee9e 	.word	0x3e21ee9e
 80053b0:	809c52ad 	.word	0x809c52ad
 80053b4:	3e927e4f 	.word	0x3e927e4f
 80053b8:	19cb1590 	.word	0x19cb1590
 80053bc:	3efa01a0 	.word	0x3efa01a0
 80053c0:	16c15177 	.word	0x16c15177
 80053c4:	3f56c16c 	.word	0x3f56c16c
 80053c8:	5555554c 	.word	0x5555554c
 80053cc:	3fa55555 	.word	0x3fa55555
 80053d0:	00000000 	.word	0x00000000
 80053d4:	3ff00000 	.word	0x3ff00000
 80053d8:	3fe00000 	.word	0x3fe00000
 80053dc:	3fd33332 	.word	0x3fd33332
 80053e0:	3ff00000 	.word	0x3ff00000
 80053e4:	3fe90000 	.word	0x3fe90000
 80053e8:	3fd20000 	.word	0x3fd20000
 80053ec:	00000000 	.word	0x00000000

080053f0 <__kernel_rem_pio2>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	ed2d 8b02 	vpush	{d8}
 80053f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80053fc:	f112 0f14 	cmn.w	r2, #20
 8005400:	9308      	str	r3, [sp, #32]
 8005402:	9101      	str	r1, [sp, #4]
 8005404:	4bc6      	ldr	r3, [pc, #792]	; (8005720 <__kernel_rem_pio2+0x330>)
 8005406:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005408:	9009      	str	r0, [sp, #36]	; 0x24
 800540a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800540e:	9304      	str	r3, [sp, #16]
 8005410:	9b08      	ldr	r3, [sp, #32]
 8005412:	f103 33ff 	add.w	r3, r3, #4294967295
 8005416:	bfa8      	it	ge
 8005418:	1ed4      	subge	r4, r2, #3
 800541a:	9306      	str	r3, [sp, #24]
 800541c:	bfb2      	itee	lt
 800541e:	2400      	movlt	r4, #0
 8005420:	2318      	movge	r3, #24
 8005422:	fb94 f4f3 	sdivge	r4, r4, r3
 8005426:	f06f 0317 	mvn.w	r3, #23
 800542a:	fb04 3303 	mla	r3, r4, r3, r3
 800542e:	eb03 0a02 	add.w	sl, r3, r2
 8005432:	9b04      	ldr	r3, [sp, #16]
 8005434:	9a06      	ldr	r2, [sp, #24]
 8005436:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005710 <__kernel_rem_pio2+0x320>
 800543a:	eb03 0802 	add.w	r8, r3, r2
 800543e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005440:	1aa7      	subs	r7, r4, r2
 8005442:	ae20      	add	r6, sp, #128	; 0x80
 8005444:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005448:	2500      	movs	r5, #0
 800544a:	4545      	cmp	r5, r8
 800544c:	dd18      	ble.n	8005480 <__kernel_rem_pio2+0x90>
 800544e:	9b08      	ldr	r3, [sp, #32]
 8005450:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005454:	aa20      	add	r2, sp, #128	; 0x80
 8005456:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005710 <__kernel_rem_pio2+0x320>
 800545a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800545e:	f1c3 0301 	rsb	r3, r3, #1
 8005462:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005466:	9307      	str	r3, [sp, #28]
 8005468:	9b07      	ldr	r3, [sp, #28]
 800546a:	9a04      	ldr	r2, [sp, #16]
 800546c:	4443      	add	r3, r8
 800546e:	429a      	cmp	r2, r3
 8005470:	db2f      	blt.n	80054d2 <__kernel_rem_pio2+0xe2>
 8005472:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005476:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800547a:	462f      	mov	r7, r5
 800547c:	2600      	movs	r6, #0
 800547e:	e01b      	b.n	80054b8 <__kernel_rem_pio2+0xc8>
 8005480:	42ef      	cmn	r7, r5
 8005482:	d407      	bmi.n	8005494 <__kernel_rem_pio2+0xa4>
 8005484:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005488:	f7fa fff0 	bl	800046c <__aeabi_i2d>
 800548c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005490:	3501      	adds	r5, #1
 8005492:	e7da      	b.n	800544a <__kernel_rem_pio2+0x5a>
 8005494:	ec51 0b18 	vmov	r0, r1, d8
 8005498:	e7f8      	b.n	800548c <__kernel_rem_pio2+0x9c>
 800549a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800549e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80054a2:	f7fb f84d 	bl	8000540 <__aeabi_dmul>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ae:	f7fa fe91 	bl	80001d4 <__adddf3>
 80054b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b6:	3601      	adds	r6, #1
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	429e      	cmp	r6, r3
 80054bc:	f1a7 0708 	sub.w	r7, r7, #8
 80054c0:	ddeb      	ble.n	800549a <__kernel_rem_pio2+0xaa>
 80054c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054c6:	3508      	adds	r5, #8
 80054c8:	ecab 7b02 	vstmia	fp!, {d7}
 80054cc:	f108 0801 	add.w	r8, r8, #1
 80054d0:	e7ca      	b.n	8005468 <__kernel_rem_pio2+0x78>
 80054d2:	9b04      	ldr	r3, [sp, #16]
 80054d4:	aa0c      	add	r2, sp, #48	; 0x30
 80054d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054da:	930b      	str	r3, [sp, #44]	; 0x2c
 80054dc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80054de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80054e2:	9c04      	ldr	r4, [sp, #16]
 80054e4:	930a      	str	r3, [sp, #40]	; 0x28
 80054e6:	ab98      	add	r3, sp, #608	; 0x260
 80054e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054ec:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80054f0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80054f4:	f8cd b008 	str.w	fp, [sp, #8]
 80054f8:	4625      	mov	r5, r4
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	dc78      	bgt.n	80055f0 <__kernel_rem_pio2+0x200>
 80054fe:	ec47 6b10 	vmov	d0, r6, r7
 8005502:	4650      	mov	r0, sl
 8005504:	f000 fbfc 	bl	8005d00 <scalbn>
 8005508:	ec57 6b10 	vmov	r6, r7, d0
 800550c:	2200      	movs	r2, #0
 800550e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005512:	ee10 0a10 	vmov	r0, s0
 8005516:	4639      	mov	r1, r7
 8005518:	f7fb f812 	bl	8000540 <__aeabi_dmul>
 800551c:	ec41 0b10 	vmov	d0, r0, r1
 8005520:	f000 fb6e 	bl	8005c00 <floor>
 8005524:	4b7f      	ldr	r3, [pc, #508]	; (8005724 <__kernel_rem_pio2+0x334>)
 8005526:	ec51 0b10 	vmov	r0, r1, d0
 800552a:	2200      	movs	r2, #0
 800552c:	f7fb f808 	bl	8000540 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fa fe4a 	bl	80001d0 <__aeabi_dsub>
 800553c:	460f      	mov	r7, r1
 800553e:	4606      	mov	r6, r0
 8005540:	f7fb faae 	bl	8000aa0 <__aeabi_d2iz>
 8005544:	9007      	str	r0, [sp, #28]
 8005546:	f7fa ff91 	bl	800046c <__aeabi_i2d>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fa fe3d 	bl	80001d0 <__aeabi_dsub>
 8005556:	f1ba 0f00 	cmp.w	sl, #0
 800555a:	4606      	mov	r6, r0
 800555c:	460f      	mov	r7, r1
 800555e:	dd70      	ble.n	8005642 <__kernel_rem_pio2+0x252>
 8005560:	1e62      	subs	r2, r4, #1
 8005562:	ab0c      	add	r3, sp, #48	; 0x30
 8005564:	9d07      	ldr	r5, [sp, #28]
 8005566:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800556a:	f1ca 0118 	rsb	r1, sl, #24
 800556e:	fa40 f301 	asr.w	r3, r0, r1
 8005572:	441d      	add	r5, r3
 8005574:	408b      	lsls	r3, r1
 8005576:	1ac0      	subs	r0, r0, r3
 8005578:	ab0c      	add	r3, sp, #48	; 0x30
 800557a:	9507      	str	r5, [sp, #28]
 800557c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005580:	f1ca 0317 	rsb	r3, sl, #23
 8005584:	fa40 f303 	asr.w	r3, r0, r3
 8005588:	9302      	str	r3, [sp, #8]
 800558a:	9b02      	ldr	r3, [sp, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	dd66      	ble.n	800565e <__kernel_rem_pio2+0x26e>
 8005590:	9b07      	ldr	r3, [sp, #28]
 8005592:	2200      	movs	r2, #0
 8005594:	3301      	adds	r3, #1
 8005596:	9307      	str	r3, [sp, #28]
 8005598:	4615      	mov	r5, r2
 800559a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800559e:	4294      	cmp	r4, r2
 80055a0:	f300 8099 	bgt.w	80056d6 <__kernel_rem_pio2+0x2e6>
 80055a4:	f1ba 0f00 	cmp.w	sl, #0
 80055a8:	dd07      	ble.n	80055ba <__kernel_rem_pio2+0x1ca>
 80055aa:	f1ba 0f01 	cmp.w	sl, #1
 80055ae:	f000 80a5 	beq.w	80056fc <__kernel_rem_pio2+0x30c>
 80055b2:	f1ba 0f02 	cmp.w	sl, #2
 80055b6:	f000 80c1 	beq.w	800573c <__kernel_rem_pio2+0x34c>
 80055ba:	9b02      	ldr	r3, [sp, #8]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d14e      	bne.n	800565e <__kernel_rem_pio2+0x26e>
 80055c0:	4632      	mov	r2, r6
 80055c2:	463b      	mov	r3, r7
 80055c4:	4958      	ldr	r1, [pc, #352]	; (8005728 <__kernel_rem_pio2+0x338>)
 80055c6:	2000      	movs	r0, #0
 80055c8:	f7fa fe02 	bl	80001d0 <__aeabi_dsub>
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	d044      	beq.n	800565e <__kernel_rem_pio2+0x26e>
 80055d4:	4650      	mov	r0, sl
 80055d6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005718 <__kernel_rem_pio2+0x328>
 80055da:	f000 fb91 	bl	8005d00 <scalbn>
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	ec53 2b10 	vmov	r2, r3, d0
 80055e6:	f7fa fdf3 	bl	80001d0 <__aeabi_dsub>
 80055ea:	4606      	mov	r6, r0
 80055ec:	460f      	mov	r7, r1
 80055ee:	e036      	b.n	800565e <__kernel_rem_pio2+0x26e>
 80055f0:	4b4e      	ldr	r3, [pc, #312]	; (800572c <__kernel_rem_pio2+0x33c>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	4630      	mov	r0, r6
 80055f6:	4639      	mov	r1, r7
 80055f8:	f7fa ffa2 	bl	8000540 <__aeabi_dmul>
 80055fc:	f7fb fa50 	bl	8000aa0 <__aeabi_d2iz>
 8005600:	f7fa ff34 	bl	800046c <__aeabi_i2d>
 8005604:	4b4a      	ldr	r3, [pc, #296]	; (8005730 <__kernel_rem_pio2+0x340>)
 8005606:	2200      	movs	r2, #0
 8005608:	4680      	mov	r8, r0
 800560a:	4689      	mov	r9, r1
 800560c:	f7fa ff98 	bl	8000540 <__aeabi_dmul>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fa fdda 	bl	80001d0 <__aeabi_dsub>
 800561c:	f7fb fa40 	bl	8000aa0 <__aeabi_d2iz>
 8005620:	9b02      	ldr	r3, [sp, #8]
 8005622:	f843 0b04 	str.w	r0, [r3], #4
 8005626:	3d01      	subs	r5, #1
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	ab70      	add	r3, sp, #448	; 0x1c0
 800562c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7fa fdcc 	bl	80001d4 <__adddf3>
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	e75b      	b.n	80054fa <__kernel_rem_pio2+0x10a>
 8005642:	d105      	bne.n	8005650 <__kernel_rem_pio2+0x260>
 8005644:	1e63      	subs	r3, r4, #1
 8005646:	aa0c      	add	r2, sp, #48	; 0x30
 8005648:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800564c:	15c3      	asrs	r3, r0, #23
 800564e:	e79b      	b.n	8005588 <__kernel_rem_pio2+0x198>
 8005650:	4b38      	ldr	r3, [pc, #224]	; (8005734 <__kernel_rem_pio2+0x344>)
 8005652:	2200      	movs	r2, #0
 8005654:	f7fb f9fa 	bl	8000a4c <__aeabi_dcmpge>
 8005658:	2800      	cmp	r0, #0
 800565a:	d139      	bne.n	80056d0 <__kernel_rem_pio2+0x2e0>
 800565c:	9002      	str	r0, [sp, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	4630      	mov	r0, r6
 8005664:	4639      	mov	r1, r7
 8005666:	f7fb f9d3 	bl	8000a10 <__aeabi_dcmpeq>
 800566a:	2800      	cmp	r0, #0
 800566c:	f000 80b4 	beq.w	80057d8 <__kernel_rem_pio2+0x3e8>
 8005670:	f104 3bff 	add.w	fp, r4, #4294967295
 8005674:	465b      	mov	r3, fp
 8005676:	2200      	movs	r2, #0
 8005678:	9904      	ldr	r1, [sp, #16]
 800567a:	428b      	cmp	r3, r1
 800567c:	da65      	bge.n	800574a <__kernel_rem_pio2+0x35a>
 800567e:	2a00      	cmp	r2, #0
 8005680:	d07b      	beq.n	800577a <__kernel_rem_pio2+0x38a>
 8005682:	ab0c      	add	r3, sp, #48	; 0x30
 8005684:	f1aa 0a18 	sub.w	sl, sl, #24
 8005688:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80a0 	beq.w	80057d2 <__kernel_rem_pio2+0x3e2>
 8005692:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005718 <__kernel_rem_pio2+0x328>
 8005696:	4650      	mov	r0, sl
 8005698:	f000 fb32 	bl	8005d00 <scalbn>
 800569c:	4f23      	ldr	r7, [pc, #140]	; (800572c <__kernel_rem_pio2+0x33c>)
 800569e:	ec55 4b10 	vmov	r4, r5, d0
 80056a2:	46d8      	mov	r8, fp
 80056a4:	2600      	movs	r6, #0
 80056a6:	f1b8 0f00 	cmp.w	r8, #0
 80056aa:	f280 80cf 	bge.w	800584c <__kernel_rem_pio2+0x45c>
 80056ae:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005710 <__kernel_rem_pio2+0x320>
 80056b2:	465f      	mov	r7, fp
 80056b4:	f04f 0800 	mov.w	r8, #0
 80056b8:	2f00      	cmp	r7, #0
 80056ba:	f2c0 80fd 	blt.w	80058b8 <__kernel_rem_pio2+0x4c8>
 80056be:	ab70      	add	r3, sp, #448	; 0x1c0
 80056c0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005738 <__kernel_rem_pio2+0x348>
 80056c4:	ec55 4b18 	vmov	r4, r5, d8
 80056c8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80056cc:	2600      	movs	r6, #0
 80056ce:	e0e5      	b.n	800589c <__kernel_rem_pio2+0x4ac>
 80056d0:	2302      	movs	r3, #2
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	e75c      	b.n	8005590 <__kernel_rem_pio2+0x1a0>
 80056d6:	f8db 3000 	ldr.w	r3, [fp]
 80056da:	b955      	cbnz	r5, 80056f2 <__kernel_rem_pio2+0x302>
 80056dc:	b123      	cbz	r3, 80056e8 <__kernel_rem_pio2+0x2f8>
 80056de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80056e2:	f8cb 3000 	str.w	r3, [fp]
 80056e6:	2301      	movs	r3, #1
 80056e8:	3201      	adds	r2, #1
 80056ea:	f10b 0b04 	add.w	fp, fp, #4
 80056ee:	461d      	mov	r5, r3
 80056f0:	e755      	b.n	800559e <__kernel_rem_pio2+0x1ae>
 80056f2:	1acb      	subs	r3, r1, r3
 80056f4:	f8cb 3000 	str.w	r3, [fp]
 80056f8:	462b      	mov	r3, r5
 80056fa:	e7f5      	b.n	80056e8 <__kernel_rem_pio2+0x2f8>
 80056fc:	1e62      	subs	r2, r4, #1
 80056fe:	ab0c      	add	r3, sp, #48	; 0x30
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005708:	a90c      	add	r1, sp, #48	; 0x30
 800570a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800570e:	e754      	b.n	80055ba <__kernel_rem_pio2+0x1ca>
	...
 800571c:	3ff00000 	.word	0x3ff00000
 8005720:	08006008 	.word	0x08006008
 8005724:	40200000 	.word	0x40200000
 8005728:	3ff00000 	.word	0x3ff00000
 800572c:	3e700000 	.word	0x3e700000
 8005730:	41700000 	.word	0x41700000
 8005734:	3fe00000 	.word	0x3fe00000
 8005738:	08005fc8 	.word	0x08005fc8
 800573c:	1e62      	subs	r2, r4, #1
 800573e:	ab0c      	add	r3, sp, #48	; 0x30
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005748:	e7de      	b.n	8005708 <__kernel_rem_pio2+0x318>
 800574a:	a90c      	add	r1, sp, #48	; 0x30
 800574c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005750:	3b01      	subs	r3, #1
 8005752:	430a      	orrs	r2, r1
 8005754:	e790      	b.n	8005678 <__kernel_rem_pio2+0x288>
 8005756:	3301      	adds	r3, #1
 8005758:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800575c:	2900      	cmp	r1, #0
 800575e:	d0fa      	beq.n	8005756 <__kernel_rem_pio2+0x366>
 8005760:	9a08      	ldr	r2, [sp, #32]
 8005762:	18e3      	adds	r3, r4, r3
 8005764:	18a6      	adds	r6, r4, r2
 8005766:	aa20      	add	r2, sp, #128	; 0x80
 8005768:	1c65      	adds	r5, r4, #1
 800576a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800576e:	9302      	str	r3, [sp, #8]
 8005770:	9b02      	ldr	r3, [sp, #8]
 8005772:	42ab      	cmp	r3, r5
 8005774:	da04      	bge.n	8005780 <__kernel_rem_pio2+0x390>
 8005776:	461c      	mov	r4, r3
 8005778:	e6b5      	b.n	80054e6 <__kernel_rem_pio2+0xf6>
 800577a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800577c:	2301      	movs	r3, #1
 800577e:	e7eb      	b.n	8005758 <__kernel_rem_pio2+0x368>
 8005780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005786:	f7fa fe71 	bl	800046c <__aeabi_i2d>
 800578a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800578e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005790:	46b3      	mov	fp, r6
 8005792:	461c      	mov	r4, r3
 8005794:	2700      	movs	r7, #0
 8005796:	f04f 0800 	mov.w	r8, #0
 800579a:	f04f 0900 	mov.w	r9, #0
 800579e:	9b06      	ldr	r3, [sp, #24]
 80057a0:	429f      	cmp	r7, r3
 80057a2:	dd06      	ble.n	80057b2 <__kernel_rem_pio2+0x3c2>
 80057a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80057a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80057aa:	e9c3 8900 	strd	r8, r9, [r3]
 80057ae:	3501      	adds	r5, #1
 80057b0:	e7de      	b.n	8005770 <__kernel_rem_pio2+0x380>
 80057b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80057b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80057ba:	f7fa fec1 	bl	8000540 <__aeabi_dmul>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4640      	mov	r0, r8
 80057c4:	4649      	mov	r1, r9
 80057c6:	f7fa fd05 	bl	80001d4 <__adddf3>
 80057ca:	3701      	adds	r7, #1
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	e7e5      	b.n	800579e <__kernel_rem_pio2+0x3ae>
 80057d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057d6:	e754      	b.n	8005682 <__kernel_rem_pio2+0x292>
 80057d8:	ec47 6b10 	vmov	d0, r6, r7
 80057dc:	f1ca 0000 	rsb	r0, sl, #0
 80057e0:	f000 fa8e 	bl	8005d00 <scalbn>
 80057e4:	ec57 6b10 	vmov	r6, r7, d0
 80057e8:	4b9f      	ldr	r3, [pc, #636]	; (8005a68 <__kernel_rem_pio2+0x678>)
 80057ea:	ee10 0a10 	vmov	r0, s0
 80057ee:	2200      	movs	r2, #0
 80057f0:	4639      	mov	r1, r7
 80057f2:	f7fb f92b 	bl	8000a4c <__aeabi_dcmpge>
 80057f6:	b300      	cbz	r0, 800583a <__kernel_rem_pio2+0x44a>
 80057f8:	4b9c      	ldr	r3, [pc, #624]	; (8005a6c <__kernel_rem_pio2+0x67c>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fa fe9e 	bl	8000540 <__aeabi_dmul>
 8005804:	f7fb f94c 	bl	8000aa0 <__aeabi_d2iz>
 8005808:	4605      	mov	r5, r0
 800580a:	f7fa fe2f 	bl	800046c <__aeabi_i2d>
 800580e:	4b96      	ldr	r3, [pc, #600]	; (8005a68 <__kernel_rem_pio2+0x678>)
 8005810:	2200      	movs	r2, #0
 8005812:	f7fa fe95 	bl	8000540 <__aeabi_dmul>
 8005816:	460b      	mov	r3, r1
 8005818:	4602      	mov	r2, r0
 800581a:	4639      	mov	r1, r7
 800581c:	4630      	mov	r0, r6
 800581e:	f7fa fcd7 	bl	80001d0 <__aeabi_dsub>
 8005822:	f7fb f93d 	bl	8000aa0 <__aeabi_d2iz>
 8005826:	f104 0b01 	add.w	fp, r4, #1
 800582a:	ab0c      	add	r3, sp, #48	; 0x30
 800582c:	f10a 0a18 	add.w	sl, sl, #24
 8005830:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005834:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005838:	e72b      	b.n	8005692 <__kernel_rem_pio2+0x2a2>
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fb f92f 	bl	8000aa0 <__aeabi_d2iz>
 8005842:	ab0c      	add	r3, sp, #48	; 0x30
 8005844:	46a3      	mov	fp, r4
 8005846:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800584a:	e722      	b.n	8005692 <__kernel_rem_pio2+0x2a2>
 800584c:	ab70      	add	r3, sp, #448	; 0x1c0
 800584e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005852:	ab0c      	add	r3, sp, #48	; 0x30
 8005854:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005858:	f7fa fe08 	bl	800046c <__aeabi_i2d>
 800585c:	4622      	mov	r2, r4
 800585e:	462b      	mov	r3, r5
 8005860:	f7fa fe6e 	bl	8000540 <__aeabi_dmul>
 8005864:	4632      	mov	r2, r6
 8005866:	e9c9 0100 	strd	r0, r1, [r9]
 800586a:	463b      	mov	r3, r7
 800586c:	4620      	mov	r0, r4
 800586e:	4629      	mov	r1, r5
 8005870:	f7fa fe66 	bl	8000540 <__aeabi_dmul>
 8005874:	f108 38ff 	add.w	r8, r8, #4294967295
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	e713      	b.n	80056a6 <__kernel_rem_pio2+0x2b6>
 800587e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005882:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005886:	f7fa fe5b 	bl	8000540 <__aeabi_dmul>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fa fc9f 	bl	80001d4 <__adddf3>
 8005896:	3601      	adds	r6, #1
 8005898:	4604      	mov	r4, r0
 800589a:	460d      	mov	r5, r1
 800589c:	9b04      	ldr	r3, [sp, #16]
 800589e:	429e      	cmp	r6, r3
 80058a0:	dc01      	bgt.n	80058a6 <__kernel_rem_pio2+0x4b6>
 80058a2:	45b0      	cmp	r8, r6
 80058a4:	daeb      	bge.n	800587e <__kernel_rem_pio2+0x48e>
 80058a6:	ab48      	add	r3, sp, #288	; 0x120
 80058a8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80058ac:	e9c3 4500 	strd	r4, r5, [r3]
 80058b0:	3f01      	subs	r7, #1
 80058b2:	f108 0801 	add.w	r8, r8, #1
 80058b6:	e6ff      	b.n	80056b8 <__kernel_rem_pio2+0x2c8>
 80058b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	dc0b      	bgt.n	80058d6 <__kernel_rem_pio2+0x4e6>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dc6e      	bgt.n	80059a0 <__kernel_rem_pio2+0x5b0>
 80058c2:	d045      	beq.n	8005950 <__kernel_rem_pio2+0x560>
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	f003 0007 	and.w	r0, r3, #7
 80058ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80058ce:	ecbd 8b02 	vpop	{d8}
 80058d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d1f3      	bne.n	80058c4 <__kernel_rem_pio2+0x4d4>
 80058dc:	ab48      	add	r3, sp, #288	; 0x120
 80058de:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80058e2:	46d0      	mov	r8, sl
 80058e4:	46d9      	mov	r9, fp
 80058e6:	f1b9 0f00 	cmp.w	r9, #0
 80058ea:	f1a8 0808 	sub.w	r8, r8, #8
 80058ee:	dc64      	bgt.n	80059ba <__kernel_rem_pio2+0x5ca>
 80058f0:	465c      	mov	r4, fp
 80058f2:	2c01      	cmp	r4, #1
 80058f4:	f1aa 0a08 	sub.w	sl, sl, #8
 80058f8:	dc7e      	bgt.n	80059f8 <__kernel_rem_pio2+0x608>
 80058fa:	2000      	movs	r0, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	f1bb 0f01 	cmp.w	fp, #1
 8005902:	f300 8097 	bgt.w	8005a34 <__kernel_rem_pio2+0x644>
 8005906:	9b02      	ldr	r3, [sp, #8]
 8005908:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800590c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 8099 	bne.w	8005a48 <__kernel_rem_pio2+0x658>
 8005916:	9b01      	ldr	r3, [sp, #4]
 8005918:	e9c3 5600 	strd	r5, r6, [r3]
 800591c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005920:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005924:	e7ce      	b.n	80058c4 <__kernel_rem_pio2+0x4d4>
 8005926:	ab48      	add	r3, sp, #288	; 0x120
 8005928:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f7fa fc50 	bl	80001d4 <__adddf3>
 8005934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005938:	f1bb 0f00 	cmp.w	fp, #0
 800593c:	daf3      	bge.n	8005926 <__kernel_rem_pio2+0x536>
 800593e:	9b02      	ldr	r3, [sp, #8]
 8005940:	b113      	cbz	r3, 8005948 <__kernel_rem_pio2+0x558>
 8005942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005946:	4619      	mov	r1, r3
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	e9c3 0100 	strd	r0, r1, [r3]
 800594e:	e7b9      	b.n	80058c4 <__kernel_rem_pio2+0x4d4>
 8005950:	2000      	movs	r0, #0
 8005952:	2100      	movs	r1, #0
 8005954:	e7f0      	b.n	8005938 <__kernel_rem_pio2+0x548>
 8005956:	ab48      	add	r3, sp, #288	; 0x120
 8005958:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f7fa fc38 	bl	80001d4 <__adddf3>
 8005964:	3c01      	subs	r4, #1
 8005966:	2c00      	cmp	r4, #0
 8005968:	daf5      	bge.n	8005956 <__kernel_rem_pio2+0x566>
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	b1e3      	cbz	r3, 80059a8 <__kernel_rem_pio2+0x5b8>
 800596e:	4602      	mov	r2, r0
 8005970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005974:	9c01      	ldr	r4, [sp, #4]
 8005976:	e9c4 2300 	strd	r2, r3, [r4]
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005982:	f7fa fc25 	bl	80001d0 <__aeabi_dsub>
 8005986:	ad4a      	add	r5, sp, #296	; 0x128
 8005988:	2401      	movs	r4, #1
 800598a:	45a3      	cmp	fp, r4
 800598c:	da0f      	bge.n	80059ae <__kernel_rem_pio2+0x5be>
 800598e:	9b02      	ldr	r3, [sp, #8]
 8005990:	b113      	cbz	r3, 8005998 <__kernel_rem_pio2+0x5a8>
 8005992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005996:	4619      	mov	r1, r3
 8005998:	9b01      	ldr	r3, [sp, #4]
 800599a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800599e:	e791      	b.n	80058c4 <__kernel_rem_pio2+0x4d4>
 80059a0:	465c      	mov	r4, fp
 80059a2:	2000      	movs	r0, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	e7de      	b.n	8005966 <__kernel_rem_pio2+0x576>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	e7e2      	b.n	8005974 <__kernel_rem_pio2+0x584>
 80059ae:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80059b2:	f7fa fc0f 	bl	80001d4 <__adddf3>
 80059b6:	3401      	adds	r4, #1
 80059b8:	e7e7      	b.n	800598a <__kernel_rem_pio2+0x59a>
 80059ba:	e9d8 4500 	ldrd	r4, r5, [r8]
 80059be:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80059c2:	4620      	mov	r0, r4
 80059c4:	4632      	mov	r2, r6
 80059c6:	463b      	mov	r3, r7
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fa fc03 	bl	80001d4 <__adddf3>
 80059ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4620      	mov	r0, r4
 80059d8:	4629      	mov	r1, r5
 80059da:	f7fa fbf9 	bl	80001d0 <__aeabi_dsub>
 80059de:	4632      	mov	r2, r6
 80059e0:	463b      	mov	r3, r7
 80059e2:	f7fa fbf7 	bl	80001d4 <__adddf3>
 80059e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80059ea:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80059ee:	ed88 7b00 	vstr	d7, [r8]
 80059f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80059f6:	e776      	b.n	80058e6 <__kernel_rem_pio2+0x4f6>
 80059f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80059fc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005a00:	4640      	mov	r0, r8
 8005a02:	4632      	mov	r2, r6
 8005a04:	463b      	mov	r3, r7
 8005a06:	4649      	mov	r1, r9
 8005a08:	f7fa fbe4 	bl	80001d4 <__adddf3>
 8005a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4640      	mov	r0, r8
 8005a16:	4649      	mov	r1, r9
 8005a18:	f7fa fbda 	bl	80001d0 <__aeabi_dsub>
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	463b      	mov	r3, r7
 8005a20:	f7fa fbd8 	bl	80001d4 <__adddf3>
 8005a24:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005a28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a2c:	ed8a 7b00 	vstr	d7, [sl]
 8005a30:	3c01      	subs	r4, #1
 8005a32:	e75e      	b.n	80058f2 <__kernel_rem_pio2+0x502>
 8005a34:	ab48      	add	r3, sp, #288	; 0x120
 8005a36:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f7fa fbc9 	bl	80001d4 <__adddf3>
 8005a42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a46:	e75a      	b.n	80058fe <__kernel_rem_pio2+0x50e>
 8005a48:	9b01      	ldr	r3, [sp, #4]
 8005a4a:	9a01      	ldr	r2, [sp, #4]
 8005a4c:	601d      	str	r5, [r3, #0]
 8005a4e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005a52:	605c      	str	r4, [r3, #4]
 8005a54:	609f      	str	r7, [r3, #8]
 8005a56:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005a5a:	60d3      	str	r3, [r2, #12]
 8005a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a60:	6110      	str	r0, [r2, #16]
 8005a62:	6153      	str	r3, [r2, #20]
 8005a64:	e72e      	b.n	80058c4 <__kernel_rem_pio2+0x4d4>
 8005a66:	bf00      	nop
 8005a68:	41700000 	.word	0x41700000
 8005a6c:	3e700000 	.word	0x3e700000

08005a70 <__kernel_sin>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ed2d 8b04 	vpush	{d8-d9}
 8005a78:	eeb0 8a41 	vmov.f32	s16, s2
 8005a7c:	eef0 8a61 	vmov.f32	s17, s3
 8005a80:	ec55 4b10 	vmov	r4, r5, d0
 8005a84:	b083      	sub	sp, #12
 8005a86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005a8e:	9001      	str	r0, [sp, #4]
 8005a90:	da06      	bge.n	8005aa0 <__kernel_sin+0x30>
 8005a92:	ee10 0a10 	vmov	r0, s0
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7fb f802 	bl	8000aa0 <__aeabi_d2iz>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d051      	beq.n	8005b44 <__kernel_sin+0xd4>
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	462b      	mov	r3, r5
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	f7fa fd4a 	bl	8000540 <__aeabi_dmul>
 8005aac:	4682      	mov	sl, r0
 8005aae:	468b      	mov	fp, r1
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	f7fa fd42 	bl	8000540 <__aeabi_dmul>
 8005abc:	a341      	add	r3, pc, #260	; (adr r3, 8005bc4 <__kernel_sin+0x154>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	4680      	mov	r8, r0
 8005ac4:	4689      	mov	r9, r1
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	4659      	mov	r1, fp
 8005aca:	f7fa fd39 	bl	8000540 <__aeabi_dmul>
 8005ace:	a33f      	add	r3, pc, #252	; (adr r3, 8005bcc <__kernel_sin+0x15c>)
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f7fa fb7c 	bl	80001d0 <__aeabi_dsub>
 8005ad8:	4652      	mov	r2, sl
 8005ada:	465b      	mov	r3, fp
 8005adc:	f7fa fd30 	bl	8000540 <__aeabi_dmul>
 8005ae0:	a33c      	add	r3, pc, #240	; (adr r3, 8005bd4 <__kernel_sin+0x164>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f7fa fb75 	bl	80001d4 <__adddf3>
 8005aea:	4652      	mov	r2, sl
 8005aec:	465b      	mov	r3, fp
 8005aee:	f7fa fd27 	bl	8000540 <__aeabi_dmul>
 8005af2:	a33a      	add	r3, pc, #232	; (adr r3, 8005bdc <__kernel_sin+0x16c>)
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f7fa fb6a 	bl	80001d0 <__aeabi_dsub>
 8005afc:	4652      	mov	r2, sl
 8005afe:	465b      	mov	r3, fp
 8005b00:	f7fa fd1e 	bl	8000540 <__aeabi_dmul>
 8005b04:	a337      	add	r3, pc, #220	; (adr r3, 8005be4 <__kernel_sin+0x174>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f7fa fb63 	bl	80001d4 <__adddf3>
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	4606      	mov	r6, r0
 8005b12:	460f      	mov	r7, r1
 8005b14:	b9eb      	cbnz	r3, 8005b52 <__kernel_sin+0xe2>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	f7fa fd0f 	bl	8000540 <__aeabi_dmul>
 8005b22:	a325      	add	r3, pc, #148	; (adr r3, 8005bb8 <__kernel_sin+0x148>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fb52 	bl	80001d0 <__aeabi_dsub>
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	f7fa fd06 	bl	8000540 <__aeabi_dmul>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4620      	mov	r0, r4
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	f7fa fb4a 	bl	80001d4 <__adddf3>
 8005b40:	4604      	mov	r4, r0
 8005b42:	460d      	mov	r5, r1
 8005b44:	ec45 4b10 	vmov	d0, r4, r5
 8005b48:	b003      	add	sp, #12
 8005b4a:	ecbd 8b04 	vpop	{d8-d9}
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <__kernel_sin+0x150>)
 8005b54:	ec51 0b18 	vmov	r0, r1, d8
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f7fa fcf1 	bl	8000540 <__aeabi_dmul>
 8005b5e:	4632      	mov	r2, r6
 8005b60:	ec41 0b19 	vmov	d9, r0, r1
 8005b64:	463b      	mov	r3, r7
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fce9 	bl	8000540 <__aeabi_dmul>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	ec51 0b19 	vmov	r0, r1, d9
 8005b76:	f7fa fb2b 	bl	80001d0 <__aeabi_dsub>
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	465b      	mov	r3, fp
 8005b7e:	f7fa fcdf 	bl	8000540 <__aeabi_dmul>
 8005b82:	ec53 2b18 	vmov	r2, r3, d8
 8005b86:	f7fa fb23 	bl	80001d0 <__aeabi_dsub>
 8005b8a:	a30b      	add	r3, pc, #44	; (adr r3, 8005bb8 <__kernel_sin+0x148>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	4606      	mov	r6, r0
 8005b92:	460f      	mov	r7, r1
 8005b94:	4640      	mov	r0, r8
 8005b96:	4649      	mov	r1, r9
 8005b98:	f7fa fcd2 	bl	8000540 <__aeabi_dmul>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	f7fa fb16 	bl	80001d4 <__adddf3>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa fb0e 	bl	80001d0 <__aeabi_dsub>
 8005bb4:	e7c4      	b.n	8005b40 <__kernel_sin+0xd0>
 8005bb6:	bf00      	nop
 8005bb8:	55555549 	.word	0x55555549
 8005bbc:	3fc55555 	.word	0x3fc55555
 8005bc0:	3fe00000 	.word	0x3fe00000
 8005bc4:	5acfd57c 	.word	0x5acfd57c
 8005bc8:	3de5d93a 	.word	0x3de5d93a
 8005bcc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005bd0:	3e5ae5e6 	.word	0x3e5ae5e6
 8005bd4:	57b1fe7d 	.word	0x57b1fe7d
 8005bd8:	3ec71de3 	.word	0x3ec71de3
 8005bdc:	19c161d5 	.word	0x19c161d5
 8005be0:	3f2a01a0 	.word	0x3f2a01a0
 8005be4:	1110f8a6 	.word	0x1110f8a6
 8005be8:	3f811111 	.word	0x3f811111

08005bec <fabs>:
 8005bec:	ec51 0b10 	vmov	r0, r1, d0
 8005bf0:	ee10 2a10 	vmov	r2, s0
 8005bf4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005bf8:	ec43 2b10 	vmov	d0, r2, r3
 8005bfc:	4770      	bx	lr
	...

08005c00 <floor>:
 8005c00:	ec51 0b10 	vmov	r0, r1, d0
 8005c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005c0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005c10:	2e13      	cmp	r6, #19
 8005c12:	ee10 5a10 	vmov	r5, s0
 8005c16:	ee10 8a10 	vmov	r8, s0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	dc32      	bgt.n	8005c84 <floor+0x84>
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	da14      	bge.n	8005c4c <floor+0x4c>
 8005c22:	a333      	add	r3, pc, #204	; (adr r3, 8005cf0 <floor+0xf0>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f7fa fad4 	bl	80001d4 <__adddf3>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f7fa ff16 	bl	8000a60 <__aeabi_dcmpgt>
 8005c34:	b138      	cbz	r0, 8005c46 <floor+0x46>
 8005c36:	2c00      	cmp	r4, #0
 8005c38:	da57      	bge.n	8005cea <floor+0xea>
 8005c3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005c3e:	431d      	orrs	r5, r3
 8005c40:	d001      	beq.n	8005c46 <floor+0x46>
 8005c42:	4c2d      	ldr	r4, [pc, #180]	; (8005cf8 <floor+0xf8>)
 8005c44:	2500      	movs	r5, #0
 8005c46:	4621      	mov	r1, r4
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e025      	b.n	8005c98 <floor+0x98>
 8005c4c:	4f2b      	ldr	r7, [pc, #172]	; (8005cfc <floor+0xfc>)
 8005c4e:	4137      	asrs	r7, r6
 8005c50:	ea01 0307 	and.w	r3, r1, r7
 8005c54:	4303      	orrs	r3, r0
 8005c56:	d01f      	beq.n	8005c98 <floor+0x98>
 8005c58:	a325      	add	r3, pc, #148	; (adr r3, 8005cf0 <floor+0xf0>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fab9 	bl	80001d4 <__adddf3>
 8005c62:	2200      	movs	r2, #0
 8005c64:	2300      	movs	r3, #0
 8005c66:	f7fa fefb 	bl	8000a60 <__aeabi_dcmpgt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d0eb      	beq.n	8005c46 <floor+0x46>
 8005c6e:	2c00      	cmp	r4, #0
 8005c70:	bfbe      	ittt	lt
 8005c72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005c76:	fa43 f606 	asrlt.w	r6, r3, r6
 8005c7a:	19a4      	addlt	r4, r4, r6
 8005c7c:	ea24 0407 	bic.w	r4, r4, r7
 8005c80:	2500      	movs	r5, #0
 8005c82:	e7e0      	b.n	8005c46 <floor+0x46>
 8005c84:	2e33      	cmp	r6, #51	; 0x33
 8005c86:	dd0b      	ble.n	8005ca0 <floor+0xa0>
 8005c88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005c8c:	d104      	bne.n	8005c98 <floor+0x98>
 8005c8e:	ee10 2a10 	vmov	r2, s0
 8005c92:	460b      	mov	r3, r1
 8005c94:	f7fa fa9e 	bl	80001d4 <__adddf3>
 8005c98:	ec41 0b10 	vmov	d0, r0, r1
 8005c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca8:	fa23 f707 	lsr.w	r7, r3, r7
 8005cac:	4207      	tst	r7, r0
 8005cae:	d0f3      	beq.n	8005c98 <floor+0x98>
 8005cb0:	a30f      	add	r3, pc, #60	; (adr r3, 8005cf0 <floor+0xf0>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fa8d 	bl	80001d4 <__adddf3>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f7fa fecf 	bl	8000a60 <__aeabi_dcmpgt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d0bf      	beq.n	8005c46 <floor+0x46>
 8005cc6:	2c00      	cmp	r4, #0
 8005cc8:	da02      	bge.n	8005cd0 <floor+0xd0>
 8005cca:	2e14      	cmp	r6, #20
 8005ccc:	d103      	bne.n	8005cd6 <floor+0xd6>
 8005cce:	3401      	adds	r4, #1
 8005cd0:	ea25 0507 	bic.w	r5, r5, r7
 8005cd4:	e7b7      	b.n	8005c46 <floor+0x46>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005cdc:	fa03 f606 	lsl.w	r6, r3, r6
 8005ce0:	4435      	add	r5, r6
 8005ce2:	4545      	cmp	r5, r8
 8005ce4:	bf38      	it	cc
 8005ce6:	18e4      	addcc	r4, r4, r3
 8005ce8:	e7f2      	b.n	8005cd0 <floor+0xd0>
 8005cea:	2500      	movs	r5, #0
 8005cec:	462c      	mov	r4, r5
 8005cee:	e7aa      	b.n	8005c46 <floor+0x46>
 8005cf0:	8800759c 	.word	0x8800759c
 8005cf4:	7e37e43c 	.word	0x7e37e43c
 8005cf8:	bff00000 	.word	0xbff00000
 8005cfc:	000fffff 	.word	0x000fffff

08005d00 <scalbn>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	ec55 4b10 	vmov	r4, r5, d0
 8005d06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	b99a      	cbnz	r2, 8005d38 <scalbn+0x38>
 8005d10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d14:	4323      	orrs	r3, r4
 8005d16:	d036      	beq.n	8005d86 <scalbn+0x86>
 8005d18:	4b39      	ldr	r3, [pc, #228]	; (8005e00 <scalbn+0x100>)
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	ee10 0a10 	vmov	r0, s0
 8005d20:	2200      	movs	r2, #0
 8005d22:	f7fa fc0d 	bl	8000540 <__aeabi_dmul>
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <scalbn+0x104>)
 8005d28:	429e      	cmp	r6, r3
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	460d      	mov	r5, r1
 8005d2e:	da10      	bge.n	8005d52 <scalbn+0x52>
 8005d30:	a32b      	add	r3, pc, #172	; (adr r3, 8005de0 <scalbn+0xe0>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	e03a      	b.n	8005dae <scalbn+0xae>
 8005d38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005d3c:	428a      	cmp	r2, r1
 8005d3e:	d10c      	bne.n	8005d5a <scalbn+0x5a>
 8005d40:	ee10 2a10 	vmov	r2, s0
 8005d44:	4620      	mov	r0, r4
 8005d46:	4629      	mov	r1, r5
 8005d48:	f7fa fa44 	bl	80001d4 <__adddf3>
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	460d      	mov	r5, r1
 8005d50:	e019      	b.n	8005d86 <scalbn+0x86>
 8005d52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d56:	460b      	mov	r3, r1
 8005d58:	3a36      	subs	r2, #54	; 0x36
 8005d5a:	4432      	add	r2, r6
 8005d5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005d60:	428a      	cmp	r2, r1
 8005d62:	dd08      	ble.n	8005d76 <scalbn+0x76>
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	a120      	add	r1, pc, #128	; (adr r1, 8005de8 <scalbn+0xe8>)
 8005d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d6c:	da1c      	bge.n	8005da8 <scalbn+0xa8>
 8005d6e:	a120      	add	r1, pc, #128	; (adr r1, 8005df0 <scalbn+0xf0>)
 8005d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d74:	e018      	b.n	8005da8 <scalbn+0xa8>
 8005d76:	2a00      	cmp	r2, #0
 8005d78:	dd08      	ble.n	8005d8c <scalbn+0x8c>
 8005d7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d86:	ec45 4b10 	vmov	d0, r4, r5
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005d90:	da19      	bge.n	8005dc6 <scalbn+0xc6>
 8005d92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d96:	429e      	cmp	r6, r3
 8005d98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005d9c:	dd0a      	ble.n	8005db4 <scalbn+0xb4>
 8005d9e:	a112      	add	r1, pc, #72	; (adr r1, 8005de8 <scalbn+0xe8>)
 8005da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e2      	bne.n	8005d6e <scalbn+0x6e>
 8005da8:	a30f      	add	r3, pc, #60	; (adr r3, 8005de8 <scalbn+0xe8>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fbc7 	bl	8000540 <__aeabi_dmul>
 8005db2:	e7cb      	b.n	8005d4c <scalbn+0x4c>
 8005db4:	a10a      	add	r1, pc, #40	; (adr r1, 8005de0 <scalbn+0xe0>)
 8005db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0b8      	beq.n	8005d30 <scalbn+0x30>
 8005dbe:	a10e      	add	r1, pc, #56	; (adr r1, 8005df8 <scalbn+0xf8>)
 8005dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dc4:	e7b4      	b.n	8005d30 <scalbn+0x30>
 8005dc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005dca:	3236      	adds	r2, #54	; 0x36
 8005dcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <scalbn+0x108>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	e7e8      	b.n	8005dae <scalbn+0xae>
 8005ddc:	f3af 8000 	nop.w
 8005de0:	c2f8f359 	.word	0xc2f8f359
 8005de4:	01a56e1f 	.word	0x01a56e1f
 8005de8:	8800759c 	.word	0x8800759c
 8005dec:	7e37e43c 	.word	0x7e37e43c
 8005df0:	8800759c 	.word	0x8800759c
 8005df4:	fe37e43c 	.word	0xfe37e43c
 8005df8:	c2f8f359 	.word	0xc2f8f359
 8005dfc:	81a56e1f 	.word	0x81a56e1f
 8005e00:	43500000 	.word	0x43500000
 8005e04:	ffff3cb0 	.word	0xffff3cb0
 8005e08:	3c900000 	.word	0x3c900000

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
